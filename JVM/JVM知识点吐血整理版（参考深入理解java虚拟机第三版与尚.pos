{"diagram":{"image":{"x":0,"width":200,"y":0,"pngdata":"iVBORw0KGgoAAAANSUhEUgAAAMgAAADICAYAAACtWK6eAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAsUlEQVR4nO3BAQEAAACCIP+vbkhAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB8GXHmAAFMgHIEAAAAAElFTkSuQmCC","height":200},"elements":{"leftChildren":[{"parent":"root","lineStyle":{"randomLineColor":"#FA5465"},"children":[{"parent":"535260158856","children":[{"parent":"bd4bfe3fabbe","image":{"w":900,"h":434.5864661654135,"url":"http://cdn.processon.com/5ee182c35653bb29259000bc?e=1591840980&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:QSK3EDM-oFaoY8tGJnfHOGzH9zk="},"children":[],"id":"cca87d06119d","title":"子主题"},{"parent":"bd4bfe3fabbe","image":{"w":900,"h":467.62048192771084,"url":"http://cdn.processon.com/5ee183dc6376891e81c275c7?e=1591841261&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:JVUdx5ydUMmJ4WmgJwuyQO5OaGA="},"children":[],"id":"6983f9cc1778","title":"子主题"}],"id":"bd4bfe3fabbe","title":"栈、堆、方法区交互关系"},{"parent":"535260158856","children":[{"parent":"cea3b57ce489","children":[],"id":"49e5d6e9b44d","title":"Java虚拟机规范中明确说明：尽管所有的方法区在逻辑上是属于堆的一部分，但是一些简单的实现，可能不会选择去进行垃圾收集或者进行压缩。对于HotSpot而言，方法区还有一个别名叫Non-Heap（非堆），目的就是要和堆分开"},{"parent":"cea3b57ce489","children":[],"id":"a759ec81065d","title":"所以方法区看作是一块独立于Java堆的内存空间"},{"parent":"cea3b57ce489","children":[],"id":"c9efc207ea60","title":"方法区和Java堆一样，是各个线程共享的内存区域"},{"parent":"cea3b57ce489","children":[],"id":"fe3c9cee5fdd","title":"方法区在JVM启动的时候被创建，并且它的实际的物理内存空间和Java堆区一样，都是可以不连续的"},{"parent":"cea3b57ce489","children":[],"id":"5ae16b55e345","title":"方法区的大小和堆空间一样，可以选择固定大小或者可扩展"},{"parent":"cea3b57ce489","children":[],"id":"9591cf3ba2b3","title":"方法区的大小决定了系统可以保存多少个类，如果定义太多类，加载大量的第三方的Jar包，Tomcat部署过多工程，导致方法区溢出，虚拟机同样会抛出内存溢出OOM：PermGen space或者Metaspace&nbsp;"},{"parent":"cea3b57ce489","children":[],"id":"3aa5685e0ad8","title":"关闭JVM就会释放这个区域的内存"}],"id":"cea3b57ce489","title":"方法区的理解"},{"parent":"535260158856","children":[{"parent":"60ab7bfa0365","children":[{"parent":"329c2582952b","children":[],"id":"1fe4ce1caebd","title":"元空间的本质和永久带类似，都是对JVM规范中方法区的实现。不过元空间与永久代最大的区别在于：元空间不在虚拟机设置的内存中，而是使用本地内存"},{"parent":"329c2582952b","children":[],"id":"1f7185fe40f9","title":"根据Jvm规范，如果方法区无法满足新的内存分配需求，将抛出OOM异常"}],"id":"329c2582952b","title":"在jdk7及以前，习惯上把方法区，称为永久代，jdk8开始，使用元空间取代了永久代"},{"parent":"60ab7bfa0365","children":[],"id":"078f03286182","title":"本质上，方法区和永久代并不等价，仅是对HostSpot而言的。"},{"parent":"60ab7bfa0365","children":[],"id":"38bdd337df71","title":"Java虚拟机规范，对如何实现方法区，不做统一要求，例如BEA JRockit/IBM J9中不存在永久代的概念"},{"parent":"60ab7bfa0365","children":[{"parent":"3c165f3c6c30","children":[],"id":"64b4f3a16aad","title":"-XX:MaxPermSize"}],"id":"3c165f3c6c30","title":"现在来看，当年使用永久代，不是好的点子，导致Java程序更容易OOM"}],"id":"60ab7bfa0365","title":"HotSpot中方法区的演进"},{"parent":"535260158856","children":[{"parent":"2536115b5784","children":[{"parent":"9611055d7a3d","children":[{"parent":"e39f3a883ae8","children":[],"id":"b256a3552d08","title":"通过-XX:PermSize 来设置永久代初始分配空间，默认值是20.75M"},{"parent":"e39f3a883ae8","children":[{"parent":"53c8c85bf9b7","children":[],"id":"cf4401275055","title":"32位机器默认是64M"},{"parent":"53c8c85bf9b7","children":[],"id":"7114fa1108a0","title":"64位机器默认是82M"}],"id":"53c8c85bf9b7","title":"-XX:MaxPermSize来设定永久代最大可分配空间。"},{"parent":"e39f3a883ae8","children":[],"id":"c3ec96b72093","title":"如果JVM加载的类信息容量超过了这个值，会报OOM:PermGenspace"}],"id":"e39f3a883ae8","title":"JDK7及以前"},{"parent":"9611055d7a3d","children":[{"parent":"a6e75b9655d0","children":[],"id":"61b1ba13d797","title":"-XX:MetaspaceSize"},{"parent":"a6e75b9655d0","children":[],"id":"563c2ab434f9","title":"-XX:MaxMetaspaceSize"},{"parent":"a6e75b9655d0","children":[{"parent":"e04764e37877","children":[],"id":"a2eeb9d453bb","title":"windows下初始为21M，最大是-1即没有限制"}],"id":"e04764e37877","title":"默认值依赖平台"},{"parent":"a6e75b9655d0","children":[],"id":"b3e096b9b45a","title":"如果不指定大小，虚拟机耗用所有可用系统内存，元数据区发生溢出，一样OOM:Metaspace"},{"parent":"a6e75b9655d0","children":[],"id":"0a5fb3c24a2e","title":"对于一个64位服务端JVM来说，默认的初始元数据区空间为21M，这就是初始的高水位线。一旦触及这个水位线，FULLGC会触发并卸载没有用的类，然后高水位线会被重置。新的高水位线的值取决于GC后释放了多少元空间。如果释放空间不足，在不超过最大设定值时，适当提高该值。如果释放空间过多，则适当降低该值。"},{"parent":"a6e75b9655d0","children":[],"id":"33b65bc0fcbd","title":"如果初始化的高水位线设置过低，上述高水位线调整情况会发生很多次，fullGC多次调用。为了避免频繁FullGC，建议将-XX:MetaspaceSize设置为一个相对较高的值"}],"id":"a6e75b9655d0","title":"JDK8及以后"}],"id":"9611055d7a3d","title":"方法区大小不是固定的，jvm可以根据应用动态调整"}],"id":"2536115b5784","title":"设置方法区大小与OOM"},{"parent":"535260158856","children":[{"parent":"c521e93569a8","children":[],"id":"33dfb1ee59a4","title":"要解决OOM或heap space异常，一般的手段是通过内存映像分析工具，对dump出来的堆转存储快照进行分析，重点确认内存中的对象是否是必要的，也就是要先分清楚到底是出现了内存泄露，还是内存溢出"},{"parent":"c521e93569a8","children":[],"id":"4754207974a3","title":"如果是内存泄露，可进一步通过工具查看泄露对象到GC Roots的引用链，于是就能找到内存泄露对象时通过怎样的路径与GC Roots相关联，导致垃圾收集器无法自动回收他们。根据引用链信息，可以较准确的定位出泄露代码的位置"},{"parent":"c521e93569a8","children":[],"id":"105332196af7","title":"如果不存在内存泄露，或者说内存中的对象确实都还必须存活着，那就应当检查虚拟机的堆参数（-Xmx与-Xms），与物理机器内存对比是否还可以调大，从代码检查是否某些对象生命周期过长，持有状态时间过长，尝试减少程序运行时的内存耗用"}],"id":"c521e93569a8","title":"如何解决OOM"},{"parent":"535260158856","children":[{"parent":"e291dc18cf98","children":[{"parent":"a5f8f76fbef3","children":[{"parent":"a6a7b4ba3149","children":[{"parent":"5bb8663a3261","children":[],"id":"3e60f2669eac","title":"对于每个加载的类型（类Class，接口Interface，枚举Enum，注解annotation）"},{"parent":"5bb8663a3261","children":[],"id":"2a7036bb05b5","title":"JVM必须在方法区中存储以下类型信息"},{"parent":"5bb8663a3261","children":[],"id":"e883b361f4a5","title":"这个类的完整有效名称（全名=包名.类名）"},{"parent":"5bb8663a3261","children":[],"id":"c58c904c077c","title":"这个类型直接父类的完整有效名，对于interface或Object没有父类"},{"parent":"5bb8663a3261","children":[],"id":"cd2328f593d1","title":"这个类型的修饰符，public,abstract，final"},{"parent":"5bb8663a3261","children":[],"id":"05d03c4a9c82","title":"这个类型直接接口的一个有序列表"}],"id":"5bb8663a3261","title":"类型信息"},{"parent":"a6a7b4ba3149","children":[{"parent":"3c7eb85309ea","children":[],"id":"9035176b4959","title":"JVM必须在方法区中保存类型的所有域的相关信息，以及域的声明顺序"},{"parent":"3c7eb85309ea","children":[],"id":"36d8716db43d","title":"域的相关信息包括：域名称、域类型、域修饰符（public,private,protected,static,final,volatile,transient的某个子集）"}],"id":"3c7eb85309ea","title":"域信息"},{"parent":"a6a7b4ba3149","children":[{"parent":"c9dfacc49860","children":[],"id":"b5ab22c53732","title":"JVM必须保存所有方法的以下信息，同域信息一样包括声明顺序"},{"parent":"c9dfacc49860","children":[],"id":"3c8db945d5f1","title":"方法名称"},{"parent":"c9dfacc49860","children":[{"parent":"f8169c3046f5","children":[],"id":"a6fcaf3274d2","title":"或void"}],"id":"f8169c3046f5","title":"方法的返回类型"},{"parent":"c9dfacc49860","children":[{"parent":"9f5c260388e0","children":[],"id":"c76393eb757b","title":"按顺序"}],"id":"9f5c260388e0","title":"方法参数的数量和类型"},{"parent":"c9dfacc49860","children":[{"parent":"8663f1cde4e6","children":[],"id":"9d85250d9424","title":"public，private，protected，static，final，synchronized，native，abstract的一个子集"}],"id":"8663f1cde4e6","title":"方法的修饰符"},{"parent":"c9dfacc49860","children":[],"id":"4b6c2b907483","title":"方法的字节码bytecodes,操作数栈，局部变量表及大小"},{"parent":"c9dfacc49860","children":[{"parent":"591c7a8af901","children":[{"parent":"9f37a49379b2","children":[],"id":"4bf3858fe92b","title":"每个异常处理的开始位置，结束位置，代码处理在程序计数器中的偏移地址，被捕获的异常类的常量池索引。"}],"id":"9f37a49379b2","title":"abstract和native方法除外"}],"id":"591c7a8af901","title":"异常表"}],"id":"c9dfacc49860","title":"方法信息"},{"parent":"a6a7b4ba3149","children":[{"parent":"6ad72e4fe567","children":[],"id":"8a3607e27ff7","title":"静态变量和类关联在一起，随着类的加载而加载，他们成为类数据在逻辑上的一部分"},{"parent":"6ad72e4fe567","children":[],"id":"d09ee2e7eac4","title":"类变量被类的所有实例共享，即使没有类实例时，你也可以访问他"}],"id":"6ad72e4fe567","title":"non-final的类变量"},{"parent":"a6a7b4ba3149","children":[{"parent":"69443923c1c5","children":[{"parent":"ba1b9b13ecb1","children":[],"id":"64b72df374d2","title":"被声明为final的类变量的处理方法则不同，每个全局常量在编译的时候就会被分配了。"}],"id":"ba1b9b13ecb1","title":"static final"}],"id":"69443923c1c5","title":"全局常量"},{"parent":"a6a7b4ba3149","children":[{"parent":"ecaa5f0ab7ed","children":[],"id":"ffeeb05a79d0","title":"方法区，内部包含了运行时常量池"},{"parent":"ecaa5f0ab7ed","children":[{"parent":"d3f09f8b484d","children":[],"id":"a9bb83722f5a","title":"运行时将常量池加载到方法区，就是运行时常量池"}],"id":"d3f09f8b484d","title":"字节码文件，内部包含了常量池"},{"parent":"ecaa5f0ab7ed","children":[],"id":"17811aa4f832","title":"要弄清楚方法区，需要理解清楚ClassFile，因为加载类的信息都在方法区"},{"parent":"ecaa5f0ab7ed","children":[],"id":"0fc3873b5bb9","title":"要弄清楚方法区的运行时常量池，需要理解清楚ClassFile中的常量池"},{"parent":"ecaa5f0ab7ed","children":[],"id":"5c940de8ffe2","title":"一个有效的字节码文件中除了包含的类的版本信息、字段、方法以及接口等描述信息外，还包含一项信息那就是常量池表（Constant Pool Table），包括各种字面量和对类型、域和方法的符号引用"},{"parent":"ecaa5f0ab7ed","children":[{"parent":"3f5d12012728","children":[],"id":"0dfa0e35c611","title":"一个java源文件中的类、接口、编译后产生一个字节码文件。而Java中的字节码需要数据支持，通常这种数据会很大，以至于不能直接存到字节码里。换一种方式，可以存到常量池，这个字节码包含了指向常量池的引用。在动态链接会用到运行时常量池。"}],"id":"3f5d12012728","title":"为什么要用常量池？"},{"parent":"ecaa5f0ab7ed","children":[{"parent":"fcb85729d5c2","children":[],"id":"faa5c23a0a97","title":"数量值"},{"parent":"fcb85729d5c2","children":[],"id":"dd9a48dff81d","title":"字符串值"},{"parent":"fcb85729d5c2","children":[],"id":"b6b854be3a56","title":"类引用"},{"parent":"fcb85729d5c2","children":[],"id":"af1cffb83473","title":"字段引用"},{"parent":"fcb85729d5c2","children":[],"id":"68b4493044b4","title":"方法引用"}],"id":"fcb85729d5c2","title":"常量池有什么？"},{"parent":"ecaa5f0ab7ed","children":[],"id":"74a2db4d684f","title":"常量池，可以看做是一张表，虚拟机指令根据这张常量表找到要执行的类名、方法名、参数类型、字面量等类型"},{"parent":"ecaa5f0ab7ed","children":[],"id":"b6ff787a76ea","title":""}],"id":"ecaa5f0ab7ed","title":"常量池"},{"parent":"a6a7b4ba3149","children":[{"parent":"f339f7f96ebd","children":[],"id":"4c13fbb494a4","title":"运行时常量池是方法区的一部分"},{"parent":"f339f7f96ebd","children":[],"id":"7dd7bc68ab97","title":"常量池表是class文件的一部分，用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后存放到方法区的运行时常量池中。"},{"parent":"f339f7f96ebd","children":[],"id":"4fd6cc200066","title":"在加载类和接口到虚拟机后，就会创建对应的运行时常量池"},{"parent":"f339f7f96ebd","children":[],"id":"62b33ca9dfa0","title":"JVM为每个已加载的类型都维护一个常量池，池中的数据像数组项一样，通过索引访问"},{"parent":"f339f7f96ebd","children":[],"id":"13f9e3ef2362","title":"运行时常量池包含多种不同的常量，包括编译期就已经明确的数值字面量，也包括到运行期解析后，才能够获得的方法或者字段引用。此时不再是常量池中的符号地址了，这里转换为真实地址。"},{"parent":"f339f7f96ebd","children":[{"parent":"ae929acdb496","children":[],"id":"d76fe1b3f4fd","title":"例如：String.intern可以将字符串也放入运行时常量池"}],"id":"ae929acdb496","title":"运行时常量池，相对于class文件常量池的另一个重要特征是：具备动态性"},{"parent":"f339f7f96ebd","children":[],"id":"fb26732c7d65","title":"当创建类或接口的运行时常量池，如果构造运行时常量池所需的内存空间超过了方法区所能提供的最大值。则JVM会抛出OOM异常"},{"parent":"f339f7f96ebd","children":[],"id":"c0591f586346","title":"这里注意，常量池数量为N，则索引为1到N-1，"}],"id":"f339f7f96ebd","title":"运行时常量池"}],"id":"a6a7b4ba3149","title":"它用于存储已被虚拟机加载的类型信息，常量，静态变量，即时编译器编译后的代码缓存"}],"id":"a5f8f76fbef3","title":"方法区存储什么"}],"id":"e291dc18cf98","title":"方法区的内部结构"},{"parent":"535260158856","children":[],"id":"0a04a0179820","title":"方法区使用举例"},{"parent":"535260158856","children":[{"parent":"bef78520ab29","children":[],"id":"fbf9b0908957","title":"首先明确，只有HotSpot才有永久代"},{"parent":"bef78520ab29","children":[{"parent":"92a6afcacfbc","children":[{"parent":"35c0737a9a50","children":[{"parent":"e23166364d81","image":{"w":900,"h":433.2697807435653,"url":"http://cdn.processon.com/5ee41d0907912929cb3f37ee?e=1592011545&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:WjuYvY8ZPEv3sKwVB3Lv9-AWRCo="},"children":[],"id":"d3958d13a256","title":"子主题"}],"id":"e23166364d81","title":"有永久代，静态变量存放在永久代上"}],"id":"35c0737a9a50","title":"jdk1.6及之前"},{"parent":"92a6afcacfbc","children":[{"parent":"16a25e0184e6","children":[{"parent":"fdb46569dbbb","image":{"w":900,"h":425.64102564102564,"url":"http://cdn.processon.com/5ee41d13e0b34d4dba37d05b?e=1592011556&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:rnqbSAMY-gk-thK2OR3Q6buy224="},"children":[],"id":"0ea25a3036de","title":"子主题"}],"id":"fdb46569dbbb","title":"有永久代，但已经逐步去永久代，字符串常量池，静态变量移除，保存在堆中"}],"id":"16a25e0184e6","title":"jdk1.7"},{"parent":"92a6afcacfbc","children":[{"parent":"23442641c879","children":[{"parent":"f4a0aba3c8bc","image":{"w":900,"h":344.86607142857144,"url":"http://cdn.processon.com/5ee41d1c07912929cb3f37f1?e=1592011564&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:btmLK8JXyRmeSCka0DkIEntWxJc="},"children":[],"id":"3356d538a4cd","title":"子主题"}],"id":"f4a0aba3c8bc","title":"无永久代，类型信息、字段、方法、常量保存在本地内存的元空间，但字符串常量池，静态变量仍在堆"}],"id":"23442641c879","title":"jdk1.8及之后"}],"id":"92a6afcacfbc","title":"HotSpot中方法区的变化"},{"parent":"bef78520ab29","children":[{"parent":"ba548806402a","children":[],"id":"9f43828c7873","title":"随着 JAVA8的到来，HotSpotVM中再也见不到永久代了，但是并不意味着类的元数据信息也消失了，这些数据被转移到了一个与堆不相连的本地内存区域，这个区域叫做元空间MetaSpace"},{"parent":"ba548806402a","children":[],"id":"ea7396a3218c","title":"由于类的元数据分配在本地内存中，元空间的最大可分配空间就是系统的可用内存空间"},{"parent":"ba548806402a","children":[],"id":"2356b8f177bf","title":"为永久代设置空间大小很难确定，在某些场景下，如果动态加载类过多，就容易产生OOM"},{"parent":"ba548806402a","children":[],"id":"b1abd3748b46","title":"而元空间并不在虚拟机中，而是使用本地内存，因此默认情况下，元空间的大小仅受本地内存限制"},{"parent":"ba548806402a","children":[],"id":"3709253bcbdc","title":"对永久代进行调优是很困难的"}],"id":"ba548806402a","title":"永久代为什么被元空间替换"}],"id":"bef78520ab29","title":"方法区的演进细节"},{"parent":"535260158856","children":[{"parent":"7a96f2e00fe3","children":[],"id":"f068e40654ba","title":"有些人认为方法区是没有垃圾收集行为的，其实不然。Java虚拟机规范对方法区的约束非常宽松，提到过可以不要求虚拟机在方法区实现垃圾收集。事实上，也确实有未实现或未能完整实现方法区类型卸载的收集器，如JDK11 ZGc"},{"parent":"7a96f2e00fe3","children":[{"parent":"9cf18bca4521","children":[{"parent":"b07b2b042736","children":[],"id":"917dcb0d25df","title":"HotSpot对常量池的回收策略很明确，只要常量池中的常量没有被任何地方引用，就可以被回收"},{"parent":"b07b2b042736","children":[],"id":"a48244989617","title":"回收废弃常量与回收Java堆中对象非常类似"}],"id":"b07b2b042736","title":"常量池中废弃的常量"},{"parent":"9cf18bca4521","children":[{"parent":"b9aebc55182c","children":[{"parent":"85c6d147100c","children":[{"parent":"4ff298023947","children":[],"id":"649b55cc323c","title":"java堆中不存在该类及其任何派生子类的实例"}],"id":"4ff298023947","title":"该类所有的实例已经被回收"},{"parent":"85c6d147100c","children":[],"id":"5e90a3aefe72","title":"加载该类的类加载器已经被回收"},{"parent":"85c6d147100c","children":[],"id":"3e76eb3c1288","title":"该类对应的java.lang.Class对象没有在任何地方被引用，无法在任何地方通过反射访问改类的方法"}],"id":"85c6d147100c","title":"需要同时满足三个条件"},{"parent":"b9aebc55182c","children":[],"id":"4a189c573f2e","title":"满足以上三个条件后，并不是和对象一样立即被回收，仅仅是允许。"},{"parent":"b9aebc55182c","children":[],"id":"80e7fb090900","title":"HotSpot虚拟机提供了-Xnoclassgc参数进行控制"}],"id":"b9aebc55182c","title":"不再使用的类型"},{"parent":"9cf18bca4521","children":[],"id":"a0a03f6d257b","title":"在大量使用反射，动态代理，CGLib等字节码框架，动态生成JSP以及OSGI这类频繁自定义类加载器的场景中，通常都需要Java虚拟机具备类型卸载的能力，以保证不会对方法区造成过大的内存压力"}],"id":"9cf18bca4521","title":"方法区的垃圾收集主要回收两部分内容"},{"parent":"7a96f2e00fe3","children":[{"parent":"ce80b09df0b2","children":[{"parent":"de153b20043d","children":[],"id":"92720f2e793a","title":"比较接近Java语言层次的常量概念，如文本字符串，被声明为final的常量值等"}],"id":"de153b20043d","title":"字面量"},{"parent":"ce80b09df0b2","children":[{"parent":"fc7f48f431d5","children":[{"parent":"7507b82e5307","children":[],"id":"9166ae3db2f7","title":"类和接口的全限定名"},{"parent":"7507b82e5307","children":[],"id":"9b3f0b59c480","title":"字段的方法和描述符"},{"parent":"7507b82e5307","children":[],"id":"9b48d32939f8","title":"方法的名称和描述符"}],"id":"7507b82e5307","title":"属于编译原理方面的概念"}],"id":"fc7f48f431d5","title":"符号引用"}],"id":"ce80b09df0b2","title":"方法区内常量池中主要存放的两大类常量："}],"id":"7a96f2e00fe3","title":"方法区的垃圾回收"}],"collapsed":true,"id":"535260158856","title":"方法区"},{"parent":"root","lineStyle":{"randomLineColor":"#FCB52A"},"children":[{"parent":"dedcf391f712","children":[{"parent":"85892e4604e6","children":[{"parent":"aa51c3a0d389","children":[{"parent":"e1a1dd06084b","children":[],"id":"00ebcd1c300f","title":"最常见的方式"},{"parent":"e1a1dd06084b","children":[],"id":"e8b8c60dae30","title":"变形：Xxx的静态方法"},{"parent":"e1a1dd06084b","children":[],"id":"6a0193fea0f6","title":"XxxBuilder/XxxFactory的静态方法"}],"id":"e1a1dd06084b","title":"new"},{"parent":"aa51c3a0d389","children":[{"parent":"ddea6c6637fb","children":[],"id":"88ade9da9b86","title":"JDK9标记过时，反射的方式，只能调用空参的构造器，权限必须是public"}],"id":"ddea6c6637fb","title":"Class的newInstance"},{"parent":"aa51c3a0d389","children":[{"parent":"73b9944311b9","children":[],"id":"b71cdfae326a","title":"反射的方式，可以调用空参，带参的构造器，权限没有要求。"}],"id":"73b9944311b9","title":"Constructor的newInstance"},{"parent":"aa51c3a0d389","children":[{"parent":"37df4c6333a8","children":[],"id":"30b3c09f174d","title":"不调用任何构造器，当前类需要实现Cloneable接口，实现clone方法"}],"id":"37df4c6333a8","title":"使用clone"},{"parent":"aa51c3a0d389","children":[{"parent":"e69dc9e179e8","children":[],"id":"f3a1413596da","title":"从文件、网络等获取一个对象的二进制流"}],"id":"e69dc9e179e8","title":"使用反序列化"},{"parent":"aa51c3a0d389","children":[],"id":"1590096f9134","title":"第三方库Objenesis"}],"id":"aa51c3a0d389","title":"创建对象的方式"},{"parent":"85892e4604e6","children":[{"parent":"76d4dd7f703e","children":[{"parent":"21242febdb01","children":[],"id":"7f154d193e75","title":"当虚拟机遇到一条字节码new指令时。首先去检查这个指令的参数是否能在常量池中定位到一个类的符号引用，并且检查这个符号引用代表的类是否被加载解析初始化过。如果没有，在双亲委派模式下，使用当前类加载器以ClassLoader+包名+类名为key值进行查找对应的.class文件，如果没有找到文件，则抛出ClassNotFoundException异常"}],"id":"21242febdb01","title":"1、判断对象对应的类是否加载、链接、初始化"},{"parent":"76d4dd7f703e","children":[{"parent":"c96d8248f96a","children":[],"id":"1c9dad3dd287","title":"首先计算对象占用空间的大小，接着在堆中划分一块内存给新对象，如果实例成员变量是引用变量，仅分配引用变量空间即可，即4个字节大小"},{"parent":"c96d8248f96a","children":[],"id":"a4e4897c337d","title":"如果Java堆内存中不规则，虚拟机就必须维护一个列表，记录哪些内存可用，哪些不可用。分配的时候在列表中找一个足够大的空间分配，然后更新列表。这种分配方式叫空闲列表(Free List)。"},{"parent":"c96d8248f96a","children":[{"parent":"c0f912aa73c9","children":[],"id":"fd895c2ae324","title":"当使用Serial，ParNew等带有压缩整理过程的收集器，指针碰撞简单高效；"},{"parent":"c0f912aa73c9","children":[],"id":"7b556aaa62d9","title":"当使用CMS基于清除（Sweep）算法收集器时，只能采用空闲列表来分配内存；（CMS为了能在多数情况下分配内存更快，设计了一个Linear Allocatioin Buffer的分配缓冲区，通过空闲列表拿到一大块分配缓冲区后，在它里面仍可使用指针碰撞方式分配）"}],"id":"c0f912aa73c9","title":"选择哪种由Java堆是否规整决定，Java堆是否规整由所采用的的垃圾收集器是否带有空间压缩整理（Compact）的能力决定"},{"parent":"c96d8248f96a","children":[],"id":"b86b61fbf511","title":"假设Java 堆中内存时绝对规整的，所有被使用过的内存放在一边，空闲的内存放在另一边，中间放一个指针作为分界点指示器。那么内存分配就是指针指向空闲的方向，挪动一段与对象大小相等的举例。这种分配方式成为指针碰撞（Bump The Pointer）。"}],"id":"c96d8248f96a","title":"2、为对象分配内存"},{"parent":"76d4dd7f703e","children":[{"parent":"617e047ee374","children":[],"id":"cc2400262dff","title":"对象创建是非常频繁的行为，还需要考虑并发情况下，仅仅修改一个指针所指向的位置也是不安全的，例如正在给对象A分配内存，指针还未修改，对象B又使用原来的指针分配内存。解决问题有两种可选方案："},{"parent":"617e047ee374","children":[],"id":"96549f1a421d","title":"a、对分配内存空间的动作进行同步处理。实际上虚拟机采取CAS配上失败重试的方式保证更新操作的原子性。"},{"parent":"617e047ee374","children":[],"id":"d43b27ad29c5","title":"b、把内存分配的动作按照线程划分到不同的空间中进行，每个线程在Java堆中，预先分配一小块内存，称为本地线程分配缓冲（Thread Local Allocation Buffer，TLAB），只有本地缓冲区用完了，分配新的缓存区时才需要同步锁定。"},{"parent":"617e047ee374","children":[],"id":"bbc48b406876","title":"虚拟机是否使用TLAB，可以通过-XX: +/-UseTLAB参数来设定。"}],"id":"617e047ee374","title":"3、处理并发安全问题"},{"parent":"76d4dd7f703e","children":[{"parent":"28fe205a126b","children":[],"id":"2ef5b2b2cb25","title":"内存分配完成后，虚拟机将分配到的内存空间（不包括对象头）都初始化为零值。如果使用了TLAB，这个工作可以提前到TLAB分配时进行。<br><br>这步操作保证对象的实例字段在Java代码中，可以不赋初始值就直接使用，程序可以访问到字段对应数据类型所对应的零值。"}],"id":"28fe205a126b","title":"4、初始化分配到的空间"},{"parent":"76d4dd7f703e","children":[{"parent":"ce46cc00bce7","children":[],"id":"963fd32ecd18","title":"接下来Java虚拟机还要对对象进行必要的设置，例如对象时哪个类的实例、如何才能找到类的元数据信息，对象的哈希码（实际上对象的HashCode会延后真正调用Object::hashCode()方法时才计算）、对象的GC分代年龄等信息。这些信息存放到对象的对象头（Object Header）<br>"}],"id":"ce46cc00bce7","title":"5、设置对象的对象头"},{"parent":"76d4dd7f703e","children":[{"parent":"5a79956b1ddb","children":[],"id":"2303327fe3a3","title":"上面工作完成后，从虚拟机角度来说，一个新的对象已经产生了，但是从Java程序的视角来说，对象创建才刚刚开始，对象的构造方法（Class文件中init()方法）还未执行，所有字段都是默认的零值。new指令之后接着执行init方法，按照程序员的意愿对对象进行初始化，这样一个真正可用的对象才算完全构造出来<br>"}],"id":"5a79956b1ddb","title":"6、执行init方法进行初始化"}],"id":"76d4dd7f703e","title":"创建对象的步骤"}],"id":"85892e4604e6","title":"对象的实例化"},{"parent":"dedcf391f712","children":[{"parent":"cd0fcc695376","children":[{"parent":"e8989624adbb","children":[{"parent":"35a97bcdc0a2","children":[{"parent":"3f74899ec20b","children":[],"id":"5b7b3548883c","title":"哈希值"},{"parent":"3f74899ec20b","children":[],"id":"80ee74e9d568","title":"GC分代年龄"},{"parent":"3f74899ec20b","children":[],"id":"692284656b3c","title":"锁状态标志"},{"parent":"3f74899ec20b","children":[],"id":"f52e9c4fdda3","title":"线程持有的锁"},{"parent":"3f74899ec20b","children":[],"id":"49048db2e60e","title":"偏向线程ID"},{"parent":"3f74899ec20b","children":[],"id":"154f4ae14c48","title":"偏向时间戳"},{"parent":"3f74899ec20b","children":[],"id":"9577da8d21bf","title":"对象头里的信息是与对象自身定义的数据无关的额外存储成本，考虑到虚拟机的空间效率，根据对象状态的不同，Markword可以复用自己的空间。"}],"id":"3f74899ec20b","title":"这部分数据的长度在32位和64位的虚拟机（未开启指针压缩中）分别是32bit和64bit，官方称为【Mark Word】运行时元数据"},{"parent":"35a97bcdc0a2","children":[{"parent":"2e5c5248b380","children":[],"id":"7bafe5b88398","title":"即对象指向它的类型元数据的指针，Java虚拟机通过这个指针来确认该对象属于哪个类的实例"}],"id":"2e5c5248b380","title":"类型指针"}],"id":"35a97bcdc0a2","title":"包含两部分"},{"parent":"e8989624adbb","children":[],"id":"a1229c740fa0","title":"说明：如果是数组，还需要记录数组的长度"}],"id":"e8989624adbb","title":"对象头"},{"parent":"cd0fcc695376","children":[{"parent":"42093225ad2d","children":[],"id":"a3d1af12f2f4","title":"对象的实例数据部分，是对象的真正存储的有效信息，即我们在程序代码中定义的各种类型的字段内容，无论是父类继承下来，还是子类中定义的字段都要鸡柳下来。"},{"parent":"42093225ad2d","children":[],"id":"549cd588529f","title":"1、这部分的存储顺序会受到虚拟机分配策略参数和字段在Java源码中定义顺序的影响。<br>2、分配策略参数-XX:FieldsAllocationStyle<br>3、HotSpot虚拟机默认的分配顺序为longs/doubles、ints、shorts/chars、bytes/booleans、oops（Ordinary Object Pointers）<br>4、从默认的分配策略中可以看出，相同宽度的字段总被分配到一起存放。<br>5、在满足这个前提条件的情况下，在父类中定义的变量会出现在子类之前。<br>6、如果HotSpot虚拟机的+XX：CompactFields参数值为true（默认也是true），那么子类中较窄的变量也允许插入父类变量的空隙之间，以节省一点点空间。<br><br>"}],"id":"42093225ad2d","title":"实例数据"},{"parent":"cd0fcc695376","children":[{"parent":"4fda4b500a68","children":[{"parent":"c5829574d4cf","children":[],"id":"8294bd6344f0","title":"因为HotSpot虚拟机自动内存管理系统，要对对象的起始地址必须是8字节的整数倍，换句话就是任何对象的大小都必须是8字节的整数倍。<br><br>对象头已经精心设计为8字节的整数倍，1倍或者2倍。<br><br>对象实例数据部分如果没有对齐的话，就需要通过对其填充来补全。<br>"}],"id":"c5829574d4cf","title":"对其填充，这并不是必然存在，没有特别的意义，它仅仅起着占位符的作用。"}],"id":"4fda4b500a68","title":"对齐填充"}],"id":"cd0fcc695376","title":"对象的内存布局"},{"parent":"dedcf391f712","children":[{"parent":"f2e00a75f401","children":[{"parent":"6b128fbcba56","children":[{"parent":"a7e5a5cbccd2","image":{"w":900,"h":416.48936170212767,"url":"http://cdn.processon.com/5ee4401707912929cb3f6cce?e=1592020519&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:mrH8AHORqA-TWKiYWWkGf6oVT9Q="},"children":[],"id":"4ce3183d4c65","title":"截图"}],"id":"a7e5a5cbccd2","title":"使用句柄，Java堆中将划出一块内存作为句柄池，reference中存储的就是对象的句柄地址，句柄包含对象实例数据与类型数据各自的具体信息。"}],"id":"6b128fbcba56","title":"【使用句柄】"},{"parent":"f2e00a75f401","children":[{"parent":"03ff3a3d1b0b","children":[{"image":{"w":900,"h":417.85714285714283,"url":"http://cdn.processon.com/5ee440387d9c084420150533?e=1592020552&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:xJXsMO-Ew2OOPHFOZSUYhA5jD7s="},"parent":"2fbe96a12c4f","children":[],"id":"b350095ad036","title":"截图"}],"id":"2fbe96a12c4f","title":"使用指针，reference中存储的直接就是对象地址，如果访问对象本身，不需要多一次的间接访问的开销。"}],"id":"03ff3a3d1b0b","title":"【直接指针】"},{"parent":"f2e00a75f401","children":[{"parent":"e79aff488102","children":[],"id":"9cfb04274245","title":"使用句柄最大好处是reference中存放的是稳定句柄地址，在对象被移动（垃圾搜集时会产生）时只改变句柄中实例数据指针，reference本身不用改变。"},{"parent":"e79aff488102","children":[],"id":"e142f4f5a4a1","title":"使用指针最大好处就是速度快，节省了一次指针定位的时间开销，由于对象访问在Java中非常频繁，所以积少成多也是一项可观的执行成本。"},{"parent":"e79aff488102","children":[],"id":"616f58d235fa","title":"HotSpot主要是用指针，进行对象访问（例外情况，如果使用Shenandoah收集器的话，也会有一次额外的转发）。"}],"id":"e79aff488102","title":"两种方式各有优势："}],"collapsed":true,"id":"f2e00a75f401","title":"对象的访问定位"}],"collapsed":true,"id":"dedcf391f712","title":"HotSpot虚拟机对象探秘"},{"parent":"root","lineStyle":{"randomLineColor":"#BE49C4"},"children":[{"parent":"224629d667fd","children":[],"id":"9f2a1a0d341c","title":"不是虚拟机运行时数据区的一部分，也不是Java虚拟机规范中定义的内存区域"},{"parent":"224629d667fd","children":[],"id":"4ef3ceecd4a1","title":"直接内存是在java堆外的，直接向系统申请的内存区间"},{"parent":"224629d667fd","children":[],"id":"cbf75eb9ac93","title":"来源于NIO，通过存在堆中的DirectByteBuffer操作Native内存"},{"parent":"224629d667fd","children":[{"parent":"ada25b056da3","children":[],"id":"bf3f02a1f28a","title":"因此出于性能考虑，读写频繁的场合可能会考虑使用直接内存"},{"parent":"ada25b056da3","children":[],"id":"f2c946c9b2ec","title":"Java的NIO库允许Java程序使用直接内存，用于数据缓冲区"}],"id":"ada25b056da3","title":"通常，访问直接内存的速度会优于Java堆，即读写性能高"},{"parent":"224629d667fd","children":[{"parent":"17af273164ba","children":[],"id":"378b4d32dc2a","title":"直接内存在堆外，所以大小不受限于-Xmx指定的最大堆大小"},{"parent":"17af273164ba","children":[],"id":"7c87e57a317c","title":"但是系统内存是有限的，Java堆和直接内存的总和依然受限于操作系统能给出的最大内存"}],"id":"17af273164ba","title":"也可能导致OOM异常"},{"parent":"224629d667fd","children":[{"parent":"124d6737358a","children":[],"id":"9f4138666757","title":"分配回收成本较高"},{"parent":"124d6737358a","children":[],"id":"9f676bacf5ec","title":"不受JVM内存回收管理"}],"id":"124d6737358a","title":"缺点"},{"parent":"224629d667fd","children":[],"id":"ec1b25feb18c","title":"直接内存大小可以通过MaxDirectMemorySize设置"},{"parent":"224629d667fd","children":[],"id":"caa3f332f50e","title":"如果不指定，默认与堆的最大值-Xmx参数值一致"}],"collapsed":true,"id":"224629d667fd","title":"直接内存"},{"parent":"root","lineStyle":{"randomLineColor":"#DD489D"},"children":[{"parent":"0bb3e9e05b3c","children":[{"parent":"d5629f360115","children":[],"id":"2ca1c330e1f6","title":"执行引擎是Java虚拟机核心的组成部分之一"},{"parent":"d5629f360115","children":[],"id":"7a034fa752e0","title":"虚拟机的执行引擎由软件自行实现，物理机的执行引擎是操作系统层面上"},{"parent":"d5629f360115","children":[],"id":"244ecbac9f08","title":"能够执行不被硬件直接支持的指令格式"},{"parent":"d5629f360115","children":[{"parent":"dd8be702a300","children":[],"id":"7c8870ca4c7d","title":"1、执行引擎在执行的过程中究竟需要执行什么样的字节码指令完全依赖于PC寄存器。"},{"parent":"dd8be702a300","children":[],"id":"f60e4d8103f2","title":"2、每当执行完一项指令操作后，PC寄存器就会更新下一条需要被执行的指令地址"},{"parent":"dd8be702a300","children":[],"id":"f23d8a374938","title":"3、当然方法在执行的过程中，执行引擎有可能会通过存储在局部变量表中的对象引用准确定位到存储在Java堆区中的对象实例信息，以及通过对象头中的元数据指针定位到目标对象的类型信息"}],"id":"dd8be702a300","title":"执行引擎的工作过程"}],"id":"d5629f360115","title":"执行引擎概述"},{"parent":"0bb3e9e05b3c","children":[{"parent":"39f03142bb7f","image":{"w":463,"h":239,"url":"http://cdn.processon.com/5ee5894c6376891e81c9b843?e=1592104796&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:dOaPhZkndmatMy_B168SCloGtXU="},"children":[],"id":"dea179272c9d","title":"大部分的程序代码转换成物理机的目标代码或虚拟机能执行的指令集之前，都需要经过上图中的各个步骤"},{"parent":"39f03142bb7f","children":[{"parent":"2652f36364df","children":[],"id":"12b9b729d427","title":"JVM在执行Java代码的时候，通常会将解释执行与编译执行二者结合起来进行"}],"id":"2652f36364df","title":"为什么说Java是半编译半解释型语言"}],"id":"39f03142bb7f","title":"Java代码编译和执行过程"},{"parent":"0bb3e9e05b3c","children":[{"parent":"43f1de8f222e","children":[{"parent":"3c3eacc7af82","children":[],"id":"a105e514b17b","title":"各种采用二进制编码方式表示的指令，叫做机器指令码。机器语言。机器指令与CPU紧密相关，不同种类的CPU所对应的机器指令也就不同"}],"id":"3c3eacc7af82","title":"机器码"},{"parent":"43f1de8f222e","children":[{"parent":"98b66979ef4f","children":[],"id":"17921d4a0c33","title":"由于机器码由01组成，可读性太差。于是人们发明了指令"},{"parent":"98b66979ef4f","children":[],"id":"13e24a658636","title":"指令就是把机器码特定的0和1序列，简化成对应的指令，一般为英文编写如mov，inc等，可读性稍好"},{"parent":"98b66979ef4f","children":[],"id":"b5d04b82633d","title":"由于不同的硬件平台，执行同一个操作，对应的机器码可能不同。所以不同的硬件平台的同一种指令，对应的机器码也可能不同"}],"id":"98b66979ef4f","title":"指令"},{"parent":"43f1de8f222e","children":[{"parent":"4f5ade71d8f4","children":[],"id":"c1b83a21625d","title":"不同硬件平台，各自支持的指令，是有差别的。因此每个平台所支持的指令，称之为对应平台的指令集"},{"parent":"4f5ade71d8f4","children":[],"id":"eab706a71fde","title":"x86指令集，对应的x86架构的平台"},{"parent":"4f5ade71d8f4","children":[],"id":"e1a4b19020de","title":"ARM指令集，对应的是ARM架构的平台"}],"id":"4f5ade71d8f4","title":"指令集"},{"parent":"43f1de8f222e","children":[{"parent":"0d01d7b77a2f","children":[],"id":"9354b4e914a5","title":"由于指令的可读性太差，于是又有了汇编语言"},{"parent":"0d01d7b77a2f","children":[],"id":"d61242562c16","title":"汇编语言用助记符代替机器指令的操作码，用地址符号或标号，代替指令或操作数的地址。"},{"parent":"0d01d7b77a2f","children":[],"id":"d1d7ade27aa5","title":"汇编语言要翻译成机器指令码，计算机才能识别和执行"}],"id":"0d01d7b77a2f","title":"汇编"}],"id":"43f1de8f222e","title":"机器码，指令，汇编语言"},{"parent":"0bb3e9e05b3c","children":[{"parent":"c2377bf44e5c","children":[],"id":"85aa028d13b4","title":"当Java虚拟机启动时，会根据预定义的规范对字节码采用逐行解释的方式执行，将每条字节码文件中的内容翻译为赌赢平台的本地机器指令执行"},{"parent":"c2377bf44e5c","children":[],"id":"5b71a8203d21","title":"解析器真正意义上所承担的角色就是一个运行时翻译者，将字节码文件中的内容翻译为对应的平台的本地机器指令执行"},{"parent":"c2377bf44e5c","children":[],"id":"abdafe516187","title":"当一条字节码指令被解释执行完成后，接着在根据PC寄存器中的记录下一条需要被执行的字节码执行解释执行"},{"parent":"c2377bf44e5c","children":[],"id":"3d7111f27f84","title":"古老的字节码解释器"},{"parent":"c2377bf44e5c","children":[{"parent":"27a36d721166","children":[],"id":"5936b0650524","title":"模板解释器将每一条字节码和一个模板函数相关联，模板函数直接产生这条字节码执行时的机器码，提高解释器的性能"}],"id":"27a36d721166","title":"现在普遍使用的模板解释器"},{"parent":"c2377bf44e5c","children":[{"parent":"84bcc1add8fc","children":[{"parent":"e4e1252f7dbc","children":[],"id":"3a8ed408ab93","title":"实现了解释器的核心功能"}],"id":"e4e1252f7dbc","title":"Interpreter模块"},{"parent":"84bcc1add8fc","children":[{"parent":"c5709be17557","children":[],"id":"1f7355242dc3","title":"用于管理HotSpot在运行时生成的本地机器指令"}],"id":"c5709be17557","title":"Code模块"}],"id":"84bcc1add8fc","title":"HotSpot中"}],"id":"c2377bf44e5c","title":"解释器"},{"parent":"0bb3e9e05b3c","children":[{"parent":"27943fd82d33","children":[],"id":"5b5a063893e6","title":"就是虚拟机将源代码直接编译成和本地机器平台相关的机器语言"},{"parent":"27943fd82d33","children":[],"id":"2553a5531c66","title":"JVM平台支持一种叫做即时编译的技术，目的是避免解释执行，而是将整个函数体编译成机器码，每次函数执行时，只执行编译后的机器码即可。使执行效率大幅提升"}],"id":"27943fd82d33","title":"JIT编译器"},{"parent":"0bb3e9e05b3c","children":[{"parent":"024bdf519013","children":[],"id":"7e6479661ca3","title":"首先程序启动后，解释器可以马上发挥作用，省去编译时间，立即执行"},{"parent":"024bdf519013","children":[],"id":"0df2098250ca","title":"编译器要想发挥作用，把代码编译成本地代码，需要一定的执行时间。但编译为本地代码后执行效率更高"},{"parent":"024bdf519013","children":[],"id":"b1a527ae8302","title":"对于服务端应用，启动时间并非关注重点，但是对于看重启动时间的应用场景，就需要找到一个平衡点。"},{"parent":"024bdf519013","children":[],"id":"89ef426624d7","title":"当Java虚拟机启动时，解释器可以首先发挥作用，而不是等待即时编译器全部编译完成后再执行，这样可以省去很多不必要的编译时间，随着时间的推移，编译器发挥作用，把越来越多的代码编译成本地代码，获得更高的执行效率"}],"id":"024bdf519013","title":"为什么两条腿走路？"},{"parent":"0bb3e9e05b3c","children":[{"parent":"04272027c22b","children":[{"parent":"10cd559e451c","children":[{"parent":"b6052beaff52","children":[],"id":"91af9134995d","title":"sun的Javac，"}],"id":"b6052beaff52","title":"把.java文件转换为.class文件的过程"}],"id":"10cd559e451c","title":"前端编译器"},{"parent":"04272027c22b","children":[{"parent":"3464c0c91fd3","children":[{"parent":"e9a6711afb89","children":[],"id":"a99892756ea2","title":"JIT编译器：hotSpot的C1,C2编译器"}],"id":"e9a6711afb89","title":"把字节码转为机器码的过程"}],"id":"3464c0c91fd3","title":"后端运行期编译器"},{"parent":"04272027c22b","children":[{"parent":"fd3d81781c06","children":[{"parent":"930046a9f212","children":[],"id":"8e57ba2b9752","title":"GNU Compiler for the Java（GCJ）"}],"id":"930046a9f212","title":"Ahead of Time Compliler AOT，直接把.java文件编译器本地机器代码的过程"}],"id":"fd3d81781c06","title":"静态提前编译器"}],"id":"04272027c22b","title":"概念解释"},{"parent":"0bb3e9e05b3c","children":[{"parent":"afccd290d1e7","children":[{"parent":"8682eed5c702","children":[],"id":"ef8973f1305c","title":"需要根据代码被调用执行的频率而定，需要被编译为本地代码的字节码，也称之为热点代码。"},{"parent":"8682eed5c702","children":[],"id":"a1eadf0cb8f3","title":"JIT编译器会在运行时针对频繁调用的热点代码做出深度优化，将其直接编译为对应平台的本地机器指令。以此提升Java程序的执行性能"},{"parent":"8682eed5c702","children":[],"id":"bc39a6b4ceea","title":"一个被多次调用的方法，后者一个方法体内部循环次数较多的循环体，都可以被称之为热点代码"},{"parent":"8682eed5c702","children":[],"id":"5d44be5825fa","title":"因此可以通过JIT编译器编译为本地机器指令，由于这种编译方法发生在方法的执行过程中，因此也被称之为栈上替换，OSR On Statck Replacement"},{"parent":"8682eed5c702","children":[{"parent":"2c7084e418b3","children":[{"parent":"c3a6114aa4d6","children":[{"parent":"033a13a58a0c","children":[{"parent":"3bc1ae4f2201","children":[],"id":"e2e4d975b3d8","title":"默认阈值，Client模式下是1500次，Server模式下是10000次"},{"parent":"3bc1ae4f2201","children":[],"id":"e9e7427a0b1d","title":"-XX:CompileThreshold"}],"id":"3bc1ae4f2201","title":"统计方法调用次数"}],"id":"033a13a58a0c","title":"方法调用计数器"},{"parent":"c3a6114aa4d6","children":[{"parent":"3e47b337cfa7","children":[{"image":{"w":548,"h":519,"url":"http://cdn.processon.com/5ee59836e0b34d4dba397012?e=1592108614&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:vIlyO5diCJ-ddKTPqBV7tHC7N9I="},"parent":"65b13679dcf7","children":[],"id":"28a6ebd1c2f4","title":"截图"}],"id":"65b13679dcf7","title":"统计循环体执行的循环次数"}],"id":"3e47b337cfa7","title":"回边计数器"},{"parent":"c3a6114aa4d6","children":[{"image":{"w":591,"h":477,"url":"http://cdn.processon.com/5ee5975707912929cb40d27c?e=1592108391&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:9EDCj6vMLfv9oQ7F04ltrU54GTE="},"parent":"6292fa34d26a","children":[],"id":"3efb0280b371","title":"截图"}],"id":"6292fa34d26a","title":"当一个方法被调用时，如果不存在已被编译过的版本，则将此方法的调用计数器+1，然后判断方法调用计数器与回边计数器之和，是否超过方法调用计数器的阈值。如果已经超过，会向即时编译器提交一个该方法的代码编译请求。"},{"parent":"c3a6114aa4d6","children":[{"parent":"5b152b34737c","children":[],"id":"ed801e96b2de","title":"当超过一定的时间限度，如果方法调用次数仍然不足以提交即时编译器编译，那么这个方法的调用计数器就会被减少一半。"},{"parent":"5b152b34737c","children":[],"id":"8166e5c376be","title":"-XX:UseCounterHalfLifeTime参数设置半衰周期的时间，单位是秒"}],"id":"5b152b34737c","title":"热度衰减"}],"id":"c3a6114aa4d6","title":"hotspot采用的基于计数器的热点探测"}],"id":"2c7084e418b3","title":"一个方法调用都少次才能达到标准？这个依靠热点探测功能"}],"collapsed":false,"id":"8682eed5c702","title":"热点代码及探测方式"}],"id":"afccd290d1e7","title":"什么时候选择JIT"},{"parent":"0bb3e9e05b3c","children":[{"parent":"df492d99e1c3","children":[],"id":"c52d3bcaebf1","title":"-Xint：完全采用解释器模式执行"},{"parent":"df492d99e1c3","children":[],"id":"1639d3acf7df","title":"-Xcomp完全采用即时编译器模式执行，如果即时编译器出现问题，解释器会介入执行"},{"parent":"df492d99e1c3","children":[],"id":"f99ca147544b","title":"-Xmixed采用解释器+即时编译器的混合模式共同执行"}],"id":"df492d99e1c3","title":"hotspot可以设置程序执行的方式"},{"parent":"0bb3e9e05b3c","children":[{"parent":"21dd8ddea235","children":[{"parent":"9c3f47f4dd0b","children":[],"id":"9d004d9358d4","title":"client&nbsp;"},{"parent":"9c3f47f4dd0b","children":[],"id":"c4c0d191911a","title":"server"},{"parent":"9c3f47f4dd0b","children":[],"id":"f30c44657bf9","title":"大多情况下简称C1,C2"},{"parent":"9c3f47f4dd0b","children":[{"parent":"6bebbc8bc9a1","children":[{"parent":"d839fcbe1796","children":[{"parent":"da712ccba633","children":[],"id":"5759603b9026","title":"将引用的函数代码编译到引用点处，减少栈帧的生成，减少参数传递以及跳转过程"}],"id":"da712ccba633","title":"方法内联"},{"parent":"d839fcbe1796","children":[{"parent":"cc6a82a70c91","children":[],"id":"98269cb6ecf9","title":"对唯一的实现类进行内联"}],"id":"cc6a82a70c91","title":"去虚拟化"},{"parent":"d839fcbe1796","children":[{"parent":"01297c147e44","children":[],"id":"b0c415bdcc5d","title":"在运行期把一些不会执行的代码折叠掉"}],"id":"01297c147e44","title":"冗余消除"}],"id":"d839fcbe1796","title":"C1编译器会对字节码进行简单和可靠的优化，耗时短，以达到更快的编译速度"}],"id":"6bebbc8bc9a1","title":"-client：指定Java虚拟机在Client模式下，并使用C1编译器"},{"parent":"9c3f47f4dd0b","children":[{"parent":"cefe6177b9fc","children":[{"parent":"f7a00d100092","children":[{"parent":"517580d2d3fd","children":[{"parent":"886eec6023d5","children":[],"id":"9bff27e76b05","title":"用标量值代替聚合对象的属性值"}],"id":"886eec6023d5","title":"标量替换"},{"parent":"517580d2d3fd","children":[{"parent":"38c9ca418d25","children":[],"id":"15e9f9094a23","title":"对于未逃逸的对象分配在栈而不是堆"}],"id":"38c9ca418d25","title":"栈上分配"},{"parent":"517580d2d3fd","children":[{"parent":"9a69c35b431d","children":[],"id":"57c7f6537eb9","title":"清除同步操作，通常指synchronized"}],"id":"9a69c35b431d","title":"同步消除"}],"id":"517580d2d3fd","title":"逃逸分析是优化的基础，基于逃逸分析在C2上有几种优化"}],"id":"f7a00d100092","title":"C2进行耗时较长的优化，以及激进优化，单优化后的代码执行效率更高"}],"id":"cefe6177b9fc","title":"-server：指定虚拟机在server模式下，并使用C2编译器"}],"id":"9c3f47f4dd0b","title":"内嵌两个JIT编译器"}],"id":"21dd8ddea235","title":"hotspot中JIT分类"},{"parent":"0bb3e9e05b3c","children":[{"parent":"b460ad0b378c","children":[],"id":"617000b7ecae","title":"jdk10起，hotspot又引入了个全新的即时编译器Graal编译器"},{"parent":"b460ad0b378c","children":[],"id":"a2019bdee002","title":"JDK9引入了AOT编译器"}],"id":"b460ad0b378c","title":"最后"}],"collapsed":true,"id":"0bb3e9e05b3c","title":"执行引擎"},{"parent":"root","lineStyle":{"randomLineColor":"#0D7C82"},"children":[{"parent":"21c9837d97fb","children":[{"parent":"22c9318311c5","children":[],"id":"7bfa0ae01841","title":"jdk7中将StringTable放到了堆空间中，因为永久代的回收效率很低。在fullGC的时候才触发，而fullGC是老年代空间不足，永久代不足时才触发"},{"parent":"22c9318311c5","children":[],"id":"e7ed7e9d602c","title":"这就导致了StringTable回收效率不高，而我们开发中会创建大量的字符串，回收效率低，导致永久代内存不足。放到堆里，能及时回收内存。"}],"id":"22c9318311c5","title":"StringTable为什么要调整"},{"parent":"21c9837d97fb","children":[{"parent":"6360a9b3b78e","children":[],"id":"84360df8cc80","title":"字符串，用\"\"引起来表示"},{"parent":"6360a9b3b78e","children":[],"id":"4630de91ca0d","title":"声明为final的不可被继承的"},{"parent":"6360a9b3b78e","children":[],"id":"d3bff4b2a9fe","title":"实现了Serializable接口，表示支持序列化"},{"parent":"6360a9b3b78e","children":[],"id":"d5bd3ec1d3b3","title":"实现了Comparable接口，表示可以比较大小"},{"parent":"6360a9b3b78e","children":[],"id":"f1ee8a7e74b9","title":"jdk8及以前，内部定义了final char[] value用于存储字符串数据"},{"parent":"6360a9b3b78e","children":[{"parent":"f75a588c47da","children":[{"parent":"b7fd536d0a82","children":[],"id":"1fd7d36d9b6c","title":"char数组一个char占16bits，String是堆空间的主要部分，大部分是latin-1字符，，一个字节就够了，这样会有一半空间浪费"},{"parent":"b7fd536d0a82","children":[],"id":"c8f1bc72e51b","title":"中文等UTF-16 的用两个字节存储。"},{"parent":"b7fd536d0a82","children":[],"id":"5b41d7ca4e43","title":"StringBuffer，StringBuilder同样做了修改"}],"id":"b7fd536d0a82","title":"动机"}],"id":"f75a588c47da","title":"JDK9时改为byte[]"},{"parent":"6360a9b3b78e","children":[{"parent":"4cb3a35f0850","children":[{"parent":"184e8e841865","children":[],"id":"b88acdb6af71","title":"当字符串重新赋值，需要重写指定内存区域赋值，不能使用原有的value进行赋值"},{"parent":"184e8e841865","children":[],"id":"2bd65fb5fb5c","title":"当对现有的字符串进行连接操作时，也需要重新指定内存区域赋值，不能对使用原有的value进行赋值"},{"parent":"184e8e841865","children":[],"id":"cc2ef1ec806a","title":"当调用String的replace方法修改指定字符或字符串时，也需要重新指定内存区域赋值，不能使用原有的value进行赋值。"}],"id":"184e8e841865","title":"简称不可变性"}],"id":"4cb3a35f0850","title":"String代表不可变的字符序列"},{"parent":"6360a9b3b78e","children":[],"id":"bcb807559cd7","title":"通过字面量的方式，区别与new给一个字符串赋值，此时的字符串值声明在字符串常量池中"},{"parent":"6360a9b3b78e","children":[{"parent":"9158fb01faca","children":[],"id":"176b76d3f4fc","title":"String的String pool是一个固定大小的HashTable，默认大小长度是1009，如果放进String Pool的String非常多，就会造成Hash冲突严重，从而导致链表会很长，而链表长了，直接影响就是调用String.intern时性能会大幅下降"},{"parent":"9158fb01faca","children":[],"id":"5dedb0281d5d","title":"-XX:StringTableSize可设置StringTable的大小"},{"parent":"9158fb01faca","children":[],"id":"f587cb92da16","title":"JDK6固定1009，jdk7中StringTable默认的长度是60013,JDK8时默认是60013，1009是可设置的最小值"}],"id":"9158fb01faca","title":"字符串常量池中不会存储相同的字符串的"},{"parent":"6360a9b3b78e","children":[],"id":"d453a22d44c2","title":""}],"id":"6360a9b3b78e","title":"String的基本特性"},{"parent":"21c9837d97fb","children":[{"parent":"2dde57ed45c8","children":[{"parent":"9ed8b13a65e6","children":[{"parent":"e27956165c12","children":[],"id":"938951a03ce1","title":"直接使用双引号，声明出来的String对象会直接存储在常量池中"},{"parent":"e27956165c12","children":[],"id":"c3e6f2bf69c3","title":"如果不是双引号声明的String对象，可以使用String提供的intern()方法"}],"id":"e27956165c12","title":"String的常量池比较特殊，主要使用方法有两种"}],"id":"9ed8b13a65e6","title":"Java语言中有8种基本数据类型和一种比较特殊的类型String,这些类型为了使他们再运行过程中速度更快，更节省内存，都提供了一种常量池的概念"},{"parent":"2dde57ed45c8","children":[],"id":"6630d0864f11","title":"jdk6及之前，字符串常量池存在永久代"},{"parent":"2dde57ed45c8","children":[{"parent":"17fcb5a07229","children":[],"id":"2d417295dcbd","title":"调优时仅需调整堆大小就可以"}],"id":"17fcb5a07229","title":"jdk7中，字符串常量池调整到Java堆中"},{"parent":"2dde57ed45c8","children":[],"id":"50680961771e","title":"Jdk8中，元空间，字符串常量在堆"},{"parent":"2dde57ed45c8","children":[{"parent":"8a0aa15e2448","children":[],"id":"23b037011e9d","title":"永久代默认情况下比较小，大量字符串容易导致OOM。"},{"parent":"8a0aa15e2448","children":[],"id":"ee984651c415","title":"永久代垃圾回收频率低，"}],"id":"8a0aa15e2448","title":"为什么要调整？"}],"id":"2dde57ed45c8","title":"String的内存分配"},{"parent":"21c9837d97fb","children":[{"parent":"b2cf9b36a46d","children":[],"id":"7c0b127d3f12","title":"Java语言规范要求完全相同的字符串字面量，应该包含同样的Unicode字符序列，包含同一份码点序列的常量，并且必须指向同一个String类实例"}],"id":"b2cf9b36a46d","title":"String的基本操作"},{"parent":"21c9837d97fb","children":[{"parent":"1b5af0446522","children":[{"parent":"6451cb94c4ec","image":{"w":680,"h":264,"url":"http://cdn.processon.com/5ee6c4a2f346fb1ae5620bc1?e=1592185523&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:8eB145Dj6z_CpF9rJREsYU-ZrvE="},"children":[],"id":"430b863d655b","title":"截图"}],"id":"6451cb94c4ec","title":"常量与常量的拼接结果在常量池，原理是编译期优化"},{"parent":"1b5af0446522","children":[],"id":"240cae8001a0","title":"常量池中不存在相同内容的常量"},{"parent":"1b5af0446522","children":[{"parent":"ecfe86bda1cb","image":{"w":459,"h":380,"url":"http://cdn.processon.com/5ee6c512f346fb1ae5620c2b?e=1592185634&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:bUHScNxfrFEVtESidddIg19asQQ="},"children":[],"id":"f4f04c052ad1","title":"截图"},{"parent":"ecfe86bda1cb","image":{"w":463,"h":367,"url":"http://cdn.processon.com/5ee6ca86e0b34d4dba3ac87c?e=1592187031&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:ogQTvyGE2bSKqjYpczH598J4IQM="},"children":[],"id":"84433ad12873","title":"截图"}],"id":"ecfe86bda1cb","title":"只要其中有一个变量，拼接结果就在堆中（常量池以外的堆），变量的拼接原理是StringBuilder"},{"parent":"1b5af0446522","children":[],"id":"cf6d5e22fc65","title":"如果拼接的结果调用intern方法，则主动将常量池中还没有的字符串对象放入池中，并返回此对象地址"},{"parent":"1b5af0446522","children":[],"id":"7088fa7a93eb","title":"字符串拼接操作不一定使用的是StringBuilder如果拼接符号左右两边都是字符串常量或常量引用，则仍然使用编译期优化，即非StringBuilder的方式"},{"parent":"1b5af0446522","children":[{"parent":"b0d884c75de6","image":{"w":411,"h":204,"url":"http://cdn.processon.com/5ee6cc5e1e08532637281eef?e=1592187503&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:FXsVaX1hyWvUolI5wX9TBHGqHmQ="},"children":[],"id":"92f203f13ce1","title":"截图"}],"id":"b0d884c75de6","title":"针对final修饰类，方法，基本数据类型，引用数据类型变量的结构时，能使用final尽量使用上"},{"parent":"1b5af0446522","children":[{"parent":"12baa8a6f849","children":[],"id":"0b0355fda1ce","title":"拼接10万次，+号4000，append用了7毫秒，原因是+号每次循环创建一个StringBuilder，还要通过toString创建一个String对象"},{"parent":"12baa8a6f849","children":[],"id":"0333ebbf8b0e","title":"内存中由于创建了较多的对象，内存占用更大，如果需要GC需要花费额外的时间"},{"parent":"12baa8a6f849","children":[],"id":"59df7a0da57c","title":"改进空间：StringBuilder默认是16长度的char型数组，不够的时候会扩容，可以一次建一个比较大长度的数组。"}],"id":"12baa8a6f849","title":"对比用+号拼接字符串和StringBuilder.append操作对比"}],"id":"1b5af0446522","title":"字符串拼接操作"},{"parent":"21c9837d97fb","children":[{"parent":"7ff4a171ec4c","children":[],"id":"6ba71b7ade64","title":"如果字符串常量池中，通过equals判断是否相同，如果没有则在常量池中生成"},{"parent":"7ff4a171ec4c","children":[],"id":"49b1f5d1b416","title":"确保字符串在内存里只有一份拷贝，这样可以节约内存空间，加快字符串操作任务的执行速度，注意，这个值会被存放在字符串内部池。（String intern pool）"},{"parent":"7ff4a171ec4c","children":[{"image":{"w":620,"h":273,"url":"http://cdn.processon.com/5ee80beff346fb1ae564b303?e=1592269311&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:nqHzdCcusksw196l-ovPsKtZOlY="},"parent":"077f94e058bb","children":[{"parent":"dbdb9d331d01","children":[{"parent":"2baf9379d7f5","children":[],"id":"508576a15596","title":"false false"},{"parent":"2baf9379d7f5","children":[],"id":"047131d27b44","title":"调用s.intern方法之前，字符串常量池已经有1"}],"id":"2baf9379d7f5","title":"jdk6执行结果"},{"parent":"dbdb9d331d01","children":[{"parent":"dae44170bf5d","children":[{"parent":"6e71c4ace890","children":[],"id":"a16451542c42","title":"s3的变量地址为：new String （“11”）。执行完字符串常量池中不存在11，s3.intern会在字符串常量池生成11，s4变量记录的地址是常量池中的。"},{"image":{"w":900,"h":379.30795847750863,"url":"http://cdn.processon.com/5ee810191e085326372abba4?e=1592270378&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:3NZvFvAqK-RLtGIh3I_N_d63uVk="},"parent":"6e71c4ace890","children":[],"id":"17be54c62d07","title":"JDK7:此时常量池中并没有创建11，而是创建一个指向堆空间的中newString（“11”）的地址"}],"id":"6e71c4ace890","title":"false true"}],"id":"dae44170bf5d","title":"jdk7/8"}],"id":"dbdb9d331d01","title":"截图"},{"parent":"077f94e058bb","children":[{"image":{"w":900,"h":298.3657587548638,"url":"http://cdn.processon.com/5ee811071e085326372abc2b?e=1592270615&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:FGogspg4YhBV_MMI08BtdGKIJVo="},"parent":"32505fdebcf3","children":[],"id":"70377883d21d","title":"截图"}],"id":"32505fdebcf3","title":"变形"},{"parent":"077f94e058bb","children":[{"parent":"38f09daa26e4","children":[],"id":"551502907e81","title":"2个对象，查看字节码验证。一个是常量池ab，一个是new出来在堆空间。（前提是常量池没有ab）"}],"id":"38f09daa26e4","title":"newString(\"ab\")会创建几个对象？"},{"parent":"077f94e058bb","children":[{"parent":"649272299b58","children":[],"id":"452f9fbf5a38","title":"对象1，有拼接操作就newStringBuilder"},{"parent":"649272299b58","children":[],"id":"a92d3af75d3d","title":"对象2，new一个String"},{"parent":"649272299b58","children":[],"id":"aefcd9cdc6a0","title":"对象3，常量池a"},{"parent":"649272299b58","children":[],"id":"5e4b6e5e30db","title":"对象4，new String"},{"parent":"649272299b58","children":[],"id":"4f5c3cfe17e5","title":"对象5，常量池b"},{"parent":"649272299b58","children":[{"parent":"e51e36ae699c","children":[],"id":"3a1f229f0780","title":"此时字符串常量池中没有ab"}],"id":"e51e36ae699c","title":"对象6，StringBuilder，toString方法会new String返回"}],"id":"649272299b58","title":"new String(\"a\")+new String(\"b\")?"}],"id":"077f94e058bb","title":"面试题"},{"parent":"7ff4a171ec4c","children":[{"parent":"9755524154dd","children":[{"parent":"5bc3eaef6de8","children":[],"id":"53ae990a7a68","title":"如果串池中有，则并不会放入，返回已有串池中的对象的地址，"},{"parent":"5bc3eaef6de8","children":[],"id":"8b806859126c","title":"如果没有，会把对象复制一份，放入串池，并返回串池中的对象地址"}],"id":"5bc3eaef6de8","title":"jdk1.6中，将这个字符串对象放入串池"},{"parent":"9755524154dd","children":[{"parent":"a1549fe81325","children":[],"id":"6fcbd718bd9b","title":"如果串池中有，则并不会放入，返回已有的串池中的对象的地址"},{"parent":"a1549fe81325","children":[],"id":"969d7e24179e","title":"如果没有，则会把对象的引用地址复制一份，放入串池，并返回串池中的引用地址"}],"id":"a1549fe81325","title":"jdk1.7起，将这个字符串对象尝试放入串池"}],"id":"9755524154dd","title":"总结"},{"parent":"7ff4a171ec4c","children":[{"parent":"e3740a46a617","image":{"w":900,"h":304.1334300217549,"url":"http://cdn.processon.com/5ee8149507912929cb44d56c?e=1592271526&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:02FCaOXgYKXJYKBklnHwOoTvp-4="},"children":[],"id":"acc0b9211c2b","title":"截图"}],"id":"e3740a46a617","title":"练习"},{"parent":"7ff4a171ec4c","children":[{"parent":"7dec7f063f40","children":[],"style":{"border-radius":"6px","background-color":"rgb(255, 83, 92)","color":"rgb(255, 255, 255)","border-color":"rgb(255, 255, 255)","border-width":"0px","border-style":"none"},"id":"ed6691402696","title":"大的网站平台，需要内存中存储大量的字符串，比如社交网站，很多人存储：北京市，海淀区等信息，这时候如果字符串调用intern方法，则会明显降低内存的大小"}],"style":{"border-radius":"6px","background-color":"rgb(255, 83, 92)","color":"rgb(255, 255, 255)","border-color":"rgb(255, 255, 255)","border-width":"0px","border-style":"none"},"id":"7dec7f063f40","title":"intern（）的效率测试"}],"id":"7ff4a171ec4c","title":"intern()方法"},{"parent":"21c9837d97fb","children":[{"parent":"a216a332a215","children":[],"id":"f9611c6e3dcf","title":"-XX:+PrintStringTableStatistics"}],"id":"a216a332a215","title":"Stringtable的垃圾回收"},{"parent":"21c9837d97fb","children":[{"parent":"9cab9cc97def","children":[{"parent":"e59fcf06a586","children":[],"id":"2bae77c504a1","title":"堆存货数据集合里面String对象占了25%"},{"parent":"e59fcf06a586","children":[],"id":"e799844f2c15","title":"堆存活数据集合里面重复的String对象有13.5%"},{"parent":"e59fcf06a586","children":[],"id":"d0f927231085","title":"String对象的平均长度是45"}],"id":"e59fcf06a586","title":"背景：对许多Java应用，做的测试结果如下"},{"parent":"9cab9cc97def","children":[],"id":"0b1f91fd1a8d","title":"许多大规模的Java应用的瓶颈在于内存。Java堆中存活的数据集合差不多25%是String对象，这里差不多一半的String对象是重复的， 重复是指equals方法=true,堆上重复的String对象必然是一种内存的浪费。G1垃圾收集器中实现自动持续对重复的String对象进行去重，这样避免浪费。"}],"id":"9cab9cc97def","title":"G1中String去重操作"}],"collapsed":true,"id":"21c9837d97fb","title":"StringTable"},{"parent":"root","lineStyle":{"randomLineColor":"#FCB52A"},"children":[{"parent":"a4364411911e","children":[{"parent":"ac090d7d56d9","children":[],"id":"6d1f8ea5a82a","title":"垃圾是指运行程序中没有任何指针指向的对象，这个对象就是需要被回收的垃圾"}],"id":"ac090d7d56d9","title":"什么是垃圾"}],"collapsed":true,"id":"a4364411911e","title":"垃圾回收概述"},{"parent":"root","lineStyle":{"randomLineColor":"#F88A35"},"children":[{"parent":"10ecf9961e60","children":[{"parent":"c1d55c4db6d3","children":[],"id":"a3678a8fe889","title":"对每个对象保存一个整型的引用计数器属性，用于记录被对象引用的情况"},{"parent":"c1d55c4db6d3","children":[],"id":"fd872a11e581","title":"被对象引用了就+1，引用失效就-1,0表示不可能再被使用，可进行回收"},{"parent":"c1d55c4db6d3","children":[],"id":"31644231b80c","title":"优点：实现简单，垃圾便于辨识，判断效率高，回收没有延迟性"},{"parent":"c1d55c4db6d3","children":[{"parent":"055d140ac2f1","children":[],"id":"71d28b3021c9","title":"需要单独的字段存储计数器，增加了存储空间的开销"},{"parent":"055d140ac2f1","children":[],"id":"7d5909d68a53","title":"每次赋值需要更新计数器，伴随加减法操作，增加了时间开销"},{"parent":"055d140ac2f1","children":[],"id":"06c869990d4a","title":"无法处理循环引用的情况，致命缺陷，导致JAVA的垃圾回收器中没有使用这类算法"}],"id":"055d140ac2f1","title":"缺点"},{"parent":"c1d55c4db6d3","children":[{"parent":"a4042a52baf8","children":[{"parent":"e82bf4a1ab81","children":[{"parent":"1cc0423b9d1a","children":[],"id":"46c4e8733167","title":"手动解除"},{"parent":"1cc0423b9d1a","children":[],"id":"ea60bea26c0d","title":"使用弱引用，weakref，python提供的标准库，旨在解决循环引用"}],"id":"1cc0423b9d1a","title":"Python如何解决循环引用"}],"id":"e82bf4a1ab81","title":"引用计数算法，是很多语言的资源回收选择，例如python，它更是同时支持引用计数和垃圾回收机制"}],"id":"a4042a52baf8","title":"小结"}],"id":"c1d55c4db6d3","title":"标记阶段：引用计数算法"},{"parent":"10ecf9961e60","children":[{"parent":"70040eda5f0c","children":[],"id":"9ff5e3258343","title":"java c#选择的"},{"parent":"70040eda5f0c","children":[{"parent":"81b18376c844","children":[],"id":"9a43e213aef2","title":"是以根对象（GCRoots）为起始点，按照从上到下的方式搜索被根对象集合所连接的目标对象是否可达"},{"parent":"81b18376c844","children":[],"id":"932733d57a47","title":"使用可达性分析算法后，内存中存活的对象都被被根对象集合直接或间接连接着，搜索所走过的路径称为引用链"},{"parent":"81b18376c844","children":[],"id":"a7934aeffffd","title":"如果目标对象没有任何引用链相连，则是不可达的，意味着该对象已经死亡，可以标记为垃圾对象"},{"parent":"81b18376c844","children":[],"id":"41d835d9ecfd","title":"在可达性分析算法中，只有能够被根对象集合直接或者间接连接的对象才是存活的对象"}],"id":"81b18376c844","title":"基本思路"},{"parent":"70040eda5f0c","children":[{"parent":"0146c8f1d49e","children":[{"parent":"30fbc58b3024","children":[],"id":"7526ecf89647","title":"比如各个线程被调用的方法中使用到的参数、局部变量"}],"id":"30fbc58b3024","title":"虚拟机栈中引用的对象"},{"parent":"0146c8f1d49e","children":[],"id":"5cc58df7b633","title":"本地方法栈内JNI,引用的对象"},{"parent":"0146c8f1d49e","children":[{"parent":"410ae2b79abb","children":[],"id":"5d11c38b3e93","title":"比如：java类的引用类型静态变量"}],"id":"410ae2b79abb","title":"方法区中静态属性引用的对象"},{"parent":"0146c8f1d49e","children":[{"parent":"9259d77eda78","children":[],"id":"cf1e7107557c","title":"比如字符串常量池里的引用"}],"id":"9259d77eda78","title":"方法区中常量引用的对象"},{"parent":"0146c8f1d49e","children":[],"id":"350b16e9bfa5","title":"所有被同步锁synchronized持有的对象"},{"parent":"0146c8f1d49e","children":[{"parent":"41edaa006d18","children":[],"id":"2c2db761ddd6","title":"基本数据类型对应的class对象，一些常驻的异常对象，如nullpointerException，OOMerror，系统类加载器"}],"id":"41edaa006d18","title":"Java虚拟机内部的引用"},{"parent":"0146c8f1d49e","children":[],"id":"c62c21b3a31c","title":"反映java虚拟机内部情况的JMXBean,JVMTI中注册的回调，本地代码缓存等"},{"parent":"0146c8f1d49e","children":[{"parent":"3857a5bec585","children":[],"id":"6ae3b0acb12e","title":"如果只针对Java堆中某一块内存区域进行垃圾回收，必须要考虑这个区域的对象可能被其他区域对象所引用，这是需要一并将关联的区域对象加入GC Roots集合中去考虑，才能保证可达性分析的准确性。"}],"id":"3857a5bec585","title":"除了固定的GC Roots集合之外，根据用户选择的垃圾收集器以及当前回收的内存区域不同，还可以有其他对象临时性的加入，共同构成完整GCRoots集合，比如分代收集和局部回收"},{"parent":"0146c8f1d49e","children":[{"parent":"20b6bc02076b","children":[],"id":"54174471da10","title":"由于Root采用栈方式存放变量和指针，所以如果一个指针，它保存了堆内存里面的对象，但是自己又不存放在堆内存里面，那么它就是一个Root"}],"id":"20b6bc02076b","title":"小技巧"},{"parent":"0146c8f1d49e","children":[],"id":"d78e5eb8426c","title":"如果需要使用可达性分析算法来判断内存是否可回收，那么分析工作必须在一个能保障一致性的快照中进行。这点不满足的话，分析结果的准确性就无法保证。"},{"parent":"0146c8f1d49e","children":[],"id":"32f35007fc35","title":"这也是GC进行时必须STW的一个重要原因，即使是号称几乎不会发生停顿的CMS收集器中，枚举根节点也是必须要停顿的。"}],"id":"0146c8f1d49e","title":"GC Roots包括"}],"id":"70040eda5f0c","title":"标记阶段：可达性分析算法"},{"parent":"10ecf9961e60","children":[{"parent":"0dcf5fa205ff","children":[],"id":"0598dfb95e9c","title":"Java语言提供了对象终止finaliztion机制来允许开发人员提供对象被销毁之前的自定义处理逻辑"},{"parent":"0dcf5fa205ff","children":[],"id":"7423c67ea5a2","title":"当垃圾回收器发现没有引用指向一个对象，即垃圾回收此对象之前，总会先调用这个对象的finalize（）方法"},{"parent":"0dcf5fa205ff","children":[],"id":"94f863e1c4e4","title":"finalize（）方法允许在子类中被重写，用于在对象被回收时进行资源释放，通常在这个方法中进行一些资源释放和清理的工作，比如关闭文件，套接字和数据库链接等"},{"parent":"0dcf5fa205ff","children":[{"parent":"35432d828300","children":[{"parent":"b5d5efbbc9e1","children":[],"id":"e369ab3f165c","title":"从根节点开始，可以到达这个对象"}],"id":"b5d5efbbc9e1","title":"可触及的"},{"parent":"35432d828300","children":[{"parent":"06813e011c87","children":[],"id":"433589fa5a04","title":"对象的所有引用都被释放了，但是对象有可能在finalize（）中复活"}],"id":"06813e011c87","title":"可复活的"},{"parent":"35432d828300","children":[{"parent":"a7185e1af675","children":[],"id":"02cfddc95041","title":"对象的finalize（）被调用，并且没有复活，那么就会进入不可触及状态。不可触及的对象不可能被复活，因为finalize（）只会被调用一次"}],"id":"a7185e1af675","title":"不可触及的"},{"parent":"35432d828300","children":[],"id":"9e338d250553","title":"只有对象再不可触及时才可以被回收"}],"id":"35432d828300","title":"定义虚拟机的对象可能的三种状态"},{"parent":"0dcf5fa205ff","children":[{"parent":"e5c78aa46793","children":[{"parent":"b880019f54cc","children":[],"id":"914966d8046e","title":"1、如果对象到GCRoots没有引用链，则进行第一次标记"},{"parent":"b880019f54cc","children":[{"parent":"43ba66a9ec25","children":[],"id":"d5cfb9ea10fb","title":"如果对象A没有重写finalize方法，或者finalize方法已经被虚拟机调用过，则虚拟机视为没有必要执行，对象A被判定为不可触及的"},{"parent":"43ba66a9ec25","children":[],"id":"4f43a947761c","title":"如果对象A重写finalize（）方法，且还未执行过，那么A会被插入到F-queue队列中，有一个虚拟机自动创建的，低优先级的Finalizer线程触发其finalize（）方法执行"},{"parent":"43ba66a9ec25","children":[],"id":"f679630cb9a6","title":"finalize方法是对象逃脱死亡的最后机会，稍后GC会对F-queue队列中的对象进行第二次标记，如果A在finalize方法中与引用链上的任何一个对象建立了联系，那么在第二次标记时，A会被移除即将回收集合。之后，对象会再次出现没有引用存在的情况下，finalize方法不会再被调用，对象直接变为不可触及状态"}],"id":"43ba66a9ec25","title":"2、进行筛选，判断此对象是否有必要执行finalize（）方法"}],"id":"b880019f54cc","title":"判断一个对象ObjA是否可以被回收，至少需要经历两次标记过程"}],"id":"e5c78aa46793","title":"具体过程"}],"id":"0dcf5fa205ff","title":"对象的finalization机制"},{"parent":"10ecf9961e60","children":[{"parent":"6dc36da843d4","children":[],"id":"493244f617a8","title":"MAT是Memory Analyzer的简称，是一款功能强大的Java堆内存分析器。用于查找内存泄露以及查看内存消耗情况，基于Eclipse开发的一款免费性能分析工具"}],"id":"6dc36da843d4","title":"MAT与JProfiler的GC Roots溯源"},{"parent":"10ecf9961e60","children":[{"parent":"62c1f8117027","children":[{"parent":"b76b00e2328d","children":[{"parent":"675af7198d7c","children":[],"id":"a36c52e1f119","title":"注意标记引用对象，不是垃圾对象"}],"id":"675af7198d7c","title":"从引用根节点开始遍历，标记所有被引用的对象，一般是在对象Header中记录为可达对象"}],"id":"b76b00e2328d","title":"标记"},{"parent":"62c1f8117027","children":[{"parent":"4d3ae5fb2fa1","children":[],"id":"5c2593b6fe64","title":"对堆内存从头到尾进行线性的遍历，如果发现某个对象在其Header中没有标记为可达对象，则将其回收"}],"id":"4d3ae5fb2fa1","title":"清除"},{"parent":"62c1f8117027","children":[{"parent":"b8c587b86a2b","children":[],"id":"43fdb3a019ae","title":"效率不算高"},{"parent":"b8c587b86a2b","children":[],"id":"0f9554303466","title":"在GC的时候，，需要停止整个应用程序，导致用户体验差。"},{"parent":"b8c587b86a2b","children":[],"id":"4c73489013ad","title":"这种方式清理出来的空闲内存不连续，产生内存碎片，需要维护一个空闲列表"}],"id":"b8c587b86a2b","title":"缺点"},{"parent":"62c1f8117027","children":[{"parent":"ec63cb6887fa","children":[],"id":"5630fc662e27","title":"所谓的清除并不是真的置空，而是把需要清除的对象地址保存在空闲的地址列表里，下次有新对象需要加载时，判断垃圾的位置空间是否够，如果够就存放。"}],"id":"ec63cb6887fa","title":"何为清除？"}],"id":"62c1f8117027","title":"清除阶段：标记-清除算法"},{"parent":"10ecf9961e60","children":[{"parent":"5a26ea2fba97","children":[],"id":"52fb957cf93e","title":"将或者的内存空间分为两块，每次使用其中一块。在垃圾回收时，将正在使用的内存中的存活的对象复制到未被使用的内存块中，之后清除正在使用的内存块中的所有的对象，交换两个内存的角色，最后完成垃圾回收"},{"parent":"5a26ea2fba97","children":[{"parent":"45f6028fe876","children":[],"id":"32986d9251a5","title":"没有标记和清除的过程，实现简单高效"},{"parent":"45f6028fe876","children":[],"id":"b95a814ff083","title":"复制过去以后的保证空间的连续性，不会出现碎片的问题"}],"id":"45f6028fe876","title":"优点"},{"parent":"5a26ea2fba97","children":[{"parent":"36982ede2423","children":[],"id":"193ed274e8d7","title":"需要两倍的内存空间"},{"parent":"36982ede2423","children":[],"id":"5bf993dd3d2f","title":"对于G1这种拆分为大量region的GC，复制而不是移动，意味着GC需要维护region之间的引用关系，不管是内存占用或者时间开销也不小。"},{"parent":"36982ede2423","children":[],"id":"e4bcdde05682","title":"如果系统中的垃圾对象很多，需要复制的存活对象数量并不会太大，或者非常低才行"}],"id":"36982ede2423","title":"缺点"}],"id":"5a26ea2fba97","title":"清除阶段：复制算法"},{"parent":"10ecf9961e60","children":[{"parent":"6bcbb87f223b","children":[],"id":"8e0a817b94c2","title":"也叫标记整理算法"},{"parent":"6bcbb87f223b","children":[],"id":"11b0fc47cfe8","title":"第一个阶段和标记清除算法一样，从根节点开始标记所有被引用的对象"},{"parent":"6bcbb87f223b","children":[],"id":"561dde5ba76a","title":"第二阶段将所有的存货对象压缩在内存的一端，按照顺序排放"},{"parent":"6bcbb87f223b","children":[],"id":"f878f96e28cb","title":"之后清理边界外所有的空间"},{"parent":"6bcbb87f223b","children":[],"id":"604a33f7149d","title":"最终效果等同于标记清除算法执行完成后，再进行一次内存碎片整理。"},{"parent":"6bcbb87f223b","children":[],"id":"e350a5833285","title":"与标记清除算法本质区别，标记清除算法是非移动式的算法，标记压缩是移动式的"},{"parent":"6bcbb87f223b","children":[],"id":"9ed505cab24d","title":"是否移动回收后的存活对象时一项优缺点并存的风险决策"},{"parent":"6bcbb87f223b","children":[{"parent":"803d75e853af","children":[],"id":"ee5e46716cf5","title":"消除了标记清除算法内存区域分散的缺点，"},{"parent":"803d75e853af","children":[],"id":"94c337fd75d5","title":"消除了复制算法中，内存减半代价"}],"id":"803d75e853af","title":"优点"},{"parent":"6bcbb87f223b","children":[{"parent":"777d6c418661","children":[],"id":"3110ccb55820","title":"从效率上来讲，标记整理算法要低于复制算法"},{"parent":"777d6c418661","children":[],"id":"a40735e3d32e","title":"移动对象的同时，如果对象被其他对象引用，则还需要调整引用的地址"},{"parent":"777d6c418661","children":[],"id":"ab456335d3c4","title":"移动的过程中，需要全程暂停用户应用程序，即STW"}],"id":"777d6c418661","title":"缺点"}],"id":"6bcbb87f223b","title":"清除阶段：标记-压缩算法"},{"parent":"10ecf9961e60","children":[{"image":{"w":900,"h":105.62347188264059,"url":"http://cdn.processon.com/5ee8b266f346fb1ae5672bcb?e=1592311927&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:BG2SHrgmq4JIARkoCh9WUb1kjhM="},"parent":"c010358a83ff","children":[],"id":"e4d536d32a65","title":"截图"}],"id":"c010358a83ff","title":"小结"},{"parent":"10ecf9961e60","children":[{"parent":"34e39e8ff9cf","children":[],"id":"b3f3e23a1543","title":"不同生命周期的对象可以采取不同额收集方式，以便提高回收效率"},{"parent":"34e39e8ff9cf","children":[],"id":"41682f307405","title":"几乎所有的GC都采用分代收集算法执行垃圾回收的"},{"parent":"34e39e8ff9cf","children":[{"parent":"fb13b7fb23d2","children":[{"parent":"7b7311fe88a7","children":[],"id":"47eb8714220f","title":"生命周期短，存活率低，回收频繁"}],"id":"7b7311fe88a7","title":"年轻代"},{"parent":"fb13b7fb23d2","children":[{"parent":"ab68279ec2dd","children":[],"id":"40cc50a54ecd","title":"区域较大，生命周期长，存活率高，回收不及年轻代频繁"}],"id":"ab68279ec2dd","title":"老年代"}],"id":"fb13b7fb23d2","title":"HotSpot中"}],"id":"34e39e8ff9cf","title":"分代收集算法"},{"parent":"10ecf9961e60","children":[{"parent":"1b0d2ba47484","children":[{"parent":"bb484b1f8c33","children":[],"id":"659752f02899","title":"每次垃圾收集线程只收集一小片区域的内存空间，接着切换到应用程序线程，依次反复，直到垃圾收集完成"},{"parent":"bb484b1f8c33","children":[],"id":"20fc436f48ac","title":"通过对线程间冲突的妥善管理，允许垃圾收集线程以分阶段的方式完成标记、清理或复制工作"},{"parent":"bb484b1f8c33","children":[{"parent":"76b8f89d4bb7","children":[],"id":"e89460ba3366","title":"线程和上下文切换导致系统吞吐量的下降"}],"id":"76b8f89d4bb7","title":"缺点"}],"id":"bb484b1f8c33","title":"增量收集算法思想"},{"parent":"1b0d2ba47484","children":[{"parent":"6bdce8b5afe4","children":[],"id":"04325c09f966","title":"为了控制GC产生的停顿时间，将一块大的内存区域分割成多个小块，根据目标的停顿时间，每次合理的回收若干个小区间，而不是整个堆空间，从而减少一次GC所产生的时间"},{"parent":"6bdce8b5afe4","children":[],"id":"e89b4f0c39f7","title":"分代算法是将对象按照生命周期长短划分为两个部分，分区算法是将整个堆划分为连续的不同的小区间"},{"parent":"6bdce8b5afe4","children":[],"id":"b62f44354698","title":"每一个小区间都独立使用，独立回收，这种算法的好处是可以控制一次回收多少个小区间"}],"id":"6bdce8b5afe4","title":"分区算法"}],"id":"1b0d2ba47484","title":"增量收集算法、分区算法"}],"collapsed":false,"id":"10ecf9961e60","title":"垃圾回收相关算法"},{"parent":"root","lineStyle":{"randomLineColor":"#DD489D"},"children":[{"parent":"4ae65a360aac","children":[{"parent":"957972badfaa","children":[],"id":"39b49742c96d","title":"System.gc或Runtime.getRuntime().gc()的调用，会显示触发FullGC，同时会对老年代和新生代进行回收，尝试释放被丢对象占用的内存"},{"parent":"957972badfaa","children":[],"id":"4a06224ea39c","title":"然后System.gc调用无法保证对垃圾收集器的调用"},{"parent":"957972badfaa","children":[],"id":"5b992a4b1087","title":"一些特殊情况下，比如编写性能基准，我们可以在运行之间调用System.gc"}],"id":"957972badfaa","title":"System.gc()的理解"},{"parent":"4ae65a360aac","children":[{"parent":"2250e64569e8","children":[{"parent":"e84c165c4d70","children":[],"id":"0a3020d1407c","title":"java 虚拟机的堆内存设置不够"},{"parent":"e84c165c4d70","children":[],"id":"5d126853577b","title":"代码创建大量大对象，并且长时间不能被垃圾收集器收集（存在被引用）"}],"id":"e84c165c4d70","title":"OOM"},{"parent":"2250e64569e8","children":[{"parent":"16cb0cc4336a","children":[],"id":"a167a0028333","title":"只有对象不再被程序用到了，但是GC又不能回收他们的情况，才叫内存泄露"},{"parent":"16cb0cc4336a","children":[],"id":"be4a4bdf7393","title":"实际情况有一些疏忽导致对象的生命周期变的很长甚至OOM，宽泛意义上的内存泄露"},{"parent":"16cb0cc4336a","children":[{"parent":"fabfabbf17b2","children":[],"id":"1532899a3360","title":"单例的生命周期和程序是一样长，如果单例程序中，持有对外部对象的引用的话，那么这个外部对象是不能被回收的，导致内存泄露"},{"parent":"fabfabbf17b2","children":[],"id":"a397d2fe08a3","title":"一些提供close的资源未关闭导致内存泄露，如数据库链接，网络链接，和IO"}],"id":"fabfabbf17b2","title":"举例"}],"id":"16cb0cc4336a","title":"内存泄露"}],"id":"2250e64569e8","title":"内存溢出与内存泄露"},{"parent":"4ae65a360aac","children":[],"id":"f566d10bb9e7","title":"StopTheWorld"},{"parent":"4ae65a360aac","children":[{"parent":"60b8635d6411","children":[{"parent":"646a112aa991","children":[{"parent":"6d5900ba3bd4","children":[],"id":"9de55af13fce","title":"CPU切换"}],"id":"6d5900ba3bd4","title":"同一时间段内，几个程序都在同一个处理器上运行"}],"id":"646a112aa991","title":"并发"},{"parent":"60b8635d6411","children":[{"parent":"a0fd36c71ccc","children":[],"id":"7231ffdad016","title":"一个CPU执行一个进程时，另一个CPU可以执行另一个进程，两个进程互相不抢占资源，可以同时进行，我们称之为并行"},{"parent":"a0fd36c71ccc","children":[],"id":"3a8e7a7a1e5a","title":"并行因素取决于CPU的核心数量"}],"id":"a0fd36c71ccc","title":"并行"},{"parent":"60b8635d6411","children":[],"id":"92b8d1cf3a31","title":"并发的多个任务之间抢占资源"},{"parent":"60b8635d6411","children":[],"id":"bd3301c9d1bc","title":"并行多个任务之间不互相抢占资源"},{"parent":"60b8635d6411","children":[{"parent":"359ba53cc120","children":[{"parent":"e06e9cc7a892","children":[],"id":"c4014bdf9108","title":"多条垃圾收集器并行工作，用户线程处于等待状态"}],"id":"e06e9cc7a892","title":"并行"},{"parent":"359ba53cc120","children":[{"parent":"376cffc4adab","children":[],"id":"54b4b061ede9","title":"单线程执行。"}],"id":"376cffc4adab","title":"串行"}],"id":"359ba53cc120","title":"垃圾回收的并发与并行"}],"id":"60b8635d6411","title":"垃圾回收的并行与并发"},{"parent":"4ae65a360aac","children":[{"parent":"09cda39d0c44","children":[{"parent":"d44aa9a9ae94","children":[],"id":"78bb9b9ca96c","title":"程序执行并非在所有地方都能停顿下来开始GC，只有特定的位置才能停顿下来开始GC，这些位置称为安全点"},{"parent":"d44aa9a9ae94","children":[],"id":"c6e115ae38ab","title":"如果太少，导致GC等待时间长，如果太多导致运行时性能问题，，大部分指令执行都比较短，通常会根据是否具有让程序长时间执行的特征为标准选择一些执行时间较长的指令作为安全点，比如方法调用，循环跳转和异常跳转等"},{"parent":"d44aa9a9ae94","children":[{"parent":"4288cc1c9e02","children":[],"id":"08f792d12672","title":"中断所有线程，如果还有线程不在安全点，就恢复线程，让线程跑到安全点"},{"parent":"4288cc1c9e02","children":[],"id":"0e7182815519","title":"没有虚拟机采用"}],"id":"4288cc1c9e02","title":"抢先式中断"},{"parent":"d44aa9a9ae94","children":[{"parent":"1b7f1a4f09c6","children":[],"id":"4b6853367d06","title":"设置一个中断标志，各个线程运行到安全点的时候，主动轮询这个标志，如果标志为真，则将自己进行中断挂起"}],"id":"1b7f1a4f09c6","title":"主动式中断"}],"id":"d44aa9a9ae94","title":"安全点"},{"parent":"09cda39d0c44","children":[{"parent":"17bca3c47639","children":[],"id":"9601015313f5","title":"如果线程处于sleep或者blocked状态，这时候线程无法响应jvm中断请求，走到安全点去中断挂起。对于这种情况，就需要安全区域来解决"},{"parent":"17bca3c47639","children":[],"id":"045bd88181a4","title":"安全区域是指在一段代码片段中，对象的引用关系不会发生变化，在这个区域中任何位置开始GC都是安全的。"},{"parent":"17bca3c47639","children":[],"id":"a47e6af7931a","title":"当线程运行到安全区域代码时，首先标志已经进入了安全区域，如果GC，JVM会忽略标识为安全区域状态的线程"},{"parent":"17bca3c47639","children":[],"id":"cb7c634bbc27","title":"当线程即将离开安全区域时，会检查JVM是否已经完成GC，如果完成了，则继续运行。否则线程必须等待直到收到可以安全离开安全区域的信号为止"}],"id":"17bca3c47639","title":"安全区域"}],"id":"09cda39d0c44","title":"安全点与安全区域"},{"parent":"4ae65a360aac","children":[{"parent":"13c976c87769","image":{"w":473,"h":169,"url":"http://cdn.processon.com/5ee8bb247d9c0844201cf380?e=1592314164&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:vKRG4_Ocbt0x7UVt6hiCxb5uGfY="},"children":[],"id":"b42815c2fbe6","title":"截图"},{"parent":"13c976c87769","children":[],"id":"d80d071f4628","title":"最传统的引用定义，程序代码中普遍存在的引用赋值，类似new Object这种引用关系，无论任何情况下，强引用存在，垃圾收集器永远不会回收掉被引用的对象"},{"parent":"13c976c87769","children":[],"id":"6d6408f11548","title":"强引用是造成java内存泄露的主要原因之一"},{"parent":"13c976c87769","children":[],"id":"b5b942d861af","title":"强引用可以直接访问目标对象"}],"id":"13c976c87769","title":"强引用"},{"parent":"4ae65a360aac","children":[{"parent":"2a3add1af07d","children":[],"id":"dd9f4dd6505b","title":"系统将要发生内存溢出之前，会将这些对象列入回收范围之中进行第二次回收，如果这些回收后还没有足够内存，才会抛出内存溢出异常"},{"parent":"2a3add1af07d","children":[],"id":"309490e69eb3","title":"软引用通常用来实现内存敏感的缓存，高速缓存就有用到软引用"},{"parent":"2a3add1af07d","children":[],"id":"7ac1c16a9706","title":"垃圾回收器在某个时间决定回收软可达的对象的时候，会清理软引用，并可选的把引用存放到一个引用队列"}],"id":"2a3add1af07d","title":"软引用"},{"parent":"4ae65a360aac","children":[{"parent":"e4d5d89e07e0","children":[],"id":"204413f5ff44","title":"只被弱引用关联的对象只能够生生存到下一次垃圾收集器之前，当垃圾收集器工作时，无论内存空间是否足够，都会回收掉被弱引用关联的对象"}],"id":"e4d5d89e07e0","title":"弱引用"},{"parent":"4ae65a360aac","children":[{"parent":"c6e80fc338ba","children":[],"id":"cac6f31b112d","title":"一个对象是否有虚引用存在，完全不会对其生存时间构成影响。唯一目的就是在这个对象被收集器回收时收到一个系统通知"},{"parent":"c6e80fc338ba","children":[],"id":"dcdd6688bd8a","title":"他不能单独使用，也无法通过虚引用获取被引用的对象。"}],"id":"c6e80fc338ba","title":"虚引用"},{"parent":"4ae65a360aac","children":[{"parent":"b3b2139fc6c4","children":[],"id":"7fc96afde46f","title":"用以实现对象的finalize方法，所以被称为终结器引用"},{"parent":"b3b2139fc6c4","children":[],"id":"29813c0a4fd0","title":"无需手动编码，其内部配合引用队列使用"},{"parent":"b3b2139fc6c4","children":[],"id":"49801567402f","title":"GC时，终结器引用入队，由finalize线程通过终结器引用找到被引用对象并调用 他的finalize方法，第二次GC时才能回收被引用对象"}],"id":"b3b2139fc6c4","title":"终结器引用"}],"collapsed":false,"id":"4ae65a360aac","title":"垃圾回收相关概念"},{"parent":"root","lineStyle":{"randomLineColor":"#0FBAB0"},"children":[{"parent":"795b2507e569","children":[{"parent":"3a59a71e49de","children":[{"parent":"ceb24f71aa21","children":[{"parent":"492bc1d7ec08","children":[{"parent":"7d86bc881595","image":{"w":447,"h":279,"url":"http://cdn.processon.com/5ee8bfffe401fd1fd29572ab?e=1592315408&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:_O_ww3DHJhERuYY4HZ9qgjL60KM="},"children":[],"id":"0f8670372508","title":"截图"},{"parent":"7d86bc881595","children":[{"parent":"0b39bf893f37","children":[],"id":"d3b4f3269bbf","title":"在单CPU处理器或者较小应用内存等硬件平台不是特别优越的场合，串行回收器的性能表现可以超过并行回收器和并发回收器。所以串行回收默认被应用在客户端的client模式下的JVM中"},{"parent":"0b39bf893f37","children":[],"id":"503812136156","title":"在并发能力比较强的CPU上，并行回收器产生的停顿时间要短于串行回收器"}],"id":"0b39bf893f37","title":"串行回收指同一个时间段内，只允许一个CPU用于执行垃圾回收操作，此时工作线程被暂停，直到垃圾收集工作结束"}],"id":"7d86bc881595","title":"可以分为串行垃圾回收器"},{"parent":"492bc1d7ec08","children":[{"parent":"8af5338a7137","children":[],"id":"2a831e68b459","title":"和串行相反，并行收集可以运用在多个CPU同时执行垃圾回收，因此提升了应用的吞吐量，不过并行回收仍然与串行回收一样，采用独占式，使用了STW机制"}],"id":"8af5338a7137","title":"并行垃圾回收器"}],"id":"492bc1d7ec08","title":"按垃圾回收线程数"},{"parent":"ceb24f71aa21","children":[{"parent":"e9a49c54cd0e","children":[{"parent":"1e3adb9706e4","children":[],"id":"b5a8eb799fda","title":"垃圾回收器与应用程序交替工作，以尽可能减少应用程序的停顿时间"}],"id":"1e3adb9706e4","title":"并发式"},{"image":{"w":429,"h":179,"url":"http://cdn.processon.com/5ee8c1ac1e085326372d5bfa?e=1592315836&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:AFaMyoOZtXPLU-3x34g651J01a8="},"parent":"e9a49c54cd0e","children":[{"parent":"64a539b25beb","children":[],"id":"9d22104281ad","title":"一旦运行，就停止应用程序中所有的用户线程，直到垃圾回收过程完全结束"}],"id":"64a539b25beb","title":"独占式<br>"}],"id":"e9a49c54cd0e","title":"按照工作模式分"},{"parent":"ceb24f71aa21","children":[{"parent":"ddaa2c9e072b","children":[],"id":"347410e462a8","title":"压缩式"},{"parent":"ddaa2c9e072b","children":[],"id":"db3bc4111049","title":"非压缩式"}],"id":"ddaa2c9e072b","title":"按照碎片处理方式"},{"parent":"ceb24f71aa21","children":[{"parent":"2ddb3d8888ae","children":[],"id":"3fe06c9fc3e6","title":"年轻代"},{"parent":"2ddb3d8888ae","children":[],"id":"658702ae97a8","title":"老年代"}],"id":"2ddb3d8888ae","title":"按个工作内存区间分"}],"id":"ceb24f71aa21","title":"垃圾回收器分类"},{"parent":"3a59a71e49de","children":[{"parent":"b3011a222b43","children":[{"parent":"53ed41725490","children":[],"id":"1e18ed3551e0","title":"运行用户代码的时间占总运行时间的比例"},{"parent":"53ed41725490","children":[],"id":"baa81d6e1d1b","title":"总运行时间：程序的运行时间+内存回收的时间"},{"parent":"53ed41725490","children":[],"id":"94b66b724324","title":"吞吐量优先，意味着单位时间内，STW的时间最短"}],"style":{"border-radius":"6px","background-color":"rgb(255, 83, 92)","color":"rgb(255, 255, 255)","border-color":"rgb(255, 255, 255)","border-width":"0px","border-style":"none"},"id":"53ed41725490","title":"吞吐量"},{"parent":"b3011a222b43","children":[{"parent":"6dda9ad1591c","children":[],"id":"13a5fcc3c455","title":"吞吐量的补数，垃圾收集所占用的时间与总运行时间的比例"}],"id":"6dda9ad1591c","title":"垃圾收集开销"},{"parent":"b3011a222b43","children":[{"parent":"49413113c9c7","children":[],"id":"449cbbb1fbfd","title":"执行垃圾收集时，程序的工作线程被暂停的时间"},{"parent":"49413113c9c7","children":[],"id":"36a16ecd1b67","title":"暂停时间优先，意味着单次STW的时间最短，但是频率可能增加"}],"style":{"border-radius":"6px","background-color":"rgb(255, 83, 92)","color":"rgb(255, 255, 255)","border-color":"rgb(255, 255, 255)","border-width":"0px","border-style":"none"},"id":"49413113c9c7","title":"暂停时间"},{"parent":"b3011a222b43","children":[{"parent":"bcd6eb0d90df","children":[],"id":"57c34145383a","title":"相对于应用程序的执行，收集操作发生的频率"}],"id":"bcd6eb0d90df","title":"收集频率"},{"parent":"b3011a222b43","children":[{"parent":"27c40e60afa0","children":[],"id":"660f76122174","title":"Java堆区所占的内存大小"}],"style":{"border-radius":"6px","background-color":"rgb(255, 83, 92)","color":"rgb(255, 255, 255)","border-color":"rgb(255, 255, 255)","border-width":"0px","border-style":"none"},"id":"27c40e60afa0","title":"内存占用"},{"parent":"b3011a222b43","children":[{"parent":"87db728e94b6","children":[],"id":"0b1ad89b35aa","title":"一个对象从诞生到被回收经历的时间"}],"id":"87db728e94b6","title":"快速"}],"id":"b3011a222b43","title":"性能指标"},{"parent":"3a59a71e49de","children":[{"parent":"bb2f5e4a74ad","children":[],"id":"7741c41e189b","title":"简单来说抓住两点，吞吐量和暂停时间"},{"parent":"bb2f5e4a74ad","children":[],"id":"567abaeebabf","title":"高吞吐量与低暂停时间，是一对互相竞争的。因为如果高吞吐量优先，必然需要降低内存回收的执行频率，导致GC需要更长的暂停时间来执行内存回收。"},{"parent":"bb2f5e4a74ad","children":[],"id":"c6a2157b02cf","title":"如果选择低延迟优先为原则，也只能频繁的执行内存回收，引起程序吞吐量的下降"},{"parent":"bb2f5e4a74ad","children":[],"id":"d68ff6411ec1","title":"现在的标准，在最大吞吐量优先的情况下，降低停顿时间"}],"id":"bb2f5e4a74ad","title":"不可能三角"}],"id":"3a59a71e49de","title":"GC分类与性能指标"},{"parent":"795b2507e569","children":[{"parent":"a2dbbb64e1c7","children":[{"parent":"e803a7800fd8","children":[{"parent":"33fcaf0f7180","children":[],"id":"9142907a0fbd","title":"1999年jdk1.3.1"},{"parent":"33fcaf0f7180","children":[],"id":"71e005a2a8ed","title":"第一款GC"}],"id":"33fcaf0f7180","title":"Serial GC"},{"parent":"e803a7800fd8","children":[{"parent":"52b5599c25e3","children":[],"id":"f2579eec4047","title":"是SerialGC收集器的多线程版本"}],"id":"52b5599c25e3","title":"ParNew"},{"parent":"e803a7800fd8","children":[{"parent":"a9023a18d9d2","children":[],"id":"920dd5a03d7b","title":"jdk1.4.2"},{"parent":"a9023a18d9d2","children":[],"id":"cbf14051bae7","title":"2002年2月26日"},{"parent":"a9023a18d9d2","children":[],"id":"035c2b552d78","title":"ParallelGC在JDK1.6之后称为HotSpot默认GC"}],"id":"a9023a18d9d2","title":"Parallel GC和Concurrent Mark SweepGC"},{"parent":"e803a7800fd8","children":[{"parent":"9a65af72f6bd","children":[],"id":"c2e4c5d399b9","title":"2012年"},{"parent":"9a65af72f6bd","children":[],"id":"2e076ef31334","title":"jdk1.7u4"},{"parent":"9a65af72f6bd","children":[],"id":"5c36e69157dd","title":"2017年JDK9中G1变成默认的垃圾收集器，以替代CMS"},{"parent":"9a65af72f6bd","children":[],"id":"7b5ddb7543a0","title":"2018年3月，JDK10中G1垃圾回收器的并行完整垃圾回收，实现并行性改善最坏情况下的延迟"}],"id":"9a65af72f6bd","title":"G1"},{"parent":"e803a7800fd8","children":[{"parent":"f4ee197ef447","children":[],"id":"81e0b3f6abb0","title":"2018年9月JDK11"}],"id":"f4ee197ef447","title":"Epsilon 垃圾回收器、ZGC，可伸缩低延迟垃圾回收器"},{"parent":"e803a7800fd8","children":[{"parent":"fbff8515a31d","children":[],"id":"e33c4f05a06a","title":"2019年3月JDK12"}],"id":"fbff8515a31d","title":"Shenandoah GC：低停顿时间的GC，实验版"},{"parent":"e803a7800fd8","children":[{"parent":"24a53c13dcee","children":[],"id":"aa32ea4ab836","title":"2019年9月JDK13"}],"id":"24a53c13dcee","title":"增强ZGC"},{"parent":"e803a7800fd8","children":[{"parent":"0536e81db1ce","children":[],"id":"0e133e607e94","title":"2020年3月JDK14"}],"id":"0536e81db1ce","title":"删除CMS垃圾回收器，扩展ZGC在macOS和Windows上的应用"}],"id":"e803a7800fd8","title":"垃圾回收器的发展迭代史"},{"parent":"a2dbbb64e1c7","children":[{"parent":"c87f102ea168","image":{"w":619,"h":333,"url":"http://cdn.processon.com/5ee964906376891e81d0d97e?e=1592357537&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:XOHh5aP2caBW__41h6eYEMV4rvg="},"children":[],"id":"97e237d7ac7a","title":"截图"}],"id":"c87f102ea168","title":"7款经典垃圾收集器和垃圾分代之间的关系"},{"parent":"a2dbbb64e1c7","children":[{"image":{"w":900,"h":482.04613841524576,"url":"http://cdn.processon.com/5ee964e87d9c0844201d6db6?e=1592357625&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:SpCgLUODyVHetkCInegZsbAZbao="},"parent":"fe16c983e9ed","children":[],"id":"9e3e743ac969","title":"截图"},{"parent":"fe16c983e9ed","children":[],"id":"28d105037af1","title":"jdk8之前，可以用虚线参考关系"},{"parent":"fe16c983e9ed","children":[],"id":"2def9f922a5b","title":"CMS下面的实线，是CMS回收失败的后备方案"},{"parent":"fe16c983e9ed","children":[],"id":"ce29d3a1392c","title":"JDK8中取消了红线的组合，标记为废弃的。如果要用也可以用。"},{"parent":"fe16c983e9ed","children":[],"id":"75f1664eeb24","title":"JDK9中将红线做了remove"},{"parent":"fe16c983e9ed","children":[],"id":"9b4719948433","title":"jdk14中弃用了绿线组合"},{"parent":"fe16c983e9ed","children":[],"id":"92ec089d6943","title":"jdk14中删除了CMSGC"},{"parent":"fe16c983e9ed","children":[],"id":"9cf814b6cc6d","title":"JDK9默认G1"},{"parent":"fe16c983e9ed","children":[],"id":"f84277b2d777","title":"JDK8默认Parallel Scavenge 和Parallel old Gc"},{"parent":"fe16c983e9ed","children":[],"id":"5affbccde240","title":"新生代用了Parallel Scavenge 则老年代自动触发用Parallel old"},{"parent":"fe16c983e9ed","children":[],"id":"cd7362f3da3a","title":"Parallel底层与ParNew底层不同，所以不能和CMS组合"}],"id":"fe16c983e9ed","title":"垃圾收集器的组合关系"},{"parent":"a2dbbb64e1c7","children":[{"parent":"302ef6b9ed9c","children":[],"id":"557d081d25c6","title":"-XX:+PrintCommandLineFlags"},{"parent":"302ef6b9ed9c","children":[{"image":{"w":627,"h":316,"url":"http://cdn.processon.com/5ee9678bf346fb1ae567bcff?e=1592358299&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:Hb7CQ7X8Ic_191_TCztC_pUvk2M="},"parent":"a03f0c549a62","children":[],"id":"d4a057f9dd7a","title":"截图"}],"id":"a03f0c549a62","title":"jinfo -flag 相关垃圾回收器参数 进程ID"}],"id":"302ef6b9ed9c","title":"如何查看默认的垃圾收集器"}],"id":"a2dbbb64e1c7","title":"不同的垃圾回收器概述"},{"parent":"795b2507e569","children":[{"parent":"4f4922d91e21","children":[],"id":"7cbf22984637","title":"Serial收集器采用复制算法，串行回收和STW机制的方式执行内存回收"},{"parent":"4f4922d91e21","children":[{"image":{"w":900,"h":259.9306157849089,"url":"http://cdn.processon.com/5ee9686fe0b34d4dba406ecf?e=1592358528&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:CSf3yTjtf9dsYYzWt8s4eBKwnbs="},"parent":"1fd161acb86d","children":[],"id":"aa5e006957e1","title":"截图"},{"parent":"1fd161acb86d","children":[],"id":"43a9ffc55dc6","title":"使用一个CPU或者一条收集线程去完成垃圾收集工作，在进行垃圾收集时，必须暂停其他所有工作线程"}],"id":"1fd161acb86d","title":"除了年轻代，还有用于执行老年代的Serial old收集器，同样采取了串行回收，但是用标记压缩算法"},{"parent":"4f4922d91e21","children":[{"parent":"456beab481a3","children":[],"id":"4c36ba86147b","title":"简单而高效，对于限定单个CPU的环境来说，由于没有线程交互的开销，可以获取最高的单线程收集效率"}],"id":"456beab481a3","title":"优势"},{"parent":"4f4922d91e21","children":[],"id":"6a3fa44d17c4","title":"HotSpot虚拟机中，使用-XX:+UseSerialGC指定年轻代和老年代使用串行收集器"},{"parent":"4f4922d91e21","children":[],"style":{"border-radius":"6px","background-color":"rgb(255, 83, 92)","color":"rgb(255, 255, 255)","border-color":"rgb(255, 255, 255)","border-width":"0px","border-style":"none"},"id":"2c031ade560c","title":"对于交互强的应用而言，不会采取串行垃圾收集器"}],"id":"4f4922d91e21","title":"Serial回收器：串行回收"},{"parent":"795b2507e569","children":[{"parent":"dbe17e57bf93","children":[{"image":{"w":903,"h":405,"url":"http://cdn.processon.com/5ee96c6de0b34d4dba4074f3?e=1592359550&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:MGUaz8RcYB9cPPR_JV2Wg3zt3zk="},"parent":"81fddbb38ec2","children":[],"id":"dac905e755f0","title":"截图"}],"id":"81fddbb38ec2","title":"除了采用并行回收，其他方面和Serial之间几乎没有任何区别"},{"parent":"dbe17e57bf93","children":[],"id":"0da0d501cb71","title":"-XX:UseParNewGC手工指定ParNew收集器执行内存回收任务，它表示年轻代使用，不影响老年代"},{"parent":"dbe17e57bf93","children":[],"id":"f225d8ee8437","title":"-XX:ParallelGCThreads限制线程数量，默认开启和CPU数据相同的线程数"}],"id":"dbe17e57bf93","title":"ParNew回收器：并行回收"},{"parent":"795b2507e569","children":[{"parent":"bc9d122fbfeb","children":[],"id":"d1452875176f","title":"也是并行回收"},{"parent":"bc9d122fbfeb","children":[],"id":"d328313bffb4","title":"和ParNew不同，它的目标是达到一个可控制的吞吐量"},{"parent":"bc9d122fbfeb","children":[],"id":"693245f22424","title":"自适应调节策略也是Parallel 与ParNew的一个重要区别"},{"parent":"bc9d122fbfeb","children":[],"id":"cefc983b3962","title":"适合后台运算不需要太多交互的任务，例如执行批量处理，订单处理，工资支付，科学计算的应用程序"},{"parent":"bc9d122fbfeb","children":[],"id":"c9b3691c632b","title":"Parallel old采取标记压缩算法，同样基于并行回收和STW机制"},{"parent":"bc9d122fbfeb","children":[{"parent":"f858a0163f0f","children":[{"parent":"6ee3124ed9fb","children":[],"id":"fa765b3ca3ff","title":"手动指定年轻代使用此收集器执行内存回收任务"}],"id":"6ee3124ed9fb","title":"-XX:+UseParallelGC"},{"parent":"f858a0163f0f","children":[{"parent":"4948493869c8","children":[],"id":"4ff3b8a24f50","title":"手工指定老年代使用并行回收收集器，分别适用于新生代和老年代，默认jdk8是开启的"},{"parent":"4948493869c8","children":[],"id":"50544119910a","title":"与上面这两个参数关联，开启一个，默认开启另一个。"}],"id":"4948493869c8","title":"-XX:+UseParallelOldGC"},{"parent":"f858a0163f0f","children":[{"parent":"271d79b59e6b","children":[],"id":"5586043c0d0c","title":"设置年轻代并行收集器的线程数，一般与CPU数量相同，如果CPU数量大于8个，则值=3+（5*N/8）"}],"id":"271d79b59e6b","title":"-XX:ParallelGCThreads"},{"parent":"f858a0163f0f","children":[{"parent":"8a5e951c7cd4","children":[],"id":"e24ee6fe03a1","title":"设置收集器最大停顿时间，单位毫秒"},{"parent":"8a5e951c7cd4","children":[],"id":"7cd9db622fa4","title":"改参数谨慎使用"}],"id":"8a5e951c7cd4","title":"-XX:MaxGCPauseMillis"},{"parent":"f858a0163f0f","children":[{"parent":"2a3334d3843e","children":[{"parent":"3544b46cf10c","children":[],"id":"34663e81591c","title":"默认99，取值范围0-100，也就是垃圾回收时间不超过1%"}],"id":"3544b46cf10c","title":"垃圾收集占总时间比，用于衡量吞吐量大小"},{"parent":"2a3334d3843e","children":[],"id":"f6325eb34de1","title":"与上一个参数矛盾，暂停时间越长，Ratio参数就容易超过设定比例"}],"id":"2a3334d3843e","title":"-XX:GCTimeRatio"},{"parent":"f858a0163f0f","children":[{"parent":"b2813c2d7847","children":[{"parent":"6eb084819ea3","children":[],"id":"7f21b426fc89","title":"这种模式下，年轻代大小，Eden和Survivor的比例，晋升老年底对象年龄参数都会被自动调整"},{"parent":"6eb084819ea3","children":[],"id":"15da8d16bb5c","title":"为了达到堆大小，吞吐量和停顿时间之间的平衡点"},{"parent":"6eb084819ea3","children":[],"id":"d49b87163b7a","title":"在手动调优比较困难的场景下，可以直接用自适应方式，仅指定虚拟机最大堆，目标吞吐量和停顿时间，让虚拟机自己完成调优工作"}],"id":"6eb084819ea3","title":"开启自适应调节策略"}],"id":"b2813c2d7847","title":"-XX:+UseAdaptiveSizePolicy"}],"id":"f858a0163f0f","title":"参数配置"}],"id":"bc9d122fbfeb","title":"Parallel回收器：吞吐量优先"},{"parent":"795b2507e569","children":[{"parent":"912d7ff82cdc","children":[{"image":{"w":900,"h":289.96737357259383,"url":"http://cdn.processon.com/5ee9722af346fb1ae567d2c1?e=1592361019&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:qx5-2Jez-ZIuPINDqMs9lIdkODc="},"parent":"85f92e66fab4","children":[],"id":"37201fecc318","title":"截图"},{"parent":"85f92e66fab4","children":[],"id":"487d576cbbf4","title":"初始标记：STW，仅仅只是标记处GC Roots能直接关联的对象，一旦标记完成后就会恢复之前被暂停的所有应用线程，由于直接关联对象比较小，所以这里速度非常快"},{"parent":"85f92e66fab4","children":[],"id":"6933fb7b3724","title":"并发标记：从GCRoots的直接关联对象开始遍历整个对象图的过程，这个过程耗时较长，但是不需要停顿用户线程。可以与垃圾收集线程一起并发运行"},{"parent":"85f92e66fab4","children":[],"id":"0ced66379d27","title":"重新标记：为了修正并发标记期间，因用户程序继续运作导致标记产生变动的那一部分对象的标记记录"},{"parent":"85f92e66fab4","children":[],"id":"aea975a4a94b","title":"并发清除：清理删除标记阶段判断的已经死亡的对象，释放内存空间。由于不需要移动存活对象，所以这个阶段也可以与用户线程同时并发"}],"id":"85f92e66fab4","title":"jdk1.5推出Concurrent Mark Sweep 并发的标记清除，第一次实现了让垃圾收集线程与用户线程同时工作"},{"parent":"912d7ff82cdc","children":[],"id":"025a2937a884","title":"初始标记和重新标记阶段仍然需要STW机制"},{"parent":"912d7ff82cdc","children":[],"id":"95a0a6bd9550","title":"由于在垃圾收集阶段用户线程没有中断，所以在CMS回收过程中，还应该确保应用程序用户线程有足够的内存可用。因此CMS收集器不能像其他收集器那样等到老年代几乎填满再进行回收，而是当堆内存使用率达到某一阈值时，便开始进行回收。"},{"parent":"912d7ff82cdc","children":[],"id":"d2c3be8fa48a","title":"要是CMS运行期间预留的内存无法满足程序需要，就会出现一次Concurrent Mode Failure失败，这时虚拟机启用备用方案，临时启用Serial old 收集器来重新进行老年代的垃圾收集，这样停顿时间就长了。"},{"parent":"912d7ff82cdc","children":[],"id":"d4b6d6e9b586","title":"CMS采取标记清除算法，会产生内存碎片，只能够选择空闲列表执行内存分配"},{"parent":"912d7ff82cdc","children":[{"parent":"dc1e7cc3a944","children":[],"id":"8b71574f0813","title":"因为并发清除时，如果用压缩整理内存，原来的用户线程使用的内存就无法使用了。标记压缩更适合STW场景下使用"}],"id":"dc1e7cc3a944","title":"为什么不采取标记压缩呢？"},{"parent":"912d7ff82cdc","children":[{"parent":"eb417caf5938","children":[],"id":"dda1c42f3821","title":"并发收集"},{"parent":"eb417caf5938","children":[],"id":"3b75e3a2da96","title":"低延迟"}],"id":"eb417caf5938","title":"优点"},{"parent":"912d7ff82cdc","children":[{"parent":"800c3eebc92d","children":[],"id":"755d5fc2413b","title":"会产生内存碎片"},{"parent":"800c3eebc92d","children":[{"parent":"4238c3f83b92","children":[],"id":"1d48825581b0","title":"在并发阶段会占用一部分线程导致应用程序变慢"}],"id":"4238c3f83b92","title":"对CPU资源非常敏感"},{"parent":"800c3eebc92d","children":[{"parent":"0ae118993abf","children":[],"id":"853f1e400ebd","title":"并发标记阶段是与工作线程同时运行，如果并发阶段产生垃圾对象，CMS无法进行标记，导致新产生的垃圾对象没有被及时回收，只能在下一次执行GC时释放空间"}],"id":"0ae118993abf","title":"无法处理浮动垃圾"}],"id":"800c3eebc92d","title":"缺点"},{"parent":"912d7ff82cdc","children":[{"parent":"3a166e779371","children":[{"parent":"a436266766e8","children":[],"id":"daaed9a06ca9","title":"手工指定CMS收集器执行内存回收任务"},{"parent":"a436266766e8","children":[],"id":"2381626b44cc","title":"开启后，自动将-XX:UseParNewGC打开，即ParNew（Young区）+CMS（old区）+Serial GC组合"}],"id":"a436266766e8","title":"-XX:+UseConcMarkSweepGC"},{"parent":"3a166e779371","children":[{"parent":"51360f86f880","children":[{"parent":"86a9ef024057","children":[],"id":"0fcf44b04b4c","title":"一旦达到该阈值，则开始进行回收"}],"id":"86a9ef024057","title":"设置堆内存使用率的阈值"},{"parent":"51360f86f880","children":[],"id":"16722bc1c3fc","title":"jdk5及之前默认68，即老年代的空间使用率达到68%时会执行一次CMS回收"},{"parent":"51360f86f880","children":[],"id":"f07af17462a3","title":"JDK6及以上默认值为92%"},{"parent":"51360f86f880","children":[],"id":"0348795a8ce0","title":"如果内存增长缓慢，可以设置一个稍大的值，有效降低CMS的触发频率，减少老年代回收的次数"},{"parent":"51360f86f880","children":[],"id":"808d345ae25c","title":"如果应用程序内存使用率增加很快，则应该降低这个阈值，以避免频繁触发老年代串行收集器。"}],"id":"51360f86f880","title":"-XX:CMSlnitiatingOccupanyFraction"},{"parent":"3a166e779371","children":[{"parent":"010519fac39e","children":[],"id":"4e167249d6ca","title":"用于执行完Full GC后对内存空间进行压缩整理"},{"parent":"010519fac39e","children":[],"id":"ae0142d38453","title":"不过内存压缩无法并发执行，会带来停顿时间更长的问题"}],"id":"010519fac39e","title":"-XX:+UseCMSCompactAtFullCollection"},{"parent":"3a166e779371","children":[{"parent":"1b33282370d4","children":[],"id":"d3028841dcbf","title":"设置执行多少次FullGC后对内存空间进行压缩整理"}],"id":"1b33282370d4","title":"-XX:CMSFullGCsBeforeCompaction"},{"parent":"3a166e779371","children":[{"parent":"f5ec3d840e07","children":[{"parent":"e26995bb68ea","children":[],"id":"c0717453f3c3","title":"默认启动的线程数是(ParallelGCThreads+3)/4"},{"parent":"e26995bb68ea","children":[],"id":"3527b82af6a6","title":"ParallelGCThreads是年轻代并行收集器的线程数"}],"id":"e26995bb68ea","title":"设置CMS的线程数量"}],"id":"f5ec3d840e07","title":"-XX:ParallelCMSThreads"}],"id":"3a166e779371","title":"参数"},{"parent":"912d7ff82cdc","children":[{"parent":"6688e5e9afc3","children":[],"id":"1cce0d5fc5da","title":"如果想要最小化使用内存和并行开销，选择Serial GC"},{"parent":"6688e5e9afc3","children":[],"id":"04566e6084a4","title":"如果最大化应用程序的吞吐量，选择ParallelGC"},{"parent":"6688e5e9afc3","children":[],"id":"1563a3268866","title":"如果想要最小化的GC的中断或停顿时间，选择CMS GC"},{"parent":"6688e5e9afc3","children":[],"id":"17d95afc89c5","title":"jdk9标记为废弃的，jdk14已经删除了"}],"id":"6688e5e9afc3","title":"小结"}],"id":"912d7ff82cdc","title":"CMS回收器：低延迟"},{"parent":"795b2507e569","children":[{"parent":"c2916b1c015f","children":[{"parent":"417e97675802","children":[],"id":"e5c985267993","title":"就是在延迟可控的情况下，获得尽可能高的吞吐量，所以才担当起全功能收集器的重任和期望"}],"id":"417e97675802","title":"官方给G1设定的目标"},{"parent":"c2916b1c015f","children":[{"parent":"f3005260423a","children":[],"id":"07a698dbc418","title":"G1是一个并行回收器，他把堆内存分割为很多不相关的区域（Region）（物理上不连续）"},{"parent":"f3005260423a","children":[],"id":"dbc4c4a02a51","title":"使用不同的region表示Eden，s0，s1，老年代等"},{"parent":"f3005260423a","children":[],"id":"6853dca56bf2","title":"G1跟踪各个region里面垃圾堆积的价值大小，在后台维护一个优先列表，每次根据允许的收集时间，优先回收价值最大的Region"}],"id":"f3005260423a","title":"Garbage First"},{"parent":"c2916b1c015f","children":[],"id":"b974a7129249","title":"JDK1.7版本正式启用，jdk9以后默认垃圾回收器"},{"parent":"c2916b1c015f","children":[],"id":"f631d69beae6","title":"JDK8还不是默认的，需要用-XX:+UseG1GC来启用"},{"parent":"c2916b1c015f","children":[{"parent":"c64e7a3aecf3","children":[],"id":"306b3f10f7bc","title":"并行与并发"},{"parent":"c64e7a3aecf3","children":[{"parent":"613acb9c1da5","children":[],"id":"a21f97034440","title":"同时兼顾年轻代与老年代"}],"id":"613acb9c1da5","title":"分代收集"},{"parent":"c64e7a3aecf3","children":[{"parent":"1942313cfa78","children":[],"id":"7df6c220384f","title":"region之间用复制算法，整体可以看做是标记压缩算法。"},{"parent":"1942313cfa78","children":[],"id":"948ca384ac53","title":"两种算法都避免内存碎片，有利于程序长时间运行，分配大对象不会因为无法找到连续空间提前触发下一次GC，尤其当Java堆非常大的时候，G1优势更加明显"}],"id":"1942313cfa78","title":"空间整合"},{"parent":"c64e7a3aecf3","children":[{"parent":"317a9dee1abd","children":[],"id":"78be78845c88","title":"能让使用者明确指定在一个长度为M毫秒的时间片段内，消耗在垃圾收集上的时间不能超过N毫秒"}],"id":"317a9dee1abd","title":"可预测的停顿时间模型"}],"id":"c64e7a3aecf3","title":"优势"},{"parent":"c2916b1c015f","children":[{"parent":"c869e2b18ab7","children":[],"id":"fd4b9d1f6173","title":"相较于CMS，G1不具备全方位，压倒性优势。比如用户程序运行中，G1无论是为了垃圾收集产生的内存占用，还是程序运行时的额外执行负载都要比CMS要高"},{"parent":"c869e2b18ab7","children":[],"id":"71dc97d0fa93","title":"经验上来说，小内存应用CMS表现大概率优于G1，在大内存上G1优势发挥更多，平衡点再6-8GB"}],"id":"c869e2b18ab7","title":"缺点"},{"parent":"c2916b1c015f","children":[{"parent":"49b5274f9182","children":[],"id":"c7e14628cb1c","title":"-XX:+UseG1GC"},{"parent":"49b5274f9182","children":[{"parent":"7997d37fb06a","children":[],"id":"f5fa81b39a69","title":"设置每个Region大小，值是2的幂，范围是1MB到32MB之间，目标是根据最小的Java堆划分出约2048个区域，默认是堆内存的1/2000"}],"id":"7997d37fb06a","title":"-XX:G1HeapRegionSize"},{"parent":"49b5274f9182","children":[{"parent":"38e9f07a90e2","children":[],"id":"149e56fb818c","title":"设置期望达到的最大GC停顿时间指标，JVM尽力但不保证，默认200ms"}],"id":"38e9f07a90e2","title":"-XX:MaxGCPauseMillis"},{"parent":"49b5274f9182","children":[{"parent":"aac59a812006","children":[],"id":"73a6e46861c6","title":"设置STW工作线程数的值，最多设置8"}],"id":"aac59a812006","title":"-XX:ParallelGCThread"},{"parent":"49b5274f9182","children":[{"parent":"8a2041714d49","children":[],"id":"bbabeae6cf8b","title":"设置并发标记的线程数，将N设置为并行垃圾回收线程数（parallelGCThreads）的1/4左右"}],"id":"8a2041714d49","title":"-XX:ConcGCThreads"},{"parent":"49b5274f9182","children":[{"parent":"3f374b5e93ff","children":[],"id":"7c8e0a438829","title":"设置触发并发GC周期的Java堆占用率阈值，超过此值就触发GC，默认是45"}],"id":"3f374b5e93ff","title":"-XX:InitiatingHeapOccupancyPercent"}],"id":"49b5274f9182","title":"参数设置"},{"parent":"c2916b1c015f","children":[{"parent":"6be2fdb14a78","children":[],"id":"f45fa7027995","title":"第一步开启G1垃圾收集器"},{"parent":"6be2fdb14a78","children":[],"id":"4f6e4baeb31d","title":"第二步，设置堆的最大内存"},{"parent":"6be2fdb14a78","children":[],"id":"61e6e7a216c2","title":"第三步，设置最大的停顿时间"},{"parent":"6be2fdb14a78","children":[{"parent":"2c90b9ff090b","children":[],"id":"6d91a026ed7f","title":"YoungGC"},{"parent":"2c90b9ff090b","children":[],"id":"48a2a9980a0c","title":"MixedGC"},{"parent":"2c90b9ff090b","children":[],"id":"d3ee0f5878e2","title":"FullGC"}],"id":"2c90b9ff090b","title":"G1提供了三种垃圾回收模式在不同的条件下触发"}],"id":"6be2fdb14a78","title":"常见调优"},{"parent":"c2916b1c015f","children":[{"parent":"6c1a87565697","children":[],"id":"49904cc53c75","title":"面向服务器端应用，针对具有大内存，多处理器的机器"},{"parent":"6c1a87565697","children":[],"id":"b447c4930b03","title":"最主要应用是需要低GC延迟"},{"parent":"6c1a87565697","children":[],"id":"cbcd61103d52","title":"如：在堆大小约6GB或更大，可预测的暂停时间可以低于0.5s，G1每次清理一部分region来保证每次GC停顿时间不会过长"},{"parent":"6c1a87565697","children":[{"parent":"e594a06f8c76","children":[],"id":"de79a86021e9","title":"超过50%的Java堆被活动数据占用"},{"parent":"e594a06f8c76","children":[],"id":"692b68f5708d","title":"对象分配频率或年代提升频率变化很大"},{"parent":"e594a06f8c76","children":[],"id":"2f9f7b462254","title":"GC停顿时间过长，长于0.5~1秒"}],"id":"e594a06f8c76","title":"用来替换1.5中的CMS"}],"id":"6c1a87565697","title":"适用场景"},{"parent":"c2916b1c015f","children":[{"parent":"73197d03a2ee","children":[{"image":{"w":683,"h":348,"url":"http://cdn.processon.com/5eea02b7f346fb1ae56a2057?e=1592398023&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:g-TZ2B1jcqu0XblqGNl4g8OPJmE="},"parent":"e9ed35f21232","children":[],"id":"47d98e3870ed","title":"截图"},{"parent":"e9ed35f21232","children":[],"id":"b3e4d0621ba9","title":"region可以充当多个角色"}],"id":"e9ed35f21232","title":"所有region大小相同，且在JVM生命周期内不会改变"}],"id":"73197d03a2ee","title":"region"},{"parent":"c2916b1c015f","children":[{"parent":"892af6ec939c","children":[{"parent":"23406685ab85","children":[{"parent":"b361100b4e60","children":[],"id":"e8ca03bd2f34","title":"并行独占式收集器"}],"id":"b361100b4e60","title":"当年轻代eden区用尽时"}],"id":"23406685ab85","title":"年轻代GC"},{"parent":"892af6ec939c","children":[{"parent":"0a5ed323b63e","children":[],"id":"69f94ecb5c1d","title":"当堆内存使用到一定值，默认45%"}],"id":"0a5ed323b63e","title":"老年代并发标记过程"},{"parent":"892af6ec939c","children":[{"parent":"4d87f1269cc5","children":[],"id":"b2c38229ab88","title":"标记完成马上开始混合回收"},{"parent":"4d87f1269cc5","children":[],"id":"30af5ab583ee","title":"G1老年代回收器不需要整个老年底都被回收，一次只需要扫描回收一小部分老年代的region就可以了。"},{"parent":"4d87f1269cc5","children":[],"id":"69ae118ce0e2","title":"同时这个老年代回收是和年轻代一起被回收的。"}],"id":"4d87f1269cc5","title":"混合回收"},{"parent":"892af6ec939c","children":[],"id":"9ec2c9e1fa46","title":"有可能fullGC"}],"id":"892af6ec939c","title":"垃圾回收过程"},{"parent":"c2916b1c015f","children":[{"parent":"c45f1c65d455","children":[{"parent":"48de7363ad06","children":[],"id":"1ecdd1d13e68","title":"通过记忆集避免全局扫描"}],"id":"48de7363ad06","title":"每个region对应一个记忆集"},{"parent":"c45f1c65d455","children":[],"id":"6831c89e2aa7","title":"每次引用类型数据写操作时，会产生一个写屏障暂时中断操作"},{"parent":"c45f1c65d455","children":[],"id":"ef6d36a4f16e","title":"然后检查将要希尔的引用指向的对象是否和该引用对象类型数据在不同的region，如果不同就通过CardTable把相关的引用信息记录到引用指向对象所在的Region对应的记忆集中"},{"parent":"c45f1c65d455","children":[],"id":"99d00c0a646f","title":"当进行垃圾收集时，在GC根节点枚举范围加入记忆集，就可以保证不进行全局扫描，也不会有遗漏"}],"id":"c45f1c65d455","title":"记忆集"},{"parent":"c2916b1c015f","children":[{"parent":"34b6c43c09cd","children":[{"parent":"9092a711f1df","children":[],"id":"241a33743349","title":"根是指static变量指向的对象，正在执行的方法调用链上的局部变量等。根引用连同Rset记录的外部引用作为扫描存活对象的入口"}],"id":"9092a711f1df","title":"1、扫描根"},{"parent":"34b6c43c09cd","children":[{"parent":"761c7d4e1bdc","children":[],"id":"e3219c12fff0","title":"处理dirty card queue中的card，更新Rset，此阶段完成后，Rset可以准确的反应老年代所在的内存分段中对象的引用"}],"id":"761c7d4e1bdc","title":"2、更新Rset"},{"parent":"34b6c43c09cd","children":[{"parent":"4da028996584","children":[],"id":"b2b3a32fd4e4","title":"识别被老年代对象指向的Eden中的对象，这些被指向的Eden中的对象被认为是存活的对象"}],"id":"4da028996584","title":"3、处理Rset"},{"parent":"34b6c43c09cd","children":[{"parent":"dc3c1cfc8658","children":[],"id":"6e13451a2d8f","title":"对象树被遍历，Eden区内存段中存活的对象会被复制到Survivor去中空的内存分段，Survivor区内存段中存活的对象如果年龄未达阈值，会加一，达到阈值会被复制到old区中空的内存分段，如果Survivor区空间不够，Eden空间的部分数据会直接晋升到老年代空间"}],"id":"dc3c1cfc8658","title":"4、复制对象"},{"parent":"34b6c43c09cd","children":[{"parent":"2a604068f27a","children":[],"id":"cacfefb50ab9","title":"处理强软弱虚，终结器引用，本地方法接口引用等，最红eden空间的数据为空，GC停止工作，而目标内存中的对象都是连续存储的，没有碎片，所以复制过程可以达到内存整理的效果，减少碎片。"}],"id":"2a604068f27a","title":"5、处理引用"}],"id":"34b6c43c09cd","title":"G1回收过程一，年轻代GC"},{"parent":"c2916b1c015f","children":[{"parent":"2e04ac528ca7","children":[{"parent":"7896d0f8be29","children":[],"id":"badadbaf43aa","title":"标记从根节点直接可达的对象，并且触发一次年轻代GC"}],"id":"7896d0f8be29","title":"初始标记阶段STW"},{"parent":"2e04ac528ca7","children":[{"parent":"89ab5edc9935","children":[],"id":"cf5da8894cbd","title":"扫描Survivor区直接可达老年代区域对象，并标记被引用的对象，这个过程在youngGC之前完成"}],"id":"89ab5edc9935","title":"根区域扫描阶段"},{"parent":"2e04ac528ca7","children":[{"parent":"1eb888f2a93b","children":[],"id":"d3117265436f","title":"和应用程序并发执行，并发标记阶段若发现区域对象中的所有对象都是垃圾，那这个区域会被立即回收。"},{"parent":"1eb888f2a93b","children":[],"id":"7eba403baa53","title":"并发标记过程中，会计算每个区域的对象活性，存活对象的比例"}],"id":"1eb888f2a93b","title":"并发标记"},{"parent":"2e04ac528ca7","children":[{"parent":"c6f6338963b8","children":[],"id":"73db2eb686da","title":"由于应用程序持续进行，需要修正上次标记结果，STW，G1采取比CMS更快的初始快照算法"}],"id":"c6f6338963b8","title":"再次标记"},{"parent":"2e04ac528ca7","children":[{"parent":"392173cc6dc0","children":[],"id":"2f26e52bcc12","title":"计算各个区域存活对象和GC回收比例，并进行排序，识别可以混合回收的区域。为下个阶段做铺垫，STW,"},{"parent":"392173cc6dc0","children":[],"id":"dbbf68d8d011","title":"这个阶段并不会实际上去做垃圾的收集"}],"id":"392173cc6dc0","title":"独占清理"},{"parent":"2e04ac528ca7","children":[{"parent":"d596ef709815","children":[],"id":"4f7a5a4f43e7","title":"识别并清理完全空闲的区域"}],"id":"d596ef709815","title":"并发清理阶段"}],"id":"2e04ac528ca7","title":"G1回收过程二、并发标记过程"},{"parent":"c2916b1c015f","children":[{"parent":"16456f56088c","children":[],"id":"194f22939527","title":"当越来越多的对象晋升到老年代old region时，为了避免内存被耗尽，虚拟机会触发一次混合的垃圾收集器，该算法除了回收整个young region，还会回收一部分的old region。也要注意Mixed gc并不是fullgc"},{"parent":"16456f56088c","children":[],"id":"f31b78a03ef9","title":"并发标记结束后，老年代中百分百为垃圾的内存分段被回收了。部分为垃圾的内存分段被计算出来了，默认情况下，这些老年代的内存分段会分8次被回收-XX:G1MixedGCCountTarget设置"},{"parent":"16456f56088c","children":[],"id":"b578adae3067","title":"混合回收的回收集包括八分之一的老年代，Eden区内存分段，Survivor区内存分段。"},{"parent":"16456f56088c","children":[],"id":"95277df0b692","title":"由于老年代中内存分段默认分8次回收，G1会优先回收垃圾多的内存分段，并且有一个阈值会决定内存分段是否被回收。-XX:G1MixedGCLiveThresholdPercent，默认为65%。意思是垃圾占比达到65%才会被回收。如果垃圾占比比较低，意味存活对象较高，复制的时候花更多时间。"},{"parent":"16456f56088c","children":[{"parent":"0ae69bcc1c78","children":[],"id":"3082b610182b","title":"默认值是10%，意思是允许整个堆内存中有10%的空间被浪费，意味着如果发现可以回收的垃圾占堆内存比例低于10%，则不再进行混合回收，因为GC花费更多的时间，但是回收到的内存却很少。"}],"id":"0ae69bcc1c78","title":"混合回收不一定要进行8次，有一个阈值：-XX:G1HeapWastePercent"}],"id":"16456f56088c","title":"G1回收过程三：混合回收"},{"parent":"c2916b1c015f","children":[{"parent":"89d630dca89f","children":[],"id":"f1e0ba496e20","title":"G1初衷就是要避免FULLGC，如果上述方式不能正常工作，G1会停止应用程序的执行。使用单线程的内存回收算法进行垃圾回收，性能非常差。应用程序停顿时间长"},{"parent":"89d630dca89f","children":[],"id":"a7ad8c14a1b4","title":"比如堆太小，当G1复制存活对象的时候没有空的内存分段可用，则会回退到FullGC"},{"parent":"89d630dca89f","children":[{"parent":"09c49a1d1f63","children":[],"id":"a90c06464dd8","title":"回收阶段的时候没有足够的to-space存放晋升的对象"},{"parent":"09c49a1d1f63","children":[],"id":"181360651659","title":"并发处理过程完成之前空间耗尽了。"}],"id":"09c49a1d1f63","title":"导致FullGC原因可能有两个"}],"id":"89d630dca89f","title":"G1可选过程四：fullGC"},{"parent":"c2916b1c015f","children":[{"parent":"387a02267a5f","children":[],"id":"54ae747f9916","title":"避免使用-Xmn或-XX:NewRatio等相关选项显式设置年轻代大小"},{"parent":"387a02267a5f","children":[],"id":"68fce92b47de","title":"固定的年轻代大小会覆盖暂停时间目标"},{"parent":"387a02267a5f","children":[],"id":"645f379bda3c","title":"暂停时间目标不要太苛刻，太苛刻会影响吞吐量"}],"id":"387a02267a5f","title":"优化建议"}],"id":"c2916b1c015f","title":"G1回收器：区域化分代式"},{"parent":"795b2507e569","children":[{"image":{"w":607,"h":251,"url":"http://cdn.processon.com/5eea111fe401fd1fd298677f?e=1592401711&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:dI5HlLRBvspUpCtkxcxjnovNUkc="},"parent":"1cfa3c43e6a5","children":[],"id":"7d7241e32689","title":"截图"}],"id":"1cfa3c43e6a5","title":"垃圾回收器总结"},{"parent":"795b2507e569","children":[{"image":{"w":523,"h":213,"url":"http://cdn.processon.com/5eea116d07912929cb4a621a?e=1592401789&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:udZW026FIgsONYcw3P9UytKfxcQ="},"parent":"4e29e33c349e","children":[],"id":"105b957b7101","title":"截图"},{"image":{"w":637,"h":324,"url":"http://cdn.processon.com/5eea11991e08532637304fee?e=1592401834&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:TrTacaQrVCV1xLvMwuotRwsZ3Mg="},"parent":"4e29e33c349e","children":[],"id":"b2f3366cdbde","title":"截图"},{"image":{"w":663,"h":365,"url":"http://cdn.processon.com/5eea11c6e401fd1fd29868c0?e=1592401879&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:P_gQ89T--xDM9yplXpsqnl8ywZM="},"parent":"4e29e33c349e","children":[],"id":"5d3ea0672950","title":"截图"},{"image":{"w":568,"h":237,"url":"http://cdn.processon.com/5eea12041e085326373050e3?e=1592401940&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:Ho-yJwQey4cHgLTBuor9kn235Dc="},"parent":"4e29e33c349e","children":[],"id":"4cb02d7c13e4","title":"截图"},{"image":{"w":680,"h":188,"url":"http://cdn.processon.com/5eea1227f346fb1ae56a40d6?e=1592401976&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:cB8QYQtdaEcnvPmI78XqDxQWR8M="},"parent":"4e29e33c349e","children":[],"id":"66d6c8330a43","title":"截图"},{"image":{"w":900,"h":280.3721488595438,"url":"http://cdn.processon.com/5eea12527d9c0844201ff3e1?e=1592402019&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:v2KkgFBAZQDDN4kGeb95dPqIPTE="},"parent":"4e29e33c349e","children":[],"id":"81748a8b9eb3","title":"截图"},{"parent":"4e29e33c349e","children":[],"id":"898ad41ee987","title":"GC EASY"}],"id":"4e29e33c349e","title":"GC日志分析"},{"parent":"795b2507e569","children":[{"parent":"d02001570d12","image":{"w":652,"h":371,"url":"http://cdn.processon.com/5eea12e2e0b34d4dba42f2c8?e=1592402163&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:Z13U5r0jkxyBpMNxpOpihvR4CLo="},"children":[],"id":"f0ad3c4095d9","title":"截图"},{"parent":"d02001570d12","children":[{"parent":"253b45f0f940","children":[{"parent":"37ec8f04ed72","children":[],"id":"d56abbc99847","title":"低延迟时间"}],"id":"37ec8f04ed72","title":"强项"},{"parent":"253b45f0f940","children":[{"parent":"998a1364a26b","children":[],"id":"fda56f7ff6eb","title":"高运行负担下的吞吐量下降"}],"id":"998a1364a26b","title":"弱项"}],"id":"253b45f0f940","title":"Shenandoah GC"},{"parent":"d02001570d12","children":[{"parent":"53ee22845f0e","children":[],"id":"6978b6f9264a","title":"在尽可能堆吞吐量影响不大的前提下，实现在任意堆内存大小下都可以把垃圾回收的停顿时间限制在10毫秒以内的低延迟"},{"parent":"53ee22845f0e","children":[],"id":"513362e9c2ff","title":"并发标记，并发预备重分配，并发重分配，并发重映射"},{"parent":"53ee22845f0e","children":[],"id":"9a1dd29f1f39","title":"除了初始标记是STW，其他地方几乎都是并发执行的"}],"id":"53ee22845f0e","title":"ZGC"}],"id":"d02001570d12","title":"垃圾回收器的新发展"}],"collapsed":true,"id":"795b2507e569","title":"垃圾回收器"}],"children":[{"parent":"root","lineStyle":{"randomLineColor":"#0F80C4"},"children":[{"parent":"010b308004b0","children":[{"parent":"e49f7566d0eb","image":{"w":992,"h":845,"url":"http://cdn.processon.com/617677b107912943ddf963f5?e=1635157442&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:B7TAG_HN3-KtssgCt8QJ73AkF7I="},"children":[],"id":"c6930c932e95","title":"截图"}],"link":{"title":"详图1","type":"url","value":"https://www.processon.com/diagraming/5ed057725653bb79c10acd1e"},"id":"e49f7566d0eb","title":"Java虚拟机整体架构祥图"},{"parent":"010b308004b0","children":[{"image":{"w":900,"h":642.1514818880352,"url":"http://cdn.processon.com/5ed1a239e401fd0735a2f611?e=1590800457&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:fExc8EcgqNtdkFxDJEuemmIcdr0="},"parent":"d44e4fdfe934","children":[],"id":"b5635937ab13","title":"截图"}],"link":{"title":"详图2","type":"url","value":"https://www.processon.com/diagraming/5ed057725653bb79c10acd1e"},"id":"d44e4fdfe934","title":"Java代码执行过程详图"},{"parent":"010b308004b0","children":[{"parent":"58e7e11e3175","image":{"w":793,"h":404,"url":"http://cdn.processon.com/5ed1a2827d9c080702835476?e=1590800530&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:PJekL3fbjdLias5PHGDRjVMhQbc="},"children":[],"id":"1fc06e3c4bba","title":"截图"}],"id":"58e7e11e3175","title":"汇编语言、机器语言、高级语言关系"},{"parent":"010b308004b0","children":[{"parent":"50c0d2039f5e","children":[{"parent":"59e9012098fa","children":[{"parent":"62b28f6c85cf","children":[],"id":"deca70e10eb8","title":"设计和实现简单，适用于资源受限的系统"},{"parent":"62b28f6c85cf","children":[],"id":"ce89e49f8a83","title":"避开了寄存器的分配难题：使用零地址指令方式分配"},{"parent":"62b28f6c85cf","children":[{"parent":"94e8d020efa6","children":[],"id":"ea566598c07a","title":"8位字节码，所以说指令集更小，但是完成一项操作花费的指令相对多。"}],"id":"94e8d020efa6","title":"指令流中大部分都是零地址指令，执行过程依赖操作栈，指令集更小，编译器容易实现"},{"parent":"62b28f6c85cf","children":[],"id":"5c135454e884","title":"不需要硬件支持，可移植性更好，更好实现跨平台"}],"id":"62b28f6c85cf","title":"优点"},{"parent":"59e9012098fa","children":[{"parent":"b8e4e594b578","children":[],"id":"4298913ad2c6","title":"性能下降，实现同样的功能需要更多的指令，毕竟还要入栈出栈等操作"}],"id":"b8e4e594b578","title":"缺点"}],"id":"59e9012098fa","title":"基于栈式"},{"parent":"50c0d2039f5e","children":[{"parent":"02d3f895225f","children":[{"parent":"202c9b3ffeba","children":[{"parent":"87d510985129","children":[],"id":"fc08b34a0cba","title":"基于栈式的，因为是操作栈顶的元素，所以不需要地址"}],"id":"87d510985129","title":"零地址只有操作数"},{"parent":"202c9b3ffeba","children":[],"id":"ee1557f2a982","title":"一地址有一个地址，一个操作数"},{"parent":"202c9b3ffeba","children":[],"id":"4af47d00e128","title":"二地址有两个地址，一个操作数"}],"id":"202c9b3ffeba","title":"地址、操作数"}],"id":"02d3f895225f","title":"指令"},{"parent":"50c0d2039f5e","children":[{"parent":"5ae436eebd66","children":[{"parent":"717674b27701","children":[],"id":"b99a743f7a47","title":"性能优秀，执行更高效"},{"parent":"717674b27701","children":[],"id":"5e2916c7e6e4","title":"花费更少的指令去完成一项操作"}],"id":"717674b27701","title":"优点"},{"parent":"5ae436eebd66","children":[{"parent":"d7747c8d092e","children":[],"id":"08cf34d848d4","title":"指令集架构完全依赖硬件，可移植性差"}],"id":"d7747c8d092e","title":"缺点"},{"parent":"5ae436eebd66","children":[{"parent":"e5d00a3ec9a4","children":[],"id":"7f33d56fbcd7","title":"16位字节码"}],"id":"e5d00a3ec9a4","title":"典型应用是X86的二进制指令集，比如传统的PC以及安卓的Davlik虚拟机"},{"parent":"5ae436eebd66","children":[],"id":"f34d49f1f416","title":"大部分情况下，指令集往往以一地址指令，二地址指令和三地址指令为主。"}],"id":"5ae436eebd66","title":"基于寄存器式"},{"parent":"50c0d2039f5e","children":[{"parent":"5c00c6539ef4","children":[],"id":"be28a4de4130","title":"-v输出附加信息"},{"parent":"5c00c6539ef4","children":[],"id":"7473158e41eb","title":"-l输出行号和本地变量表"},{"parent":"5c00c6539ef4","children":[],"id":"bc12713ae058","title":"-p显示所有类和成员"},{"parent":"5c00c6539ef4","children":[],"id":"faded19dac4f","title":"-c对代码进行反汇编"}],"id":"5c00c6539ef4","title":"javap 查看字节码"}],"id":"50c0d2039f5e","title":"JVM的架构模型"},{"parent":"010b308004b0","children":[{"parent":"770402083028","children":[{"parent":"9bb3042d051e","children":[],"id":"60064578ddc1","title":"通过引导类加载器bootstrap class loader创建一个初始类来完成的，这个类是由虚拟机的具体实现指定的。"}],"id":"9bb3042d051e","title":"虚拟机的启动"},{"parent":"770402083028","children":[{"parent":"234e5e1a4b96","children":[],"id":"8eab50be641c","title":"执行一个所谓的Java程序的时候，真正执行的是一个叫Java虚拟机的进程"}],"id":"234e5e1a4b96","title":"虚拟机的执行"},{"parent":"770402083028","children":[{"parent":"b15485314d6c","children":[],"id":"99d26542ecaa","title":"程序正常执行结束"},{"parent":"b15485314d6c","children":[],"id":"b81fa252a701","title":"执行过程遇到异常或错误而异常终止"},{"parent":"b15485314d6c","children":[],"id":"6c766dfcf1b7","title":"操作系统错误导致Java虚拟机进程终止"},{"parent":"b15485314d6c","children":[{"parent":"fb3385ca0f2c","children":[],"id":"bd5745f14695","title":"halt停止、停下、阻止<br>"},{"parent":"fb3385ca0f2c","children":[],"id":"538f1bd5f773","title":"exit方法源码：static native void halt0（int status）"}],"id":"fb3385ca0f2c","title":"Runtime类或System类的exit方法、runtime类的halt方法，并且Java安全管理器允许这次exit或halt操作"},{"parent":"b15485314d6c","children":[],"id":"974dda4ae046","title":"JNI(Java Native Interface)规范描述了用JNI Invocation API来加载或卸载Java虚拟机时，Java虚拟机退出的情况"}],"id":"b15485314d6c","title":"虚拟机的退出"}],"id":"770402083028","title":"JVM的生命周期"},{"parent":"010b308004b0","children":[{"parent":"a2ca337a0f5d","children":[{"parent":"0fb14156df68","children":[],"id":"c352c14b85b2","title":"世界第一款商用Java虚拟机"},{"parent":"0fb14156df68","children":[],"id":"5ec5b3006530","title":"JDK1.4时被淘汰"},{"parent":"0fb14156df68","children":[],"id":"03e32ae7ef24","title":"只提供了解释器"},{"parent":"0fb14156df68","children":[],"id":"2f01425355e4","title":"如果使用JIT编译器，就需要外挂，但是JIT和解释器不能配合工作"}],"id":"0fb14156df68","title":"sun Classic VM"},{"parent":"a2ca337a0f5d","children":[{"parent":"0b788d9f210f","children":[],"id":"7aefb997259c","title":"为了解决上一个虚拟机问题，JDK1.2时，sun提供了此虚拟机"},{"parent":"0b788d9f210f","children":[{"parent":"e57686ebcb4d","children":[],"id":"c61c6ff2f4ff","title":"虚拟机知道内存中某个位置的数据是什么类型"}],"id":"e57686ebcb4d","title":"Exact Memory Management：准确式内存管理"},{"parent":"0b788d9f210f","children":[{"parent":"06cd6380407e","children":[],"id":"c3a6eb2bfeb6","title":"热点探测"},{"parent":"06cd6380407e","children":[],"id":"6ccf7cd3bb25","title":"编译器与解释器混合工作模式"}],"id":"06cd6380407e","title":"具有现代高性能虚拟机的雏形"},{"parent":"0b788d9f210f","children":[{"parent":"edfac2ccb8bb","children":[],"id":"0e0f3378e330","title":"英雄气短，被hotspot虚拟机替换"}],"id":"edfac2ccb8bb","title":"只在Solaris平台短暂使用，其他平台还是Classic vm"}],"id":"0b788d9f210f","title":"Exact VM"},{"parent":"a2ca337a0f5d","children":[{"parent":"a81156dff590","children":[],"id":"9474b2f0584e","title":"最初由Longview&nbsp; Technologies的小公司设计，1997年被sun公司收购，2009年sun公司被甲骨文收购"},{"parent":"a81156dff590","children":[],"id":"686e43b8e3d2","title":"JDK1.3时，HotSpot VM成为默认虚拟机"},{"parent":"a81156dff590","children":[{"parent":"381efe9fc3ae","children":[],"id":"e618af511add","title":"JDK6,8等均默认"}],"id":"381efe9fc3ae","title":"绝对市场地位，称霸武林"},{"parent":"a81156dff590","children":[{"parent":"6f43358b4b89","children":[],"id":"d8029f46fd89","title":"通过计数器找到最具编译价值代码，触发即时编译或栈上替换"},{"parent":"6f43358b4b89","children":[{"parent":"0a720be836ed","children":[],"id":"3c572bb40438","title":"走路去目的地，"}],"id":"0a720be836ed","title":"通过编译器与解释器协同工作，在优化响应时间和最佳执行性能中取得平衡"}],"id":"6f43358b4b89","title":"HotSpot就是他的热点代码探测技术"},{"parent":"a81156dff590","children":[],"id":"dfbe9f3b3b07","title":""}],"id":"a81156dff590","title":"hotspot虚拟机"},{"parent":"a2ca337a0f5d","children":[{"parent":"6a19d1bd6d00","children":[],"id":"7aad38f76e5d","title":"BEA公司"},{"parent":"6a19d1bd6d00","children":[{"parent":"9ad75a5c6bba","children":[],"id":"6afe59c4883f","title":"不太关注程序启动速度，引起JRockit内部不包括解析器实现，全部代码靠即时编译器编译后执行"}],"id":"9ad75a5c6bba","title":"专注服务器端应用"},{"parent":"6a19d1bd6d00","children":[],"id":"96ceca64234d","title":"世界上最快的JVM"},{"parent":"6a19d1bd6d00","children":[{"parent":"7a9dca0ebb4d","children":[],"id":"55cf9135f452","title":"JRockit Real Time提供毫秒或微秒级的JVM响应时间，适合财务、军事指挥，电信网络的需要"},{"parent":"7a9dca0ebb4d","children":[],"id":"f5dc442fbb2c","title":"MissionControl服务套件，极低的开销，来监控、管理和分析生成环境中的应用程序的工具"}],"id":"7a9dca0ebb4d","title":"全面的Java运行时解决方案组合"},{"parent":"6a19d1bd6d00","children":[],"id":"47576bf188f9","title":"2008年BEA被oracle收购"},{"parent":"6a19d1bd6d00","children":[],"id":"38028aea0988","title":"JDK8中，在HOTSPOT的基础上，移植JRockit的优秀特性"}],"id":"6a19d1bd6d00","title":"JRockit"},{"parent":"a2ca337a0f5d","children":[{"parent":"98e56f31b950","children":[],"id":"b3d2f134bdff","title":"全称：IBM Technology for java Virtual Machine 简称IT4J，内部代号J9"},{"parent":"98e56f31b950","children":[],"id":"60c9ef779f91","title":"市场定位与HotSpot接近，服务器端、桌面应用，嵌入式等多用途VM"},{"parent":"98e56f31b950","children":[{"parent":"b18cf6f757c5","children":[],"id":"d17ff75ae5c5","title":"IBM产品结合使用性能最好"}],"id":"b18cf6f757c5","title":"广泛应用于IBM的各种Java产品"},{"parent":"98e56f31b950","children":[],"id":"7dad15c55edf","title":"有影响力的三大商用虚拟机之一"},{"parent":"98e56f31b950","children":[],"id":"90c5913a0c5b","title":"2017开源，OPEN J9"}],"id":"98e56f31b950","title":"IBM J9"},{"parent":"a2ca337a0f5d","children":[{"parent":"9f130d9cc5f9","children":[{"parent":"460966038523","children":[],"id":"1dfffa7fa1a0","title":"智能控制器、传感器、老人手机等"}],"id":"460966038523","title":"JavaME产品线产品"}],"id":"9f130d9cc5f9","title":"KVM和CDC/CLDC HotSpot"},{"parent":"a2ca337a0f5d","children":[{"parent":"7eb639aee4b7","children":[],"id":"b006d81acf24","title":"与特定硬件平台绑定、软硬件配合的专有虚拟机"},{"parent":"7eb639aee4b7","children":[],"id":"aebf179ef7c9","title":"运行于Azul Systems公司的专有硬件Vega系统上的虚拟机"},{"parent":"7eb639aee4b7","children":[],"id":"246f50be5f36","title":"每个实例可以管理至少数十个CPU和数百GB内存的硬件资源，并提供在巨大内存范围内实现可控的GC时间的垃圾收集器，专有硬件优化的线程调度等优秀特性"},{"parent":"7eb639aee4b7","children":[],"id":"6e13fb604943","title":"2010年，发布自己的Zing JVM，可以在通用X86平台上提供接近于vega系统的特性"}],"id":"7eb639aee4b7","title":"Azul VM"},{"parent":"a2ca337a0f5d","children":[{"parent":"989e1cd8355e","children":[],"id":"bfd427bc12bb","title":"BEA公司开发的，运行在自家Hypervisor系统上"},{"parent":"989e1cd8355e","children":[],"id":"08750b2bb3e8","title":"不需要操作系统支持，本身实现了一个专用操作系统的必要功能，如线程调度、文件系统、网络支持等"},{"parent":"989e1cd8355e","children":[],"id":"fe9bb4a516b2","title":"随着JRockit虚拟机终止开发，Liquid VM项目也停止了"}],"id":"989e1cd8355e","title":"Liquid VM"},{"parent":"a2ca337a0f5d","children":[{"parent":"c66ad6ff2148","children":[],"id":"6f529e1b7c2a","title":"JDK1.5,1.6兼容"},{"parent":"c66ad6ff2148","children":[],"id":"b1c3795ff7ab","title":"IBM和Intel联合开发的开源JVM，2011年退役"},{"parent":"c66ad6ff2148","children":[],"id":"2a8491a1cc50","title":"Java类库代码吸纳进了Android SDK"}],"id":"c66ad6ff2148","title":"Apache Harmony"},{"parent":"a2ca337a0f5d","children":[{"parent":"b5d2d64337a2","children":[],"id":"86b15a8c95e3","title":"只能在Windows平台运行，xp系统中不用了。"}],"collapsed":false,"id":"b5d2d64337a2","title":"Microsoft JVM"},{"parent":"a2ca337a0f5d","children":[{"parent":"636a9c83e5c2","children":[],"id":"6c467bb6cd9c","title":"基于OpenJDK开发了自己的定制版本AlibabaJDK"},{"parent":"636a9c83e5c2","children":[],"id":"860b419f0b16","title":"深度定制且开源的高性能服务器版JAVA虚拟机"},{"parent":"636a9c83e5c2","children":[],"id":"aa2dae6c9883","title":"GCIH：GC invisible heap，将生命周期较长的Java对象从heap中已到heap之外，并且GC不能管理GCIH内部的Java对象，以此达到降低GC的回收频率和提升GC的回收效率"},{"parent":"636a9c83e5c2","children":[],"id":"da835c1fc9f8","title":"GCIH中的对象还能够在多个JAVA虚拟机进程中实现共享"},{"parent":"636a9c83e5c2","children":[],"id":"f122930962bb","title":"使用crc32指令实现JVM intrinsic降低JNI的调用开销"},{"parent":"636a9c83e5c2","children":[],"id":"842f4037db37","title":"针对大数据场景的ZenGC"},{"parent":"636a9c83e5c2","children":[],"id":"75e60be3f847","title":"在阿里产品上性能高，硬件严重依赖intel的CPU，损失了兼容性，但是提高了性能"},{"parent":"636a9c83e5c2","children":[],"id":"de83a701f5fd","title":"淘宝、天猫上线，把oracle官方JVM版本全部替换"}],"id":"636a9c83e5c2","title":"TaobaoJVM"},{"parent":"a2ca337a0f5d","children":[{"parent":"0784ef981c06","children":[],"id":"5c917d6ab6c1","title":"谷歌开发，应用于Android系统，安卓2.2提供了JIT，发展迅猛"},{"parent":"0784ef981c06","children":[],"id":"664a231b6683","title":"只能称作虚拟机，不能称作Java虚拟机，没有遵循Java虚拟机规范"},{"parent":"0784ef981c06","children":[],"id":"bbf17b493ed6","title":"不能直接执行Java的Class文件"},{"parent":"0784ef981c06","children":[],"id":"a0fecca5d323","title":"基于寄存器架构，不是jvm的栈架构"},{"parent":"0784ef981c06","children":[],"id":"7f6ea2c8f3b5","title":"执行的是编译后的dex文件，执行效率比较高"},{"parent":"0784ef981c06","children":[],"id":"8b146aabc8a7","title":"安卓5.0使用支持提前编译AOT的ART VM替换Dalvik VM"}],"id":"0784ef981c06","title":"Dalvik VM"},{"parent":"a2ca337a0f5d","children":[{"parent":"5677f2b510d7","children":[],"id":"67ee992c90a7","title":"2018年4月，Oracle labs公开了GraalVM。"},{"parent":"5677f2b510d7","children":[],"id":"c7e00cc6b374","title":"跨语言全栈虚拟机，可以作为任何语言的运行平台使用"}],"id":"5677f2b510d7","title":"Grall VM"}],"id":"a2ca337a0f5d","title":"JVM发展历程"}],"collapsed":true,"id":"010b308004b0","title":"JVM与Java体系结构","summaries":[]},{"parent":"root","lineStyle":{"randomLineColor":"#02ACF4"},"children":[{"parent":"30f15512151b","children":[{"parent":"4516cb07ac1c","children":[],"id":"0f0a0c34155a","title":"负责从文件系统或者网络中加载Class文件，Class文件开头有特定标识，魔术，咖啡杯壁"},{"parent":"4516cb07ac1c","children":[],"id":"7cfe16cba296","title":"Classloader只负责class文件的加载，至于是否可运行，则由执行引擎决定"},{"parent":"4516cb07ac1c","children":[{"parent":"0c8ceef0855c","children":[],"id":"abcef6ac447b","title":"常量池运行时加载到内存中，即运行时常量池"}],"id":"0c8ceef0855c","title":"加载的类信息存放于称为方法区的内存空间，除了类信息，方法区还会存放运行时常量池信息，还可能包括字符串字面量和数字常量"}],"id":"4516cb07ac1c","title":"作用"},{"parent":"30f15512151b","children":[{"parent":"7c631289e0c4","image":{"w":900,"h":601.6519823788547,"url":"http://cdn.processon.com/5ed59ae8e401fd1919f9b2bb?e=1591060728&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:1zyQitPhEYAKA4GsWEwwZwgLWMk="},"children":[],"id":"46eedafde1a8","title":"截图"}],"id":"7c631289e0c4","title":"角色"},{"parent":"30f15512151b","children":[{"parent":"c87fad3334b1","children":[{"parent":"2a9e767008a3","children":[],"id":"8418918a0a54","title":"加载刚好是加载过程的一个阶段，二者意思不能混淆"},{"parent":"2a9e767008a3","children":[{"parent":"01b2ee39e38c","children":[],"id":"79aff1030dab","title":"本地系统获取"},{"parent":"01b2ee39e38c","children":[],"id":"f8d7d74dd8ad","title":"网络获取，Web Applet"},{"parent":"01b2ee39e38c","children":[],"id":"ec0f9d287e12","title":"zip压缩包获取，jar，war"},{"parent":"01b2ee39e38c","children":[],"id":"fb2417041dd5","title":"运行时计算生成，动态代理"},{"parent":"01b2ee39e38c","children":[],"id":"7e881f136056","title":"有其他文件生成，jsp"},{"parent":"01b2ee39e38c","children":[],"id":"27ca014b6519","title":"专有数据库提取.class文件，比较少见"},{"parent":"01b2ee39e38c","children":[],"id":"5ff81052eaa0","title":"加密文件中获取，防止Class文件被反编译的保护措施"}],"id":"01b2ee39e38c","title":"通过一个类的全限定名获取定义此类的二进制字节流"},{"parent":"2a9e767008a3","children":[],"id":"7092e5dfac79","title":"将这个字节流所代表的的静态存储结果转化为方法区的运行时数据结构"},{"parent":"2a9e767008a3","children":[],"id":"192bdc051df0","title":"在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据访问入口"}],"id":"2a9e767008a3","title":"加载"},{"parent":"c87fad3334b1","children":[{"parent":"4bdf86678996","children":[{"parent":"6df908a05c1d","children":[{"parent":"4e219e4f4918","children":[],"id":"2f32b8990522","title":"确保Class文件的字节流中包含信息符合当前虚拟机要求，保证被加载类的正确性，不会危害虚拟机自身安全"}],"id":"4e219e4f4918","title":"目的"},{"parent":"6df908a05c1d","children":[{"parent":"a72a109d3a09","children":[{"parent":"a9de65f8cee4","children":[],"id":"fd56cfd4c890","title":"CA FE BA BE(魔数，Java虚拟机识别)"},{"parent":"a9de65f8cee4","children":[],"id":"87c05fbe25a0","title":"主次版本号"},{"parent":"a9de65f8cee4","children":[],"id":"bd185373f49b","title":"常量池的常量中是否有不被支持的常量类型"},{"parent":"a9de65f8cee4","children":[],"id":"3434f11cc4c9","title":"指向常量的各种索引值中是否有指向不存在的常量或不符合类型的常量"}],"id":"a9de65f8cee4","title":"文件格式验证"},{"parent":"a72a109d3a09","children":[{"parent":"a17451bf1dbb","children":[],"id":"a2f198241b9d","title":"对字节码描述的信息进行语义分析，保证描述符合Java规范"},{"parent":"a17451bf1dbb","children":[],"id":"f77061e2a7b7","title":"类是否有父类，除了Object之外，所有的类都应该有父类"},{"parent":"a17451bf1dbb","children":[],"id":"2ac20ae5a932","title":"类的父类是否继承了不允许被继承的类（被final修饰的类）"},{"parent":"a17451bf1dbb","children":[],"id":"b12e87eae475","title":"如果这个类不是 抽象类，是否实现了其父类或接口中要求实现的所有方法。"},{"parent":"a17451bf1dbb","children":[],"id":"5fa4a6e3a98b","title":"类的字段，方法是否与父类的产生矛盾。例如方法参数都一样，返回值不同"}],"id":"a17451bf1dbb","title":"元数据验证"},{"parent":"a72a109d3a09","children":[{"parent":"7d54b904defd","children":[],"id":"149bc9b4f4d3","title":"通过数据流分析和控制流分析，确定程序语义是合法的，符合逻辑的。"},{"parent":"7d54b904defd","children":[],"id":"48a52e31b8b6","title":"对类的方法体，进行校验分析，保证在运行时不会做出危害虚拟机的行为"},{"parent":"7d54b904defd","children":[],"id":"5827bd2ea14a","title":"保证任意时刻操作数栈的数据类型与指令代码序列都能配合工作，不会出现类似于在操作数栈放了一个int类型的数据，使用时却按照long类型加载到本地变量表中的情况。"},{"parent":"7d54b904defd","children":[],"id":"d94242381d4e","title":"保障任何跳转指令都不会跳转到方法体之外的字节码指令上。"}],"id":"7d54b904defd","title":"字节码验证"},{"parent":"a72a109d3a09","children":[{"parent":"04b16d886baf","children":[],"id":"50c80dc8e064","title":"通过字符串描述的全限定名是否能找到对应的类"},{"parent":"04b16d886baf","children":[],"id":"7ee55d9400de","title":"符号引用中的类、字段、方法的可访问性是否可被当前类访问"}],"id":"04b16d886baf","title":"符号引用验证"}],"id":"a72a109d3a09","title":"四种验证"}],"id":"6df908a05c1d","title":"验证"},{"parent":"4bdf86678996","children":[{"parent":"5b5d07de5618","children":[{"image":{"w":848,"h":242,"url":"http://cdn.processon.com/5ed8367ae401fd6919543c27?e=1591231626&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:axA5MPjBV6XNVJX7iP1VdtqbYq0="},"parent":"e4fe89fe7f2c","children":[],"id":"62d2398121cb","title":"零值"}],"id":"e4fe89fe7f2c","title":"为类变量分配内存，并且设置该类变量的初始值，即零值"},{"parent":"5b5d07de5618","children":[],"id":"b8cab27a45b3","title":"不包含用final修饰的static，因为final在编译的时候就会分配了，准备阶段会显示初始化"},{"parent":"5b5d07de5618","children":[],"id":"6dee46c03017","title":"不会为实例变量分配初始化，类变量会分配在方法区中，实例变量会随着对象一起分配到Java堆中"}],"id":"5b5d07de5618","title":"准备"},{"parent":"4bdf86678996","children":[{"parent":"4ea78e8907e4","children":[],"id":"47f1a2eb8155","title":"将常量池内的符号引用转换为直接引用的过程"},{"parent":"4ea78e8907e4","children":[],"id":"01ccb7f8424d","title":"事实上，解析操作往往会伴随着JVM在执行完初始化之后再执行"},{"parent":"4ea78e8907e4","children":[],"id":"1714172e4325","title":"符号引用就是一组符号来描述引用的目标。符号引用的字面量形式明确定义在Java虚拟机规范的Class文件格式中"},{"parent":"4ea78e8907e4","children":[],"id":"e6e250fec7b7","title":"直接引用就是直接指向目标的指针，相对偏移量或一个间接定位到目标的句柄"},{"parent":"4ea78e8907e4","children":[],"id":"92865e678735","title":"解析动作主要针对类，或接口，字段，类方法，接口方法，方法类型等。对应常量池中的CONSTANT_Class_info、CONSTANT_Fieldref_info、CONSTANT_Methodref_info"}],"id":"4ea78e8907e4","title":"解析"}],"id":"4bdf86678996","title":"链接"},{"parent":"c87fad3334b1","children":[{"parent":"210b42969fae","children":[],"id":"27babe9b81ef","title":"初始化阶段是执行类构造器方法&lt;clinit&gt;()的过程"},{"parent":"210b42969fae","children":[{"parent":"ee192ea33c27","children":[],"id":"740931730c03","title":"非法的前向引用问题"},{"parent":"ee192ea33c27","children":[],"id":"5d2701125298","title":"如果没有类变量和静态代码块，也不会有clinit"}],"id":"ee192ea33c27","title":"此方法不需要定义，是javac编译器自动收集类中的所有类变量的赋值动作和静态代码块中的语句合并而来"},{"parent":"210b42969fae","children":[],"id":"16d5d8958832","title":"构造器方法中指令按照语句在源文中出现的顺序执行"},{"parent":"210b42969fae","children":[],"id":"0d7df6337a9d","title":"&lt;clinit&gt;()不同于类的构造器（关联：构造器是虚拟机视角下的&lt;init&gt;()）"},{"parent":"210b42969fae","children":[],"id":"09852fa5b15c","title":"若该类具有父类，JVM会保证子类的&lt;clinit&gt;()执行前，父类的&lt;clinit&gt;()已经执行完毕"},{"parent":"210b42969fae","children":[],"id":"eef4e6403b6f","title":"虚拟机必须保证一个类的&lt;clinit&gt;()方法在多线程下被同步加锁"}],"id":"210b42969fae","title":"初始化"},{"parent":"c87fad3334b1","children":[],"id":"ab6665a88147","title":"使用"},{"parent":"c87fad3334b1","children":[],"id":"ad0f13aa64f5","title":"卸载"},{"parent":"c87fad3334b1","children":[{"parent":"ca16710641b3","children":[],"id":"483d5a3dd8d2","title":"加载、验证、准备、初始化和卸载这五个阶段的顺序是确定的。"},{"parent":"ca16710641b3","children":[],"id":"3c053bc4e14d","title":"解析阶段不一定，在某些情况下可以在初始化阶段之后再开始，为了支持Java语言的运行时绑定特性（也称为动态绑定或晚期绑定）"},{"parent":"ca16710641b3","children":[{"parent":"2c2e6eea10dd","children":[{"parent":"27a61257bcae","children":[],"id":"e3cd5c32df6e","title":"使用new关键字实例化对象"},{"parent":"27a61257bcae","children":[],"id":"769ce7c2b597","title":"读取或设置一个类型的静态字段（final修饰已在编译期将结果放入常量池的静态字段除外）"},{"parent":"27a61257bcae","children":[],"id":"864d34555ec3","title":"调用一个类型的静态方法的时候"}],"id":"27a61257bcae","title":"1、遇到new,getstatic，putstatic或invokestatic这四条字节码指令时。"},{"parent":"2c2e6eea10dd","children":[],"id":"56d9df5117da","title":"2、对类型进行反射调用，如果类型没有经过初始化，则需要触发初始化"},{"parent":"2c2e6eea10dd","children":[],"id":"4584a0a3044b","title":"3、初始化类的时候，发现父类没有初始化，则先触发父类初始化"},{"parent":"2c2e6eea10dd","children":[],"id":"05516d5f7321","title":"4、虚拟机启动时，用户需要指定一个要执行的主类（包含main方法的那个类），虚拟机会初始化这个主类"},{"parent":"2c2e6eea10dd","children":[],"id":"979e21ef77ad","title":"5、只用JDK7中新加入的动态语言支持，如果一个java.lang.invoke.MethodHandler实例最后的解析结果为REF_getStatic,REF_putStatic,REF_invokeStatic，REF_newInvokeSpecial四种类型的方法句柄，并且这个方法对应的类没有进行初始化，则先触发其初始化"},{"parent":"2c2e6eea10dd","children":[],"id":"84cf3d607306","title":"6、当一个接口中定了JDK8新加入的默认方法时，如果这个接口的实现类发生了初始化，要先将接口进行初始化"}],"id":"2c2e6eea10dd","title":"Java虚拟机规范严格规定了，有且只有六种情况，必须立即对类进行初始化"},{"parent":"ca16710641b3","children":[],"id":"cb25b0fab5ea","title":"除了以上几种情况，其他使用类的方式被看做是对类的被动使用，都不会导致类的初始化"}],"id":"ca16710641b3","title":"补充说明："}],"id":"c87fad3334b1","title":"类的加载过程"},{"parent":"30f15512151b","children":[{"parent":"aca04fba4442","children":[{"parent":"871e788f7933","children":[{"parent":"880d20811236","image":{"w":891,"h":484,"url":"http://cdn.processon.com/5ed6e443f346fb6b02f6b148?e=1591145043&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:4_gU1ZBzIh2mYgtHE6VpBECYtUw="},"children":[],"id":"cc10d1d4aa85","title":"图示"},{"image":{"w":900,"h":460.17391304347825,"url":"http://cdn.processon.com/5ed6e496f346fb6b02f6b15a?e=1591145126&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:kc5XhCg8I18dyPIMmQLctJauEYs="},"parent":"880d20811236","children":[],"id":"235bd78608e0","title":"类"}],"id":"880d20811236","title":"概念上，将所有派生于抽象类ClassLoader的类加载器都划分为自定义加载器"}],"id":"871e788f7933","title":"引导类加载器和自定义加载器"},{"parent":"aca04fba4442","children":[{"image":{"w":900,"h":433.36267605633805,"url":"http://cdn.processon.com/5ed6e5940791291d5dbd8a8e?e=1591145381&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:3tM-YRj_5-W5sSKR5WxLfPBIQUk="},"parent":"25cade4e8d37","children":[],"id":"010bb6edb014","title":"截图"},{"parent":"25cade4e8d37","children":[],"id":"af73b57641ae","title":"对于用户来说定义器来说，默认使用系统类加载器进行加载"},{"parent":"25cade4e8d37","children":[],"id":"936c38e5880f","title":"Java的核心类库，使用引导类加载器进行加载"}],"id":"25cade4e8d37","title":"代码样例，获取类加载器"},{"parent":"aca04fba4442","children":[{"parent":"7ec8cd6391bb","children":[],"id":"6749e5728b23","title":"C/C++语言实现，嵌套JVM内部"},{"parent":"7ec8cd6391bb","children":[{"image":{"w":892,"h":122,"url":"http://cdn.processon.com/5ed6e8790791291d5dbd8b85?e=1591146122&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:i5VVukP4QJ7cFqaW9KqvTQyybYk="},"parent":"23d2cfbbe4a4","children":[],"id":"7a01cca6d2f9","title":"代码获取加载路径"}],"id":"23d2cfbbe4a4","title":"用来加载Java核心类库，rt.jar,resources.jar,sun.boot.class.path路径下的内容"},{"parent":"7ec8cd6391bb","children":[],"id":"5a90574409f6","title":"并不继承java.lang.ClassLoader，没有父加载器"},{"parent":"7ec8cd6391bb","children":[],"id":"61b20b0db51d","title":"加载扩展类和应用程序类加载器，并指定为他们的父类加载器"},{"parent":"7ec8cd6391bb","children":[],"id":"a5a2f5649183","title":"出于安全考虑，Bootstrap启动类加载器只加载包名为java\\javax\\sun等开头的类"}],"id":"7ec8cd6391bb","title":"启动类加载器"},{"parent":"aca04fba4442","children":[{"parent":"2c27602fa587","children":[],"id":"d417b323c73c","title":"Java语言编写，由sun.misc.Launcher$ExtClassLoader实现"},{"parent":"2c27602fa587","children":[],"id":"f53412078e3d","title":"派生于ClassLoader类"},{"parent":"2c27602fa587","children":[],"id":"6c308f9e0371","title":"父类加载器为启动类加载器"},{"parent":"2c27602fa587","children":[{"image":{"w":769,"h":212,"url":"http://cdn.processon.com/5ed6e8e76376896c9ad50b77?e=1591146231&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:U8T5x-iPcN2ZiPv_-j3WLFe6fx4="},"parent":"57c4b1f9db2b","children":[],"id":"4dc5f786071e","title":"代码"}],"id":"57c4b1f9db2b","title":"从java.ext.dirs系统属性所指定的目录中加载类库，或从jre/lib/ext子目录下加载类库"}],"id":"2c27602fa587","title":"扩展类加载器"},{"parent":"aca04fba4442","children":[{"parent":"1e0a3edede8b","children":[],"id":"b4e785032730","title":"Java语言编写，由sun.misc.Launcher$AppClassLoader实现"},{"parent":"1e0a3edede8b","children":[],"id":"66efe1c0d0fd","title":"派生于ClassLoader类"},{"parent":"1e0a3edede8b","children":[],"id":"77168121a67a","title":"父类加载器为扩展类加载器"},{"parent":"1e0a3edede8b","children":[],"id":"03ce80e3c3e0","title":"负责加载环境变量classpath或系统属性java.class.path指定路径下的类库"},{"parent":"1e0a3edede8b","children":[],"id":"14e2e819ea36","title":"该类加载器是程序中默认的类加载器，一般来说，Java应用的类都是由它来完成加载"},{"parent":"1e0a3edede8b","children":[],"id":"c74bb38c71a3","title":"通过ClassLoader#getSystemClassLoader（）方法可以后去到改类加载器"}],"id":"1e0a3edede8b","title":"应用程序类加载器（系统类加载器）"},{"parent":"aca04fba4442","children":[{"parent":"b862b6c8ce1f","children":[{"parent":"7b9ea5b4242b","children":[{"parent":"081d83fcebb3","children":[],"id":"ed2c8ea4f262","title":"例如使中间件的Jar包与应用程序Jar包不冲突"}],"id":"081d83fcebb3","title":"隔离加载类"},{"parent":"7b9ea5b4242b","children":[{"parent":"a067a35bc534","children":[],"id":"e90d4b6917a3","title":"启动类加载器必须使用，其他可以根据需要自定义加载"}],"id":"a067a35bc534","title":"修改类加载的方式"},{"parent":"7b9ea5b4242b","children":[],"id":"1ac1643e30cd","title":"扩展加载源"},{"parent":"7b9ea5b4242b","children":[{"parent":"87253f38aebf","children":[],"id":"0f16a9358ab1","title":"对字节码进行加密，自定义类加载器实现解密"}],"id":"87253f38aebf","title":"防止源码泄露"}],"id":"7b9ea5b4242b","title":"为什么要用自定义类加载器"},{"parent":"b862b6c8ce1f","children":[{"parent":"f30c5e42ec7b","children":[],"id":"ba03e4801d65","title":"继承抽象类java.lang.ClassLoader类的方式，实现自己的类加载器"},{"parent":"f30c5e42ec7b","children":[],"id":"4ef72df96eb2","title":"1.2之前，继承并重写loadClass方法，"},{"parent":"f30c5e42ec7b","children":[],"id":"4a457d394729","title":"1.2之后，建议把自定义的类加载逻辑写在findClass()方法中"},{"parent":"f30c5e42ec7b","children":[],"id":"9fbee8832c8b","title":"如果没有太过复杂的需求，可以直接继承URLClassLoader类，可以避免自己编写findClass（）方法，及其获取字节码流的方式，使自定义类加载器编写更加简洁"}],"id":"f30c5e42ec7b","title":"实现步骤"}],"id":"b862b6c8ce1f","title":"用户自定义类加载器"},{"parent":"aca04fba4442","children":[{"parent":"55945c449a61","children":[],"id":"da6d1986cc43","title":"是一个抽象类，除了启动类加载器，其他类加载器都继承自他"},{"parent":"55945c449a61","image":{"w":900,"h":262.152133580705,"url":"http://cdn.processon.com/5ed6f04c5653bb1954973143?e=1591148125&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:qsJEjxVxKgvyv5T5XVKV8aC0kHs="},"children":[],"id":"5217e1d17bcd","title":"<br>"}],"id":"55945c449a61","title":"关于ClassLoader"}],"id":"aca04fba4442","title":"类加载器分类"},{"parent":"30f15512151b","children":[{"parent":"9b7c73819cd6","children":[{"parent":"28297178fdaa","children":[{"parent":"7ac6624c080f","image":{"w":656,"h":531,"url":"http://cdn.processon.com/5ed83772f346fb1712de0122?e=1591231874&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:QSZ9W-Q6ETf5rUXvqbRi9VGb5yc="},"children":[],"id":"cb9ec40420c3","title":"截图"}],"id":"7ac6624c080f","title":"Java虚拟机对Class文件采用的是按需加载，而且加载class文件时，Java虚拟机使用的是双亲委派模式，即把请求交由父类处理，它是异种任务委派模式"},{"parent":"28297178fdaa","children":[],"id":"7b52fbbde9c5","title":"1、如果一个类加载器收到了类加载请求，它并不会自己先去加载。而是把这个请求委托给父类的加载器去执行"},{"parent":"28297178fdaa","children":[],"id":"ee972b69c4eb","title":"2、如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将达到顶层的启动类加载器"},{"parent":"28297178fdaa","children":[],"id":"af9b93c2cf76","title":"3、如果父类的加载器可以完成类加载任务，就成功返回，倘若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载，这就是双亲委派模式"},{"parent":"28297178fdaa","children":[],"id":"f55b400a66b6","title":"4、原创整理不易，还请扫码，运行时数据区详图关注支持"}],"id":"28297178fdaa","title":"原理"},{"parent":"9b7c73819cd6","children":[{"parent":"840349107a02","children":[],"id":"0857f20a99f5","title":"避免类的重复加载"},{"parent":"840349107a02","children":[],"id":"294340992804","title":"保护程序安全，防止核心API被篡改"}],"id":"840349107a02","title":"优势"},{"parent":"9b7c73819cd6","children":[{"parent":"714f032677b4","children":[],"id":"e3fdb3252f18","title":"保证对Java核心源代码的保护"}],"id":"714f032677b4","title":"沙箱安全机制"}],"id":"9b7c73819cd6","title":"双亲委派"},{"parent":"30f15512151b","children":[{"parent":"893ed3da0cec","children":[{"parent":"9cda9cae6d16","children":[],"id":"85cd21173827","title":"类的完整类名必须一致，包括包名"},{"parent":"9cda9cae6d16","children":[],"id":"abf139c487ea","title":"加载这个类的ClassLoader必须相同"}],"id":"9cda9cae6d16","title":"在JVM中表示两个class对象，是否为同一个类存在两个必要条件<br>"},{"parent":"893ed3da0cec","children":[],"id":"2e338f705312","title":"JVM必须知道一个类型是由启动类加载器加载的，还是由用户类加载器加载的。如果是用户类加载器加载的，JVM会将这个类加载器的一个引用作为类型信息的一部分，保存到方法区中。"}],"id":"893ed3da0cec","title":"补充"}],"collapsed":true,"id":"30f15512151b","title":"类加载子系统"},{"parent":"root","lineStyle":{"randomLineColor":"#80BA4C"},"children":[{"parent":"110dfb8859a1","children":[],"id":"4a110b59d400","title":"不同的JVM对于内存的划分方式和管理机制存在部分差异，后续针对HotSpot虚拟机进行介绍"},{"parent":"110dfb8859a1","children":[{"image":{"w":890,"h":809,"url":"http://cdn.processon.com/5ed9f76ff346fb1712e271eb?e=1591346559&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:hKMLh2n8wpCUC3w7NrAw_Nq5fYE="},"parent":"9abb374a0b18","children":[],"id":"50964dfdf5a8","title":""}],"collapsed":false,"id":"9abb374a0b18","title":"截图"}],"collapsed":true,"id":"110dfb8859a1","title":"运行时数据区概述"},{"parent":"root","lineStyle":{"randomLineColor":"#FD5155"},"children":[{"parent":"9ed6db6654ba","children":[],"id":"9ecd472fd19a","title":"运行时数据区中唯一不会出现OOM的区域，没有垃圾回收"},{"parent":"9ed6db6654ba","children":[{"parent":"2c6941c1c7a0","children":[],"id":"2727584a0607","title":"为了线程切换后能恢复到正确的位置"}],"id":"2c6941c1c7a0","title":"当前线程所执行的字节码的行号指示器"},{"parent":"9ed6db6654ba","children":[],"id":"271625ca4e86","title":"每个线程有一个独立的程序计数器，线程之间互不影响。"},{"parent":"9ed6db6654ba","children":[],"id":"a0993cecdde3","title":"如果线程执行的Java方法，则计数器记录正在执行的虚拟机字节码的指令的地址"},{"parent":"9ed6db6654ba","children":[],"id":"51bd5e72aa3c","title":"如果正在执行的本地方法，这个计数器值则应为空。（undefined）"}],"collapsed":true,"id":"9ed6db6654ba","title":"程序计数器（PC寄存器）"},{"parent":"root","lineStyle":{"randomLineColor":"#7549C5"},"children":[{"parent":"8fb336cc1522","children":[{"parent":"947166c29b7d","children":[],"id":"1068b52014b0","title":"栈是运行时的单位，而堆是存储的单位，栈解决程序如何执行，如何处理数据。堆解决的是数据存储问题，即数据怎么放，放在哪里。"}],"id":"947166c29b7d","title":"内存中的栈与堆"},{"parent":"8fb336cc1522","children":[{"parent":"07542583f899","children":[],"id":"f0a29233eb26","title":"Java虚拟机栈，早起也叫Java栈，每个线程创建时都会创建一个虚拟机栈，内部保存一个个栈帧，对应着一次次的Java方法调用"},{"parent":"07542583f899","children":[],"id":"4da32e3195ab","title":"生命周期和线程的一致"},{"parent":"07542583f899","children":[{"parent":"11ee050d0731","children":[],"id":"ae51f2e903e6","title":"局部变量&nbsp; vs&nbsp; 成员变量"},{"parent":"11ee050d0731","children":[],"id":"40506b1ff55f","title":"基本数据类型&nbsp; &nbsp;VS 引用类型变量（类，数组，接口）"}],"id":"11ee050d0731","title":"主管Java程序的运行，保存方法的局部变量（8种基本数据类型，对象的引用地址），部分结果，并参与方法的调用和返回。"}],"id":"07542583f899","title":"基本内容"},{"parent":"8fb336cc1522","children":[{"parent":"8135a46fa2bc","children":[],"id":"623a4b9d8776","title":"快速有效的存储方式，访问速度仅次于程序计数器"},{"parent":"8135a46fa2bc","children":[{"parent":"569d41b8e699","children":[],"id":"fafeac019687","title":"每个方法执行，伴随着进栈（入栈，压栈）"},{"parent":"569d41b8e699","children":[],"id":"2913a5542ba8","title":"执行结束的出栈"}],"id":"569d41b8e699","title":"JVM直接对JAVA栈的操作只有两个"},{"parent":"8135a46fa2bc","children":[{"parent":"18e1af1a22dd","children":[],"id":"0907bd4d7dad","title":"Java栈大小是动态或者固定不变的。如果是动态扩展，无法申请到足够内存OOM，如果是固定，线程请求的栈容量超过固定值，则StackOverflowError"}],"id":"18e1af1a22dd","title":"栈不存在垃圾回收，但是存在OOM"},{"parent":"8135a46fa2bc","children":[{"parent":"a334268c51c8","image":{"w":900,"h":396.31083202511775,"url":"http://cdn.processon.com/5ed8477a7d9c086636152d8a?e=1591235978&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:rKAJlOp4GDDRP5g_jjQ9cPl9bjE="},"children":[],"id":"f5fac8677d1b","title":"截图"}],"id":"a334268c51c8","title":"使用-Xss (记忆：站着做一个小手术，栈Xss)，设置线程的最大栈空间"}],"id":"8135a46fa2bc","title":"优点"},{"parent":"8fb336cc1522","children":[{"parent":"8a14542081bb","children":[],"id":"ece5ead6f2a1","title":"每个线程都有自己的栈，栈中的数据以栈帧格式存储"},{"parent":"8a14542081bb","children":[],"id":"9a7c35f784f4","title":"线程上正在执行的每个方法都各自对应一个栈帧"},{"parent":"8a14542081bb","children":[],"id":"53b2b8ac0924","title":"栈帧是一个内存区块，是一个数据集，维系着方法执行过程中的各个数据信息"},{"parent":"8a14542081bb","children":[],"id":"eb1b5dc6eb85","title":"先进后出，后进先出"},{"parent":"8a14542081bb","children":[],"id":"9a1f96ffb6dc","title":"一条活动的线程中，一个时间点上，只会有一个活动的栈帧。只有当前正在执行的方法的栈顶栈帧是有效的，这个称为当前栈帧，对应方法是当前方法，对应类是当前类"},{"parent":"8a14542081bb","children":[],"id":"80fcc48e7dda","title":"执行引擎运行的所有字节码指令只针对当前栈帧进行操作"},{"parent":"8a14542081bb","children":[],"id":"50a737f6056a","title":"如果方法中调用了其他方法，对应的新的栈帧会被创建出来，放在顶端，成为新的当前帧"}],"id":"8a14542081bb","title":"栈的存储单位"},{"parent":"8fb336cc1522","children":[{"parent":"4c1e57339474","children":[],"id":"aa0e4e54584e","title":"不同线程中包含的栈帧不允许存在相互引用。"},{"parent":"4c1e57339474","children":[],"id":"5396cf8e94ad","title":"当前方法调用了其他方法，方法返回之际，当前栈帧会传回此方法的执行结果给前一个栈帧，接着虚拟机会丢弃当前栈帧，使得前一个栈帧重新成为新的栈帧。"},{"parent":"4c1e57339474","children":[{"parent":"e43159622ae1","children":[],"id":"2a08b2f35d16","title":"一种是正常的函数返回，使用return指令"},{"parent":"e43159622ae1","children":[],"id":"77bb05ed7f01","title":"另外一种是抛出异常，不管哪种方式，都会导致栈帧被弹出"}],"id":"e43159622ae1","title":"Java方法有两种返回方式"}],"id":"4c1e57339474","title":"栈运行原理"},{"parent":"8fb336cc1522","children":[{"parent":"50920e8753cf","children":[{"parent":"f070e9d42a34","children":[],"id":"9382ae40e6e9","title":"定义为一个数字数组，主要用于存储方法参数，定义在方法体内部的局部变量，数据类型包括各类基本数据类型，对象引用，以及return address类型"},{"parent":"f070e9d42a34","children":[],"id":"827bb5f2d9d1","title":"局部变量表建立在线程的栈上，是线程私有的，因此不存在数据安全问题"},{"parent":"f070e9d42a34","children":[],"id":"da942ad64f8e","title":"局部变量表容量大小是在编译期确定下来的"},{"parent":"f070e9d42a34","children":[],"id":"174dd08eeb4f","title":"局部变量表存放编译期可知的各种基本数据类型（8种），引用类型（reference）,return address 类型"},{"parent":"f070e9d42a34","children":[{"parent":"fd0469ee35ae","children":[],"id":"c6ca56735d26","title":"32位占用一个slot，64位类型（long和double）占用两个slot"}],"id":"fd0469ee35ae","title":"最基本的存储单元是slot"},{"parent":"f070e9d42a34","children":[],"id":"ffcfe4c6f216","title":"局部变量表中的变量只有在当前方法调用中有效，虚拟机通过使用局部变量表完成参数值到参数变量列表的传递过程。"},{"parent":"f070e9d42a34","children":[],"id":"3e339544c72a","title":"方法调用结束后，随着方法栈帧的销毁，局部变量表也会随之销毁"},{"parent":"f070e9d42a34","children":[{"parent":"fde7988496d3","children":[],"id":"ba96db994ece","title":"JVM虚拟机会为局部变量表中的每个Slot都分配一个访问索引，通过这个索引即可成功访问到局部变量表中指定的局部变量值"},{"parent":"fde7988496d3","children":[{"image":{"w":453,"h":482,"url":"http://cdn.processon.com/5ed986f4f346fb1712e10524?e=1591317764&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:YE_nIZgKRBb0EvHJFHuHyMgDQtQ="},"parent":"2e3bce4828de","children":[],"id":"5d82784e1cbb","title":"截图<br>"},{"image":{"w":900,"h":310.4968509447166,"url":"http://cdn.processon.com/5ed987a11e0853199b509ad0?e=1591317937&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:ZgxAdvwmcJNyzQzoYr81vcZ1FaU="},"parent":"2e3bce4828de","children":[],"id":"f73eb67e6ad2","title":"this截图"}],"id":"2e3bce4828de","title":"如果当前帧是由构造方法或者实例方法创建的，那么该对象引用this，会存放在index为0的slot处，其余的参数表顺序继续排列"},{"parent":"fde7988496d3","children":[],"id":"a5b411a7a0fb","title":"栈帧中的局部变量表中的槽位是可以重复的，如果一个局部变量过了其作用域，那么其作用域之后申明的新的局部变量就有可能会复用过期局部变量的槽位，从而达到节省资源的目的"}],"id":"fde7988496d3","title":"关于Slot的理解"},{"parent":"f070e9d42a34","children":[{"parent":"ed471dc34bd9","children":[{"parent":"47c5308293a7","children":[{"parent":"e6a859a569ab","children":[],"id":"a5121aebf87b","title":"基本数据类型"},{"parent":"e6a859a569ab","children":[],"id":"2a2961ada73e","title":"引用数据类型"}],"id":"e6a859a569ab","title":"按照数据类型分"},{"parent":"47c5308293a7","children":[{"parent":"5957d4da0c54","children":[{"parent":"5c60ca0771b6","children":[{"parent":"9d74518b4219","children":[],"id":"9e2d0649abd9","title":"链接的准备阶段给类变量默认赋值，初始化阶段显示赋值，即静态代码块赋值"}],"id":"9d74518b4219","title":"类变量"},{"parent":"5c60ca0771b6","children":[{"parent":"a112e2eb7fcd","children":[],"id":"a5238154ce4d","title":"随着对象的创建，会在堆空间分配实例变量空间，并进行默认赋值"}],"id":"a112e2eb7fcd","title":"实例变量"}],"id":"5c60ca0771b6","title":"成员变量，在使用前经历过初始化过程"},{"parent":"5957d4da0c54","children":[{"parent":"25bd2270699f","children":[],"id":"c8a60a8081b5","title":"在使用前，必须进显式赋值，否则编译不通过"}],"id":"25bd2270699f","title":"局部变量"}],"id":"5957d4da0c54","title":"按照声明的位置"}],"id":"47c5308293a7","title":"变量的分类"}],"id":"ed471dc34bd9","title":"静态变量与局部变量对比及小结"},{"parent":"f070e9d42a34","children":[{"parent":"e134d3161aac","children":[],"id":"45e77c698e86","title":"在栈帧中，与性能调优关系最密切的部分，就是局部变量表，方法执行时，虚拟机使用局部变量表完成方法的传递"},{"parent":"e134d3161aac","children":[],"id":"42f168952fdb","title":"局部变量表中的变量也是重要的垃圾回收根节点，只要被局部变量表中直接或间接引用的对象都不会被回收"}],"id":"e134d3161aac","title":"补充："}],"id":"f070e9d42a34","title":"局部变量表"},{"parent":"50920e8753cf","children":[{"parent":"a13ea3fdfbc3","children":[{"parent":"792e3da622c4","image":{"w":643,"h":211,"url":"http://cdn.processon.com/5ed98b6b6376891862184dd7?e=1591318907&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:HOXL24aD0riV03MrUP0vx8p53F4="},"children":[],"id":"dda64518441e","title":"截图"}],"id":"792e3da622c4","title":"在方法执行的过程中，根据字节码指令，往栈中写入数据或提取数据，即入栈/出栈"},{"parent":"a13ea3fdfbc3","children":[],"id":"a176c599c1e9","title":"如果被调用方法带有返回值的话，其返回值将会被压入当前栈帧的操作数栈中，并更新程序计数器中下一条需要执行的字节码指令"},{"parent":"a13ea3fdfbc3","children":[],"id":"dfc2de12da6f","title":"Java虚拟机的解释引擎是基于栈的执行引擎，其中栈就是操作数栈"},{"parent":"a13ea3fdfbc3","children":[],"id":"0ebfc8138b0b","title":"主要用于保存计算过程的中间结果，同时作为计算过程中变量临时的存储空间"},{"parent":"a13ea3fdfbc3","children":[],"id":"ae60f22e3f0c","title":"当一个方法刚开始执行的时候，一个新的栈帧也会随之被创建出来，这个方法的操作数栈是空的"},{"parent":"a13ea3fdfbc3","children":[],"id":"1d9fe3bb9179","title":"每一个操作数栈会拥有一个明确的栈深度，用于存储数值，最大深度在编译期就定义好"},{"parent":"a13ea3fdfbc3","children":[],"id":"39a1446b504f","title":"栈中，32bit类型占用一个栈单位深度，64bit类型占用两个栈单位深度"},{"parent":"a13ea3fdfbc3","children":[],"id":"813c7f0eb945","title":"操作数栈并非采用访问索引方式进行数据访问，而是只能通过标准的入栈、出栈操作完成一次数据访问"},{"parent":"a13ea3fdfbc3","children":[{"parent":"220f9f2e7527","children":[],"id":"3c74a30cd689","title":"由于操作数是存储在内存中，频繁的进行内存读写操作影响执行速度，将栈顶元素全部缓存到物理CPU的寄存器中，依此降低对内存的读写次数，提升执行引擎的执行效率"}],"id":"220f9f2e7527","title":"栈顶缓存技术"}],"id":"a13ea3fdfbc3","title":"操作数栈"},{"parent":"50920e8753cf","children":[{"parent":"aa9d5e5422d0","children":[{"parent":"0f881c57ca13","children":[],"id":"e5e44c6a3888","title":"每一个栈帧内部都包含一个指向运行时常量池中，该帧所属方法的引用"},{"parent":"0f881c57ca13","children":[],"id":"5782e6a0e47a","title":"目的是为了支持当前方法的代码能够实现动态链接，比如invokedynamic指令"},{"parent":"0f881c57ca13","children":[],"id":"5a74c4a18e7b","title":"在java源文件被编译成字节码文件中时，所有的变量、方法引用都作为符号引用，保存在class文件的常量池中。"},{"parent":"0f881c57ca13","children":[],"id":"f4a7dcc8ea81","title":"描述一个方法调用了另外的其他方法时，就是通过常量池中指向方法的符号引用来表示的。"},{"parent":"0f881c57ca13","children":[],"id":"839a95d33489","title":"动态链接的作用就是为了将这些符号引用转换为调用方法的直接引用"},{"parent":"0f881c57ca13","children":[],"id":"c80377d293da","title":"原创整理不易，还请扫码JVM运行时数据区详图，谢谢支持"}],"id":"0f881c57ca13","title":"指向常量池的方法 引用"},{"parent":"aa9d5e5422d0","children":[{"parent":"f94c4fcfda7b","children":[],"id":"628ebce2cf04","title":"常量池在字节码文件中，运行时常量池，在运行时的方法区中"}],"id":"f94c4fcfda7b","title":"常量池、运行时常量池"}],"id":"aa9d5e5422d0","title":"动态链接"},{"parent":"50920e8753cf","children":[{"parent":"c010ea40ee77","children":[],"id":"e78cea4353fb","title":"存放调用该方法的pc寄存器的值"},{"parent":"c010ea40ee77","children":[{"parent":"959955a62e9e","children":[],"id":"eb7fc51ce8f3","title":"正常执行完成"},{"parent":"959955a62e9e","children":[],"id":"ce506cd551c5","title":"出现未处理异常，非正常退出"}],"id":"959955a62e9e","title":"方法的结束"},{"parent":"c010ea40ee77","children":[],"id":"093cb38bb641","title":"无论哪种方式退出，方法退出后，都会返回该方法被调用的位置。方法正常退出时，调用者的PC计数器的值作为返回地址，即调用该方法的指令的下一条指令的地址。"},{"parent":"c010ea40ee77","children":[],"id":"2a06531a36bf","title":"异常退出的，返回地址是通过异常表来确定，栈帧中一般不会保存这部分信息"},{"parent":"c010ea40ee77","children":[{"parent":"4fb009e7dc8d","children":[{"parent":"33b75ec50f34","children":[],"id":"333fc8f49d38","title":"ireturn返回值是boolean，byte，char，short，和int类型时使用"},{"parent":"33b75ec50f34","children":[],"id":"ed9496d5e4c5","title":"lreturn"},{"parent":"33b75ec50f34","children":[],"id":"998b7c05ff82","title":"dreturn"},{"parent":"33b75ec50f34","children":[{"parent":"8ccd23683759","children":[],"id":"e20cec81875a","title":"引用类型"}],"id":"8ccd23683759","title":"areturn"},{"parent":"33b75ec50f34","children":[],"id":"0fbba44bff88","title":"还有一个return指供声明为 void的方法、实例初始化方法、类和接口的初始化方法使用"}],"id":"33b75ec50f34","title":"返回指令包括"}],"id":"4fb009e7dc8d","title":"执行引擎遇到任意一个方法返回的字节码指令（return）,会有返回值传递给上层的方法调用者，简称正常完成出口"},{"parent":"c010ea40ee77","children":[],"id":"4b20559481ce","title":"本质上，方法的退出就是当前栈帧出栈的过程。此时需要恢复上层方法的局部变量表，操作数栈，将返回值压入调用者栈帧的操作数栈，设置PC寄存器值等，让调用者方法继续执行下去。"},{"parent":"c010ea40ee77","children":[],"id":"5a1c2213a413","title":"正常完成出口和异常完成出口的区别在于：通过异常完成出口退出的不会给他的上层调用者产生任何的返回值"}],"id":"c010ea40ee77","title":"方法返回地址"},{"parent":"50920e8753cf","children":[{"parent":"1c7bb2d35149","children":[],"id":"852f2a049b15","title":"允许携带与Java虚拟机实现相关的一些附加信息，例如对程序调试提供支持的信息。不确定有，可选情况"}],"id":"1c7bb2d35149","title":"一些附加信息"},{"parent":"50920e8753cf","children":[{"parent":"721800d935f2","children":[{"parent":"5ddbe128e7fa","children":[],"id":"f45b2d4d1969","title":"当一个字节码文件被装载进JVM内部时，如果被调用的目标方法在编译期可知，且运行时期间保持不变，这种情况下降调用方的符号引用转为直接引用的过程称为静态链接"}],"id":"5ddbe128e7fa","title":"静态链接"},{"parent":"721800d935f2","children":[{"parent":"e5330abc568c","children":[],"id":"a2bba46a982b","title":"如果被调用的方法无法再编译期被确定下来，只能在运行期将调用的方法的符号引用转为直接引用，这种引用转换过程具备动态性，因此被称为动态链接"}],"id":"e5330abc568c","title":"动态链接"},{"parent":"721800d935f2","children":[{"parent":"2ca634c7cb5a","children":[],"id":"88a3b0399726","title":"绑定是一个字段、方法、或者类在符号引用被替换为直接引用的过程。仅仅发生一次。"},{"parent":"2ca634c7cb5a","children":[{"parent":"06a020645a05","children":[],"id":"1c844b9b13c4","title":"被调用的目标方法如果再编译期可知，且运行期保持不变"}],"id":"06a020645a05","title":"早期绑定"},{"parent":"2ca634c7cb5a","children":[{"parent":"920e3a83a951","children":[],"id":"ddc386d427d6","title":"被调用的方法在编译期无法被确定，只能够在程序运行期根据实际的类型绑定相关的方法。"}],"id":"920e3a83a951","title":"晚期绑定"}],"id":"2ca634c7cb5a","title":"方法的绑定"},{"parent":"721800d935f2","children":[],"id":"ed090e83a7f8","title":"Java中任何一个普通方法都具备虚函数的特征（运行期确认，具备晚期绑定的特点），C++中则使用关键字virtual来显式定义"},{"parent":"721800d935f2","children":[],"id":"9d16e29630b5","title":"如果在java程序中，不希望某个方法拥有虚函数的特征，则可以使用关键字final来标记这个方法"},{"parent":"721800d935f2","children":[{"parent":"53a40bcb1770","children":[{"parent":"36219e889c9e","children":[],"id":"7cff1bdc2058","title":"如果方法在编译期就确定了具体的调用版本，则这个版本在运行时是不可变的。这样的方法称为非虚方法"},{"parent":"36219e889c9e","children":[],"id":"4ecf52e7e033","title":"静态方法，私有方法，final方法，实例构造器，父类方法都是非虚方法"}],"id":"36219e889c9e","title":"非虚方法"},{"parent":"53a40bcb1770","children":[],"id":"cdd7b4af34ae","title":"其他方法称为虚方法"}],"id":"53a40bcb1770","title":"虚方法和非虚方法"},{"parent":"721800d935f2","children":[{"parent":"c08dce3e2ec8","children":[{"parent":"7fea2347a3c5","children":[{"parent":"a8e546e293f7","children":[],"id":"72205e4372f8","title":"调用静态方法，解析阶段确定唯一方法版本"}],"id":"a8e546e293f7","title":"invokestatic"},{"parent":"7fea2347a3c5","children":[{"parent":"3adcb650f3a6","children":[],"id":"5f7d73cf76d3","title":"调用&lt;init&gt;方法，私有及父类方法，解析阶段确定唯一方法版本"}],"id":"3adcb650f3a6","title":"invokespecial"},{"parent":"7fea2347a3c5","children":[{"parent":"c042458f7036","children":[],"id":"4fea48926dc2","title":"调用所有虚方法"}],"id":"c042458f7036","title":"invokevirtual"},{"parent":"7fea2347a3c5","children":[{"parent":"13f8a5ab5223","children":[],"id":"95bdf0760ced","title":"调用接口方法"}],"id":"13f8a5ab5223","title":"invokeinterface"},{"parent":"7fea2347a3c5","children":[],"id":"6db5698869cc","title":"其中invokestatic指令和invokespecial指令调用的方法称为非虚方法，其余的（final修饰的除外）称为虚方法"}],"id":"7fea2347a3c5","title":"普通调用指令"},{"parent":"c08dce3e2ec8","children":[{"parent":"154fb33ef46b","children":[{"parent":"c81f3f7b2211","children":[],"id":"2caa870a243b","title":"动态解析出需要调用的方法，然后执行"}],"id":"c81f3f7b2211","title":"invokedynamic"},{"parent":"154fb33ef46b","children":[{"parent":"f812f203d15d","image":{"w":900,"h":476.72904800650934,"url":"http://cdn.processon.com/5eda13c1e0b34d413900dc10?e=1591353810&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:h5kRfdpT_AwoOvZtUu64IHAsoyY="},"children":[],"id":"3e8fdd0e8efb","title":"截图"}],"id":"f812f203d15d","title":"直到Java8的Lambda表达式的出现，invokedynamic指令的生成，在Java中才有了直接的生成方式"}],"id":"154fb33ef46b","title":"动态调用指令JDK1.7新增"},{"parent":"c08dce3e2ec8","children":[{"parent":"435848dd7943","children":[],"id":"c05ea9aa107d","title":"区别在于对类型的检查是编译器还是运行期，满足编译期就是静态类型语言，反之就是动态类型语言。"},{"parent":"435848dd7943","children":[],"id":"fc4b6c74657b","title":"Java是静态类型语言，动态调用指令增加了动态语言的特性"}],"id":"435848dd7943","title":"静态语言和动态语言"}],"id":"c08dce3e2ec8","title":"方法调用指令"},{"parent":"721800d935f2","children":[{"parent":"ec8f6fdfad01","children":[],"id":"3998fc2c998f","title":"找到操作数栈顶的第一个元素所执行的对象的实际类型，记做C"},{"parent":"ec8f6fdfad01","children":[],"id":"875c611ff2ce","title":"如果在类型C中找到与常量池中描述符和简单名称都相符的方法，则进行访问权限校验，如果通过则返回这个方法的直接引用，查找过程结束，如果不通过，则返回java.lang.IllegalAccessError异常"},{"parent":"ec8f6fdfad01","children":[],"id":"eb481cc8099b","title":"否则，按照继承关系从下往上依次对C的各个父类进行上一步的搜索和验证过程。"},{"parent":"ec8f6fdfad01","children":[],"id":"d32872695136","title":"如果始终没有找到合适的方法，则抛出java.lang.AbstractMethodError异常"}],"id":"ec8f6fdfad01","title":"方法重写的本质"},{"parent":"721800d935f2","children":[{"parent":"8d539b2fce59","children":[],"id":"8c7c223d22aa","title":"面向对象的编程中，会很频繁的使用动态分配，如果每次动态分配的过程都要重新在类的方法元数据中搜索合适的目标的话，就可能影响到执行效率，因此为了提高性能，JVM采用在类的方法区建立一个虚方法表，使用索引表来代替查找"},{"parent":"8d539b2fce59","children":[],"id":"bff1b3b88666","title":"每个类都有一个虚方法表，表中存放着各个方法的实际入口"},{"parent":"8d539b2fce59","children":[{"parent":"09c940f3fc54","image":{"w":900,"h":566.1290322580645,"url":"http://cdn.processon.com/5eda1bad7d9c0866361a2861?e=1591355838&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:xGK3q05kxmJql6QhQk8nYhynSr4="},"children":[],"id":"236c44fe63fd","title":"截图"}],"id":"09c940f3fc54","title":"虚方法表会在类加载的链接阶段被创建，并开始初始化，类的变量初始值准备完成之后，JVM会把该类的方法也初始化完毕"}],"id":"8d539b2fce59","title":"虚方法表"}],"id":"721800d935f2","title":"方法的调用"}],"id":"50920e8753cf","title":"栈的内部结构"}],"collapsed":false,"id":"8fb336cc1522","title":"虚拟机栈"},{"parent":"root","lineStyle":{"randomLineColor":"#F88A35"},"children":[{"parent":"16238a0bfc91","children":[{"parent":"d0dc476b4529","children":[],"id":"36b068239627","title":"简单讲，就是一个Java调用非Java代码的接口"}],"id":"d0dc476b4529","title":"什么是本地方法"},{"parent":"16238a0bfc91","children":[{"parent":"6f2538c3b73e","children":[{"parent":"ea0ef4801fb9","children":[],"id":"8dfff5124d96","title":"例如与操作系统底层或硬件交换信息时的情况"},{"parent":"ea0ef4801fb9","children":[],"id":"b0d2a03ab68c","title":"例如启动一个线程"}],"id":"ea0ef4801fb9","title":"与Java环境外交互"}],"id":"6f2538c3b73e","title":"为什么使用native method"}],"collapsed":false,"id":"16238a0bfc91","title":"本地方法接口"},{"parent":"root","lineStyle":{"randomLineColor":"#0FBAB0"},"children":[{"parent":"7cd3d67de857","children":[],"id":"73ac22bd5286","title":"Java虚拟机栈管理Java方法的调用，而本地方法栈用于管理本地方法的调用"},{"parent":"7cd3d67de857","children":[],"id":"8fe2dc096692","title":"本地方法栈，也是线程私有的。"},{"parent":"7cd3d67de857","children":[{"parent":"c2ab57ce05ff","children":[],"id":"a5300a0f7e2e","title":"内存溢出情况和Java虚拟机栈相同"}],"id":"c2ab57ce05ff","title":"允许被实现成固定或者是可动态扩展的内存大小。"},{"parent":"7cd3d67de857","children":[],"id":"a1962e25e996","title":"使用C语言实现"},{"parent":"7cd3d67de857","children":[],"id":"997f5622db4d","title":"具体做法是Native Method Stack 中登记native方法，在Execution Engine执行时加载到本地方法库"},{"parent":"7cd3d67de857","children":[],"id":"573628895323","title":"当某个线程调用一个本地方法时，就会进入一个全新，不受虚拟机限制的世界，它和虚拟机拥有同样的权限。"},{"parent":"7cd3d67de857","children":[],"id":"03f38206b524","title":"并不是所有的JVM都支持本地方法，因为Java虚拟机规范并没有明确要求本地方法栈的使用语言，具体实现方式，数据结构等"},{"parent":"7cd3d67de857","children":[],"id":"5e66a7e3227f","title":"Hotspot JVM中，直接将本地方法栈和虚拟机栈合二为一"}],"collapsed":true,"id":"7cd3d67de857","title":"本地方法栈"},{"parent":"root","lineStyle":{"randomLineColor":"#3D5EC2"},"children":[{"parent":"f6a4366f2a09","children":[{"parent":"6a6663c82acc","children":[],"id":"e943c2b6c02a","title":"一个JVM实例只存在一个堆内存，堆也是Java内存管理的核心区域"},{"parent":"6a6663c82acc","children":[],"id":"b677814a0887","title":"Java堆区在JVM启动的时候即被创建，其空间大小也就确认了。堆内存的大小是可调节的"},{"parent":"6a6663c82acc","children":[],"id":"4fef2de96b30","title":"Java虚拟机规范规定，堆可以处于物理上不连续的内存空间中，但在逻辑上它应该被视为连续的。"},{"parent":"6a6663c82acc","children":[],"id":"518bfc3e1fc9","title":"所有的线程共享Java堆，在这里还可以划分线程私有的缓冲区（TLAB）"},{"parent":"6a6663c82acc","children":[],"id":"e2e1ccd3a646","title":"“几乎”所有的对象实例都在这里分配内存"},{"parent":"6a6663c82acc","children":[],"id":"c512603574d2","title":"数组和对象可能永远不会存储在栈上，因为栈帧中保存引用，引用指向对象或者数组在堆中的位置"},{"parent":"6a6663c82acc","children":[],"id":"ba7d96fa7e16","title":"方法结束后，堆中的对象不会马上被移除，仅仅在垃圾收集的时候才会被移除。"},{"parent":"6a6663c82acc","children":[],"id":"5baf94508586","title":"堆是GC执行垃圾回收的重点区域"},{"parent":"6a6663c82acc","children":[{"parent":"527b9503a450","children":[{"parent":"be60cfadfda5","children":[{"parent":"caf2fbb640c2","children":[{"parent":"edd773d9e7d9","children":[],"id":"f9571d20e7cd","title":"Eden区"},{"parent":"edd773d9e7d9","children":[{"parent":"ac9154c92a42","children":[],"id":"dd7a78a3eb3f","title":"from"},{"parent":"ac9154c92a42","children":[{"parent":"3bc2f758bab1","children":[],"id":"535b6c4e310f","title":"谁空谁是to"}],"id":"3bc2f758bab1","title":"to"}],"id":"ac9154c92a42","title":"Survivor区"}],"id":"edd773d9e7d9","title":"新生区"},{"parent":"caf2fbb640c2","children":[],"id":"0111b7de19a5","title":"养老区"},{"parent":"caf2fbb640c2","children":[],"id":"0820b11afdea","title":"永久区"}],"id":"caf2fbb640c2","title":"内存逻辑上分为："}],"id":"be60cfadfda5","title":"Java7及之前"},{"parent":"527b9503a450","children":[{"parent":"41fe64276369","children":[{"parent":"bae699a03409","children":[{"parent":"a449b59e6bdb","children":[],"id":"b2d55fcf8910","title":"Eden区"},{"parent":"a449b59e6bdb","children":[{"parent":"4d67b8d78336","children":[],"id":"066090dc51b8","title":"from"},{"parent":"4d67b8d78336","children":[{"parent":"28253f946f36","children":[],"id":"be2ba4bca1db","title":"谁空谁是to"}],"id":"28253f946f36","title":"to"}],"id":"4d67b8d78336","title":"Survivor区"}],"id":"a449b59e6bdb","title":"新生区"},{"parent":"bae699a03409","children":[],"id":"aaf67841d027","title":"养老区"},{"parent":"bae699a03409","children":[],"id":"961dade19c30","title":"元空间"}],"id":"bae699a03409","title":"内存逻辑上分为："}],"id":"41fe64276369","title":"Java8及之后"},{"parent":"527b9503a450","children":[{"parent":"dcc253ee734d","children":[],"id":"68f6d1e1bcdb","title":"新生区==新生代==年轻代"},{"parent":"dcc253ee734d","children":[],"id":"3fec17418662","title":"养老区==老年区==老年代"},{"parent":"dcc253ee734d","children":[],"id":"02d22c140d96","title":"永久区==永久代"}],"id":"dcc253ee734d","title":"约定"}],"id":"527b9503a450","title":"堆空间细分为："},{"parent":"6a6663c82acc","children":[{"parent":"826bd343c297","children":[{"parent":"e3989d48837e","image":{"w":900,"h":481.42076502732243,"url":"http://cdn.processon.com/5eded44ef346fb1ae5531cc3?e=1591665247&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:Z-YK48EdK07JVib7H3cnnN072C4="},"children":[],"id":"47a89629be6e","title":"子主题"}],"id":"e3989d48837e","title":"安装插件后可查看"}],"id":"826bd343c297","title":"jvisualvm工具"},{"parent":"6a6663c82acc","children":[{"parent":"c1202be57519","children":[],"id":"51f9e25e227b","title":"可开启打印查看方法区实现"}],"id":"c1202be57519","title":"-XX:+PrintGCDetails"}],"id":"6a6663c82acc","title":"堆的核心概述"},{"parent":"f6a4366f2a09","children":[{"parent":"f9fc5bab7655","children":[],"id":"c1869c19ad17","title":"-Xms ：小秘书表示堆空间的起始内存。"},{"parent":"f9fc5bab7655","children":[{"parent":"0010af67f886","children":[],"id":"bfe3b9df640b","title":"超过最大内存将抛出OOM"}],"id":"0010af67f886","title":"-Xmx：小明星表示堆空间的最大内存"},{"parent":"f9fc5bab7655","children":[],"id":"27c321c8922f","title":"通常将-Xms和-Xmx两个参数配置相同的值，其目的是为了能够在java垃圾会后清理完堆区后，不需要重新分隔计算堆区的大小，从而提高性能"},{"parent":"f9fc5bab7655","children":[{"parent":"7c4c6c7db2b8","children":[{"parent":"cdf53a1d750f","children":[{"image":{"w":900,"h":333.83458646616543,"url":"http://cdn.processon.com/5eded9401e08532637190f3e?e=1591666512&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:H1lEzp4SlnGn8CKn8nuM-L3l79k="},"parent":"ff34adc3c248","children":[],"id":"ad75af8518c6","title":"截图"}],"id":"ff34adc3c248","title":"物理电脑内存大小/64"}],"id":"cdf53a1d750f","title":"初始内存大小"},{"parent":"7c4c6c7db2b8","children":[{"parent":"ad0adeae431d","children":[],"id":"7ff7706abf66","title":"物理电脑内存/4"}],"id":"ad0adeae431d","title":"最大内存大小"}],"id":"7c4c6c7db2b8","title":"默认情况下"},{"parent":"f9fc5bab7655","children":[{"parent":"53173341896a","children":[],"id":"c4f53529e6bc","title":"查看当前程序运行的进程"}],"id":"53173341896a","title":"jps命令"},{"parent":"f9fc5bab7655","children":[{"parent":"b24816ec9402","children":[{"parent":"f5f59be4507d","children":[],"id":"bdd5988a2e56","title":"jstat -gc 进程号"}],"id":"f5f59be4507d","title":"查看JVM在gc时的统计信息"}],"id":"b24816ec9402","title":"jstat"}],"id":"f9fc5bab7655","title":"设置堆内存的大小与OOM"},{"parent":"f6a4366f2a09","children":[{"parent":"d889a92d48a5","children":[],"id":"9870e15ff397","title":"Java对象划分为两类：生命周期短和长的。"},{"parent":"d889a92d48a5","children":[{"parent":"384e21afe62d","children":[{"parent":"5aa33fc9fb06","children":[],"id":"f4f0d8487c2b","title":"ratio：比率比例的意思"}],"id":"5aa33fc9fb06","title":"-XX:NewRatio=2，表示新生代占1，老年代占2，新生代占整个堆的1/3"}],"id":"384e21afe62d","title":"新生代与老年代空间默认比例1:2"},{"parent":"d889a92d48a5","children":[],"id":"172421238e73","title":"jinfo -flag NewRatio 进程号，查看参数设定值"},{"parent":"d889a92d48a5","children":[{"parent":"943792ef7baf","children":[{"parent":"372423431701","children":[],"id":"0c5b4ad41dd7","title":"Eden与Survivor区的比例"}],"id":"372423431701","title":"-XX:SurvivorRatio调整这个空间比例"},{"parent":"943792ef7baf","children":[{"parent":"8ead70f92be1","children":[],"id":"38b0de3ed7ec","title":"-XX:-UseAdaptiveSizePolicy：-表示关闭自适应，实际没有用。直接用Ratio分配即可"}],"id":"8ead70f92be1","title":"实际是6:1:1，因为有自适应机制"}],"id":"943792ef7baf","title":"在HotSpot中，Eden空间和另外两个Survivor空间缺省所占的比例是：8:1:1"},{"parent":"d889a92d48a5","children":[{"parent":"57e6fc2e7709","children":[],"id":"2614f3ad5918","title":"Eden放不了的大对象，直接进入老年代了。"}],"id":"57e6fc2e7709","title":"几乎所有的Java对象都是在Eden区被new出来的。"},{"parent":"d889a92d48a5","children":[],"id":"d20fd0885deb","title":"IBM研究表明，新生代80%的对象都是朝生夕死"},{"parent":"d889a92d48a5","children":[],"id":"82a2e554dd45","title":"-Xmn：洗面奶，设置新生代最大内存大小，如果同时设置了新生代比例与此参数冲突，则以此参数为准。"}],"id":"d889a92d48a5","title":"年轻代与老年代"},{"parent":"f6a4366f2a09","children":[{"parent":"b0526fd976da","children":[],"id":"ab3ed18a2762","title":"1、new的对象先放在Eden区，此区有大小限制"},{"parent":"b0526fd976da","children":[],"id":"c4c06b8bb58a","title":"2、当创建新对象，Eden空间填满时，会触发Minor GC，将Eden不再被其他对象引用的对象进行销毁。再加载新的对象放到Eden区"},{"parent":"b0526fd976da","children":[],"id":"abc357d989fe","title":"3、将Eden中剩余的对象移到幸存者0区"},{"parent":"b0526fd976da","children":[],"id":"31854d2032c6","title":"4、再次触发垃圾回收，此时上次幸存者下来的，放在幸存者0区的，如果没有回收，就会放到幸存者1区"},{"parent":"b0526fd976da","children":[],"id":"a3a76fefe97c","title":"5、再次经历垃圾回收，又会将幸存者重新放回幸存者0区，依次类推"},{"parent":"b0526fd976da","children":[{"parent":"fdcb43d6e196","children":[{"image":{"w":900,"h":684.2157842157842,"url":"http://cdn.processon.com/5edf4c6ae0b34d2a6bda31c4?e=1591695995&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:zC0Au9urXWmy0LefJCMcsoFMGTI="},"parent":"4494ff26e537","children":[],"id":"6f6ebe6c1ab9","title":"子主题"}],"id":"4494ff26e537","title":"-XX:MaxTenuringThreshold=N进行设置"}],"id":"fdcb43d6e196","title":"6、可以设置一个次数，默认是15次，超过15次，则会将幸存者区幸存下来的转去老年区"},{"parent":"b0526fd976da","children":[{"parent":"f7e3ac117ac8","children":[],"id":"a11198dd2271","title":"针对幸存者s0，s1区的总结：复制之后有交换，谁空谁是to"},{"parent":"f7e3ac117ac8","children":[],"id":"08b174d5a02a","title":"频繁在新生区收集，很少在养老区收集，几乎不在永久区/元空间搜集"}],"id":"f7e3ac117ac8","title":"总结："}],"id":"b0526fd976da","title":"图解对象分配一般过程"},{"parent":"f6a4366f2a09","children":[{"image":{"w":804,"h":649,"url":"http://cdn.processon.com/5edf4d877d9c0844200adedc?e=1591696279&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:zu6OFTSxhhye-a-GyDWVNkaV-yc="},"parent":"a338c05f2579","children":[],"id":"ff867443e3ed","title":"截图"},{"parent":"a338c05f2579","children":[],"id":"2e675cddbb4f","title":"触发YGC，幸存者区就会进行回收，不会主动进行回收"},{"parent":"a338c05f2579","children":[{"parent":"752069927ac0","children":[],"id":"aadfc579005e","title":"old区也放不下，需要FullGC（MajorGC），这两GC概念还是有区别的。下面详解"}],"id":"752069927ac0","title":"超大对象eden放不下，就要看Old区大小是否可以放下"}],"id":"a338c05f2579","title":"对象分配特殊过程"},{"parent":"f6a4366f2a09","children":[{"parent":"f6c5b7af272a","children":[],"id":"d961d6ebe4f2","title":"JDK命令行"},{"parent":"f6c5b7af272a","children":[],"id":"c5d272a43bbd","title":"Eclipse：Memory Analyzer Tool"},{"parent":"f6c5b7af272a","children":[],"id":"e4585a76f3d1","title":"Jconsole"},{"parent":"f6c5b7af272a","children":[],"id":"63f86792347e","title":"VisualVM"},{"parent":"f6c5b7af272a","children":[],"id":"5dba4c043637","title":"Jprofiler"},{"parent":"f6c5b7af272a","children":[],"id":"4eab9adfad6e","title":"Java Flight Recorder"}],"id":"f6c5b7af272a","title":"常用调优工具"},{"parent":"f6a4366f2a09","children":[{"parent":"aec8e3735f38","children":[{"parent":"4da7d185c2d7","children":[{"parent":"1224e31fa8a9","children":[{"parent":"060a74647d79","children":[{"parent":"d84d01106440","children":[],"id":"e19e4ffdd7e5","title":"MinorGC （YoungGC）"}],"id":"d84d01106440","title":"新生代收集"},{"parent":"060a74647d79","children":[{"parent":"10cb24f8ee2a","children":[{"parent":"d3ae49941387","children":[],"id":"635f7673d99a","title":"目前只有CMS GC会单独收集老年代的行为"},{"parent":"d3ae49941387","children":[],"id":"4a1d256e4e9e","title":"很多时候MajorGC与FullGC混淆使用，具体分辨是老年代回收还是整堆回收"}],"id":"d3ae49941387","title":"MajorGC/old<br>GC"}],"id":"10cb24f8ee2a","title":"老年代收集"},{"parent":"060a74647d79","children":[{"parent":"ae8b51e66455","children":[{"parent":"b84b4ef70bae","children":[],"id":"cbdf5344d1d7","title":"目前只有G1 GC会有这种行为"}],"id":"b84b4ef70bae","title":"收集整个新生代以及部分老年代的垃圾收集"}],"id":"ae8b51e66455","title":"混合收集"}],"id":"060a74647d79","title":"部分收集"},{"parent":"1224e31fa8a9","children":[{"parent":"7d7829aa2bc7","children":[],"id":"727bc3f4a9bb","title":"收集整个Java堆和方法区的垃圾收集"}],"id":"7d7829aa2bc7","title":"整堆收集"}],"id":"1224e31fa8a9","title":"GC按照内存回收区域分为"}],"id":"4da7d185c2d7","title":"针对HotSpotVM的实现"},{"parent":"aec8e3735f38","children":[],"id":"0bceda25d6e3","title":"MajorGC"},{"parent":"aec8e3735f38","children":[],"id":"c084ec2a2090","title":"FullGC"},{"parent":"aec8e3735f38","children":[{"parent":"c7b00f3a8a77","children":[],"id":"c4e518a85e4d","title":"当年轻代空间不足时，就会触发MinorGC，这里的年轻代指的是Eden代满，Survivor满不会触发GC。每次MinorGC会清理年轻代的内存"},{"parent":"c7b00f3a8a77","children":[{"parent":"e08d06c74c99","children":[],"id":"0ae7b4d4d1ce","title":"Minor翻译，较小的，未成年的"}],"id":"e08d06c74c99","title":"因为Java对象大多朝生夕灭，所以MinorGC非常频繁"},{"parent":"c7b00f3a8a77","children":[{"parent":"4a8051f5e09d","children":[],"id":"d5a202053526","title":"后面详解"}],"id":"4a8051f5e09d","title":"MinorGC会引发STW"}],"id":"c7b00f3a8a77","title":"MinorGC的触发条件"},{"parent":"aec8e3735f38","children":[{"parent":"50003a8b41e0","children":[],"id":"2a4539a19459","title":"指发生在老年代的GC，对象从老年代消失，我们说“MajorGC”“FullGC”发生了"},{"parent":"50003a8b41e0","children":[{"parent":"56904594030f","children":[],"id":"e31c8131a02d","title":"非绝对，在Parallel Scavenge收集器的收集策略里就直接进行MajorGC的策略选择过程"},{"parent":"56904594030f","children":[],"id":"6602a2627a59","title":"也就是老年代空间不足，会先尝试触发MinorGC，如果之后空间还不足，则触发MajorGC"}],"id":"56904594030f","title":"出现了MajorGC，经常会伴随至少一次MinorGC"},{"parent":"50003a8b41e0","children":[],"id":"13dd9899b97c","title":"MajorGC的速度比MinorGC慢10倍以上，STW的时间更长"},{"parent":"50003a8b41e0","children":[],"id":"9e232446dab8","title":"如果MajorGC后，内存还不足，就报OOM了"}],"id":"50003a8b41e0","title":"老年代GC（MajorGC/FullGC）触发条件"},{"parent":"aec8e3735f38","children":[{"parent":"b5ee553b29ac","children":[],"id":"36443ef7c9aa","title":"1、调用System.gc()时，系统建议执行FullGC，但是不必然执行"},{"parent":"b5ee553b29ac","children":[],"id":"940196caddc2","title":"2、老年代空间不足"},{"parent":"b5ee553b29ac","children":[],"id":"8918e47e8b4a","title":"3、方法区空间不足"},{"parent":"b5ee553b29ac","children":[],"id":"dabc8ef5de66","title":"4、通过MinorGC后进入老年代的平均大小，大于老年代的可用内存"},{"parent":"b5ee553b29ac","children":[],"id":"0cff7806d11a","title":"5、由Eden区，Survivor 0区向Survivor 1区复制时，对象的大小大于ToSpace可用内存，则把改对象转存到老年代，且老年代的可用内存小于该对象的大小"},{"parent":"b5ee553b29ac","children":[],"id":"79fedbf64e07","title":"FullGC是开发或调优中尽量要避免的，这样暂停时间会短一些。"}],"id":"b5ee553b29ac","title":"FullGC的触发机制"}],"id":"aec8e3735f38","title":"MinorGC，MajorGC，FullGC"},{"parent":"f6a4366f2a09","children":[{"parent":"08470a44c9d9","children":[],"id":"e65e949bedfd","title":"其实不分代也可以，分代的理由是优化GC性能"}],"id":"08470a44c9d9","title":"堆空间分代思想"},{"parent":"f6a4366f2a09","children":[{"parent":"751d50eeea5a","children":[{"parent":"3d9fc9103f41","children":[],"id":"b6bfd31288d4","title":"-XX:MaxTenuringThreshold"}],"id":"3d9fc9103f41","title":"如果对象再Eden出生并经过第一次MinorGC后仍然存活，并且能被Survivor区容纳，则被移动到Survivor空间中，并将对象年龄设置为1，对象再Survivor区每熬过一次MinorGC，年龄就+1，当年龄增加到一定程度（默认为15，不同Jvm，GC都所有不同）时，就会被晋升到老年代中"},{"parent":"751d50eeea5a","children":[],"id":"355900e9f70b","title":"优先分配到Eden"},{"parent":"751d50eeea5a","children":[{"parent":"f8b1dbe8832d","children":[],"id":"f54f7a64d6e6","title":"尽量避免程序中出现过多的大对象"}],"id":"f8b1dbe8832d","title":"大对象直接分配到老年代"},{"parent":"751d50eeea5a","children":[],"id":"e234551d8c48","title":"长期存活的对象分配到老年代"},{"parent":"751d50eeea5a","children":[{"parent":"4080a602f7b2","children":[],"id":"40b9c3a830e0","title":"如果Survivor区中相同年龄的所有对象大小的总和大于Survivor空间的一半，年龄大于或等于该年龄的对象可以直接进入老年代，无需等到MaxTenuringThreshold中要求的年龄"}],"id":"4080a602f7b2","title":"动态对象年龄分配"},{"parent":"751d50eeea5a","children":[{"parent":"e1e14861388a","children":[],"id":"277abcb8bd6c","title":"-XX:HandlePromotionFailure"},{"parent":"e1e14861388a","children":[{"parent":"123ec8ee8586","children":[],"id":"b89b560f95d7","title":"如果大于，则此次MinorGC是安全的"},{"parent":"123ec8ee8586","children":[{"parent":"27244768b94e","children":[{"parent":"fed8e5533b5e","children":[],"id":"7dfd97854ce4","title":"会继续检查老年代最大可用连续空间是否大于历次晋升到老年代的对象的平均大小"},{"parent":"fed8e5533b5e","children":[],"id":"89b5b45b1a75","title":"大于，则尝试进行一次MinorGC，但是这次MinorGC依然是有风险的"},{"parent":"fed8e5533b5e","children":[],"id":"6285865e4263","title":"小于，则改为进行一次FullGC"}],"id":"fed8e5533b5e","title":"true"},{"parent":"27244768b94e","children":[{"parent":"6e34b2ce59c2","children":[],"id":"25f90cf87fad","title":"则改为进行一次FullGC"}],"id":"6e34b2ce59c2","title":"false"}],"id":"27244768b94e","title":"如果小于，则查看-XX:HandlePromotionFailure设置是否允许担保失败"},{"parent":"123ec8ee8586","children":[{"parent":"d4b726e23fff","children":[],"id":"fa9b392e04fb","title":"规则改为只要老年代的连续空间大于新生代对象总大小，或者历次晋升的平均大小，就会进行MinorGC"},{"parent":"d4b726e23fff","children":[],"id":"c98c9c06c0ba","title":"否则进行FullGC"}],"id":"d4b726e23fff","title":"jdk6update24之后，这个参数不会再影响到虚拟机的空间分配担保策略。"}],"id":"123ec8ee8586","title":"在发生Minor GC之前，虚拟机会检查老年代最大可用的连续空间，是否大于新生代所有对象的总空间"},{"parent":"e1e14861388a","children":[],"id":"8bb642652fd1","title":""},{"parent":"e1e14861388a","children":[],"id":"4e67fab0103f","title":"子主题"}],"id":"e1e14861388a","title":"空间分配担保"}],"id":"751d50eeea5a","title":"内存分配策略"},{"parent":"f6a4366f2a09","children":[{"parent":"cff4ccbbb824","children":[],"id":"258f8e825bbd","title":"Thread Local Allocation Buffer"},{"parent":"cff4ccbbb824","children":[],"id":"b6679d121973","title":"堆区是线程共享区域，任何线程都可以访问到堆区的共享数据"},{"parent":"cff4ccbbb824","children":[],"id":"68cdf5827304","title":"由于对象实例的创建在JVM中非常频繁，因此在并发环境下从堆区中划分内存空间是线程不安全的。"},{"parent":"cff4ccbbb824","children":[],"id":"5c91234898d0","title":"为避免多个线程操作同一地址，需要使用加锁等机制，进而影响分配速度"},{"parent":"cff4ccbbb824","children":[{"parent":"ee7d617289bf","children":[],"id":"62fb992b7eab","title":"从内存模型而不是垃圾收集的角度，对Eden区域进行划分，JVM为每个线程分配了一个私有缓存区域，包含在Eden空间中"},{"parent":"ee7d617289bf","children":[],"id":"2d6a368a8c24","title":"多线程同时分配内存时，使用TLAB可以避免一系列的非线程安全问题，同时还能够提升内存分配的吞吐量，因此我们将这种内存分配方式成为快速分配策略"},{"parent":"ee7d617289bf","children":[{"image":{"w":900,"h":468.5609532538955,"url":"http://cdn.processon.com/5ee0339fe0b34d2a6bdb7c69?e=1591755183&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:SoKcLOWFU5YnCg_HPgrGTSd13OE="},"parent":"54e32d5e7826","children":[],"id":"8cab2d76c73b","title":"截图"}],"id":"54e32d5e7826","title":"openjdk衍生出来的JVM都提供了TLAB的设计"},{"parent":"ee7d617289bf","children":[{"parent":"dcf2add9cb85","children":[],"id":"7e9b7d4563b3","title":"尽管不是所有的对象实例都能够在TLAB中成功分配内存，但是JVM确实是将TLAB作为内存分配的首选"},{"parent":"dcf2add9cb85","children":[],"id":"2bd756d83f77","title":"开发人员通过-XX:UseTLAB设置是否开启TLAB空间"},{"parent":"dcf2add9cb85","children":[],"id":"591e74c1b75d","title":"默认情况下，TLAB空间内存非常小，仅占有整个Eden空间的1%，通过-XX:TLABWasteTargetPercent设置TLAB空间所占用Eden空间的百分比大小"},{"parent":"dcf2add9cb85","children":[],"id":"61718e29233d","title":"一旦对象在TLAB空间分配内存失败，JVM就会尝试通过使用加锁机制确保数据操作的原子性，从而直接在Eden空间中分配内存"}],"id":"dcf2add9cb85","title":"补充"}],"id":"ee7d617289bf","title":"TLAB"}],"id":"cff4ccbbb824","title":"为对象分配内存TLAB"},{"parent":"f6a4366f2a09","children":[{"parent":"29c3e720f00d","children":[{"parent":"a86542d1451d","children":[],"link":{"title":"单击打开博客地址","type":"url","value":"http://www.baidu.com"},"id":"52af377e425e","title":"单击打开博客"}],"id":"a86542d1451d","title":"学会怎么在官网查找Java语言规范，java虚拟机规范等"},{"image":{"w":900,"h":432.9230769230769,"url":"http://cdn.processon.com/5ee1790107912929cb3971df?e=1591838482&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:AMVmzGKBBJbXY4sgaoSItUO54r4="},"parent":"29c3e720f00d","children":[],"id":"14a4849f8497","title":"截图"}],"id":"29c3e720f00d","title":"小结堆空间的参数设置"},{"parent":"f6a4366f2a09","children":[{"parent":"caabdca72ae9","children":[],"id":"3eb02bf7ec6f","title":"随着JIT编译器的发展与逃逸分析技术逐渐成熟，栈上分配、标量替换优化技术，将会导致一些微秒变化，所有对象分配到堆上渐渐变得不那么绝对了。"},{"parent":"caabdca72ae9","children":[],"id":"d5fad968ef79","title":"有一种特殊情况，如果经过逃逸分析后发现，一个对象并没有逃逸出方法的话，那么就可能被优化成栈上分配，这样无需堆上分配，也不需要垃圾回收了，也是最常见的堆外存储技术"},{"parent":"caabdca72ae9","children":[],"id":"c978cac3f34a","title":"TaoBaoVM，其中创新的GCIH（GC invisible heap）技术实现了off-heap,实现了将生命周期较长的Java对象从heap中移动heap外，并且GC不能管理GCIH内部的Java对象，以此达到降低GC的回收频率和提升GC的回收效率的目的"},{"parent":"caabdca72ae9","children":[{"parent":"1035c84ee730","children":[{"parent":"89b940d97c1a","children":[],"id":"09408b28000c","title":"当一个对象在方法中定义后，对象只在方法内部使用，则认为没有发生逃逸"},{"parent":"89b940d97c1a","children":[{"image":{"w":900,"h":420.54176072234765,"url":"http://cdn.processon.com/5ee17ee61e085326371f38df?e=1591839990&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:n6pq8Hw9wdbZj44w6-V1x31VkBk="},"parent":"90ba557e124c","children":[],"id":"620fe15073c6","title":"截图"}],"id":"90ba557e124c","title":"当一个对象在方法中被定义后，它被外部方法引用，则认为发生逃逸，例如作为调用参数传递到其他地方中"}],"id":"89b940d97c1a","title":"逃逸分析的基本行为就是分析对象动态作用域"},{"parent":"1035c84ee730","children":[{"parent":"b13a2506ef08","children":[],"id":"fb082ba633b1","title":"将堆分配转为栈分配，如果一个对象在子程序中被分配，要使指向该对象的指针永远不会逃逸，对象可能是栈分配的候选，而不是堆分配"}],"id":"b13a2506ef08","title":"栈上分配"},{"parent":"1035c84ee730","children":[{"parent":"3664ed4f4950","children":[{"parent":"9e743255776c","children":[{"image":{"w":900,"h":419.9544764795144,"url":"http://cdn.processon.com/5ee180e607912929cb397a9c?e=1591840502&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:fcWrG7_oKXRFBoFzLJNCa1h0tgw="},"parent":"fdaf2eabe684","children":[],"id":"9fcbda0f2cc5","title":"截图"}],"id":"fdaf2eabe684","title":"JIT编译器可以借助逃逸分析来判断同步块所使用的的锁对象，是否只能够被一个线程访问，而没有被发布到其他线程。如果没有，那么JIT编译器在编译这个同步块的时候，就会取消对这部分代码的同步。这样就大大提高并发性和性能，这个取消同步的过程就叫同步省略，也叫锁消除"}],"id":"9e743255776c","title":"如果一个对象被发现只能从一个线程被访问到，对于这个对象的操作可以不考虑同步"}],"id":"3664ed4f4950","title":"同步策略"},{"parent":"1035c84ee730","children":[{"parent":"5314328422a6","children":[{"parent":"59bd78c57489","children":[],"id":"7b67468aef45","title":"子主题"}],"id":"59bd78c57489","title":"有的对象可能不需要作为一个连续的内存结构存在，也可以被访问到，那么对象的部分（或全部）可以不存储在内存。而是存储在CPU寄存器中"},{"parent":"5314328422a6","children":[],"id":"885d40d86b2f","title":"标量是指一个无法再分解的更小的数据的数据。Java中原始数据类型就是标量"},{"parent":"5314328422a6","children":[{"parent":"6e89349e911d","image":{"w":900,"h":261.59769008662175,"url":"http://cdn.processon.com/5ee18195f346fb1ae559526c?e=1591840677&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:5Jlee7EFKbEO0Vi6w4JfwnliYak="},"children":[],"id":"f619d611f865","title":"截图"},{"parent":"6e89349e911d","image":{"w":900,"h":249.94913530010172,"url":"http://cdn.processon.com/5ee181c7e401fd1fd287923d?e=1591840727&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:d7LMuv6gdzJ3fAxHT-5Lq2LkE_8="},"children":[],"id":"459c0377aa24","title":"子主题"}],"id":"6e89349e911d","title":"可以分解的数据叫聚合量，Java中的对象就是聚合量，因为他可以分解成其他聚合量和标量"},{"parent":"5314328422a6","children":[],"id":"6e23633834ff","title":"标量替换参数：-XX:EliminateAllocations，默认打开"}],"id":"5314328422a6","title":"分离对象或标量替换"}],"id":"1035c84ee730","title":"逃逸分析概述"}],"id":"caabdca72ae9","title":"堆是分配对象的唯一选择吗"}],"collapsed":true,"id":"f6a4366f2a09","title":"堆"}],"root":true,"style":{"border-radius":"6px","background-color":"rgb(255, 83, 92)","color":"rgb(255, 255, 255)","font-weight":"bold","border-color":"rgb(255, 255, 255)","border-width":"0px","border-style":"none"},"theme":"theme3","id":"root","title":"看这一篇就够了<br>全网最全JVM知识点导图<br>耗时二个月吐血整理版<br>基于《周志明深入理解java虚拟机第三版》书籍，<br>详细看过两轮尚硅谷203集教学视频<br>免费发布，实属不易，还请关注支持【老张聊天】。<br><br>","version":18,"structure":"mind_free"}},"meta":{"exportTime":"2022-08-18 00:26:27","member":"","diagramInfo":{"creator":"","created":"","modified":"","title":"","category":""},"id":"","type":"ProcessOn Schema File","version":"1.0"}}